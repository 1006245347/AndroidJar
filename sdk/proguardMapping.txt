com.github.gzuliyujiang.oaid.BuildConfig -> com.github.gzuliyujiang.oaid.BuildConfig:
# {"fileName":"BuildConfig.java","id":"sourceFile"}
    boolean DEBUG -> DEBUG
    java.lang.String LIBRARY_PACKAGE_NAME -> LIBRARY_PACKAGE_NAME
    java.lang.String BUILD_TYPE -> BUILD_TYPE
    java.lang.String BUILD_TIME -> BUILD_TIME
    java.lang.String GIT_BRANCH -> GIT_BRANCH
    java.lang.String GIT_LATEST_COMMIT_HASH -> GIT_LATEST_COMMIT_HASH
    6:6:void <init>() -> <init>
com.github.gzuliyujiang.oaid.DeviceID -> com.github.gzuliyujiang.oaid.DeviceID:
# {"fileName":"DeviceID.java","id":"sourceFile"}
    android.app.Application application -> application
    java.lang.String clientId -> clientId
    java.lang.String oaid -> oaid
    59:71:void register(android.app.Application) -> register
    80:84:java.lang.String getClientId() -> getClientId
    94:94:java.lang.String getClientIdMD5() -> getClientIdMD5
    104:104:java.lang.String getClientIdSHA1() -> getClientIdSHA1
    113:117:java.lang.String getOAID() -> getOAID
    127:128:void getOAID(android.content.Context,com.github.gzuliyujiang.oaid.IGetter) -> getOAID
    137:137:boolean supportedOAID(android.content.Context) -> supportedOAID
    151:166:java.lang.String getUniqueID(android.content.Context) -> getUniqueID
    172:188:java.lang.String getIMEI(android.content.Context) -> getIMEI
    199:206:java.lang.String getAndroidID(android.content.Context) -> getAndroidID
    218:234:java.lang.String getWidevineID() -> getWidevineID
    243:265:java.lang.String getPseudoID() -> getPseudoID
    283:297:java.lang.String getGUID(android.content.Context) -> getGUID
    301:306:java.lang.String getUuidFromSystemSettings(android.content.Context) -> getUuidFromSystemSettings
    310:323:void saveUuidToSystemSettings(android.content.Context,java.lang.String) -> saveUuidToSystemSettings
    326:339:java.lang.String getUuidFromExternalStorage(android.content.Context) -> getUuidFromExternalStorage
    343:361:void saveUuidToExternalStorage(android.content.Context,java.lang.String) -> saveUuidToExternalStorage
    364:376:java.io.File getGuidFile(android.content.Context) -> getGuidFile
    380:386:void saveUuidToSharedPreferences(android.content.Context,java.lang.String) -> saveUuidToSharedPreferences
    389:395:java.lang.String getUuidFromSharedPreferences(android.content.Context) -> getUuidFromSharedPreferences
    403:416:java.lang.String calculateHash(java.lang.String,java.lang.String) -> calculateHash
    425:426:void <init>() -> <init>
    430:437:void onOAIDGetComplete(java.lang.String) -> onOAIDGetComplete
    441:455:void onOAIDGetError(java.lang.Exception) -> onOAIDGetError
    46:46:void <init>(com.github.gzuliyujiang.oaid.DeviceID$1) -> <init>
com.github.gzuliyujiang.oaid.DeviceID$1 -> com.github.gzuliyujiang.oaid.DeviceID$1:
# {"fileName":"DeviceID.java","id":"sourceFile"}
com.github.gzuliyujiang.oaid.DeviceID$Holder -> com.github.gzuliyujiang.oaid.DeviceID$Holder:
# {"fileName":"DeviceID.java","id":"sourceFile"}
    com.github.gzuliyujiang.oaid.DeviceID INSTANCE -> INSTANCE
    420:420:void <init>() -> <init>
    421:421:void <clinit>() -> <clinit>
com.github.gzuliyujiang.oaid.DeviceIdentifier -> com.github.gzuliyujiang.oaid.DeviceIdentifier:
# {"fileName":"DeviceIdentifier.java","id":"sourceFile"}
    boolean registered -> registered
    java.lang.String clientId -> clientId
    java.lang.String imei -> imei
    java.lang.String oaid -> oaid
    java.lang.String androidId -> androidId
    java.lang.String widevineId -> widevineId
    java.lang.String pseudoId -> pseudoId
    java.lang.String guid -> guid
    39:40:void <init>() -> <init>
    43:52:void register(android.app.Application) -> register
    55:65:java.lang.String getClientId() -> getClientId
    69:79:java.lang.String getIMEI(android.content.Context) -> getIMEI
    83:106:java.lang.String getOAID(android.content.Context) -> getOAID
    110:120:java.lang.String getAndroidID(android.content.Context) -> getAndroidID
    124:134:java.lang.String getWidevineID() -> getWidevineID
    138:148:java.lang.String getPseudoID() -> getPseudoID
    152:162:java.lang.String getGUID(android.content.Context) -> getGUID
    28:28:java.lang.String access$002(java.lang.String) -> access$002
    29:36:void <clinit>() -> <clinit>
com.github.gzuliyujiang.oaid.DeviceIdentifier$1 -> com.github.gzuliyujiang.oaid.DeviceIdentifier$1:
# {"fileName":"DeviceIdentifier.java","id":"sourceFile"}
    88:88:void <init>() -> <init>
    91:92:void onOAIDGetComplete(java.lang.String) -> onOAIDGetComplete
    96:97:void onOAIDGetError(java.lang.Exception) -> onOAIDGetError
com.github.gzuliyujiang.oaid.IGetter -> com.github.gzuliyujiang.oaid.IGetter:
# {"fileName":"IGetter.java","id":"sourceFile"}
    void onOAIDGetComplete(java.lang.String) -> onOAIDGetComplete
    void onOAIDGetError(java.lang.Exception) -> onOAIDGetError
com.github.gzuliyujiang.oaid.IOAID -> com.github.gzuliyujiang.oaid.IOAID:
# {"fileName":"IOAID.java","id":"sourceFile"}
    boolean supported() -> supported
    void doGet(com.github.gzuliyujiang.oaid.IGetter) -> doGet
com.github.gzuliyujiang.oaid.OAIDException -> com.github.gzuliyujiang.oaid.OAIDException:
# {"fileName":"OAIDException.java","id":"sourceFile"}
    23:24:void <init>(java.lang.String) -> <init>
    27:28:void <init>(java.lang.Throwable) -> <init>
com.github.gzuliyujiang.oaid.OAIDLog -> com.github.gzuliyujiang.oaid.OAIDLog:
# {"fileName":"OAIDLog.java","id":"sourceFile"}
    java.lang.String TAG -> TAG
    boolean enable -> enable
    29:30:void <init>() -> <init>
    36:37:void enable() -> enable
    45:52:void print(java.lang.Object) -> print
    26:26:void <clinit>() -> <clinit>
com.github.gzuliyujiang.oaid.OAIDRom -> com.github.gzuliyujiang.oaid.OAIDRom:
# {"fileName":"OAIDRom.java","id":"sourceFile"}
    32:33:void <init>() -> <init>
    36:47:java.lang.String sysProperty(java.lang.String,java.lang.String) -> sysProperty
    52:54:boolean isHuawei() -> isHuawei
    59:59:boolean isEmui() -> isEmui
    64:67:boolean isOppo() -> isOppo
    72:74:boolean isVivo() -> isVivo
    79:81:boolean isXiaomi() -> isXiaomi
    86:86:boolean isMiui() -> isMiui
    91:92:boolean isBlackShark() -> isBlackShark
    97:98:boolean isOnePlus() -> isOnePlus
    103:104:boolean isSamsung() -> isSamsung
    109:111:boolean isMeizu() -> isMeizu
    116:118:boolean isLenovo() -> isLenovo
    123:124:boolean isNubia() -> isNubia
    129:130:boolean isASUS() -> isASUS
    135:136:boolean isZTE() -> isZTE
    141:142:boolean isMotolora() -> isMotolora
    147:147:boolean isFreeme() -> isFreeme
    153:156:boolean isCoolpad(android.content.Context) -> isCoolpad
    162:162:boolean isCoosea() -> isCoosea
    167:167:boolean isSSUI() -> isSSUI
com.github.gzuliyujiang.oaid.impl.AsusImpl -> com.github.gzuliyujiang.oaid.impl.AsusImpl:
# {"fileName":"AsusImpl.java","id":"sourceFile"}
    android.content.Context context -> context
    36:38:void <init>(android.content.Context) -> <init>
    42:50:boolean supported() -> supported
    56:75:void doGet(com.github.gzuliyujiang.oaid.IGetter) -> doGet
com.github.gzuliyujiang.oaid.impl.AsusImpl$1 -> com.github.gzuliyujiang.oaid.impl.AsusImpl$1:
# {"fileName":"AsusImpl.java","id":"sourceFile"}
    com.github.gzuliyujiang.oaid.impl.AsusImpl this$0 -> this$0
    62:62:void <init>(com.github.gzuliyujiang.oaid.impl.AsusImpl) -> <init>
    65:72:java.lang.String callRemoteInterface(android.os.IBinder) -> callRemoteInterface
com.github.gzuliyujiang.oaid.impl.CoolpadImpl -> com.github.gzuliyujiang.oaid.impl.CoolpadImpl:
# {"fileName":"CoolpadImpl.java","id":"sourceFile"}
    android.content.Context context -> context
    38:44:void <init>(android.content.Context) -> <init>
    48:56:boolean supported() -> supported
    62:77:void doGet(com.github.gzuliyujiang.oaid.IGetter) -> doGet
    35:35:android.content.Context access$000(com.github.gzuliyujiang.oaid.impl.CoolpadImpl) -> access$000
com.github.gzuliyujiang.oaid.impl.CoolpadImpl$1 -> com.github.gzuliyujiang.oaid.impl.CoolpadImpl$1:
# {"fileName":"CoolpadImpl.java","id":"sourceFile"}
    com.github.gzuliyujiang.oaid.impl.CoolpadImpl this$0 -> this$0
    67:67:void <init>(com.github.gzuliyujiang.oaid.impl.CoolpadImpl) -> <init>
    70:74:java.lang.String callRemoteInterface(android.os.IBinder) -> callRemoteInterface
com.github.gzuliyujiang.oaid.impl.CooseaImpl -> com.github.gzuliyujiang.oaid.impl.CooseaImpl:
# {"fileName":"CooseaImpl.java","id":"sourceFile"}
    android.content.Context context -> context
    android.app.KeyguardManager keyguardManager -> keyguardManager
    34:37:void <init>(android.content.Context) -> <init>
    41:52:boolean supported() -> supported
    58:76:void doGet(com.github.gzuliyujiang.oaid.IGetter) -> doGet
com.github.gzuliyujiang.oaid.impl.DefaultImpl -> com.github.gzuliyujiang.oaid.impl.DefaultImpl:
# {"fileName":"DefaultImpl.java","id":"sourceFile"}
    23:23:void <init>() -> <init>
    27:27:boolean supported() -> supported
    32:36:void doGet(com.github.gzuliyujiang.oaid.IGetter) -> doGet
com.github.gzuliyujiang.oaid.impl.FreemeImpl -> com.github.gzuliyujiang.oaid.impl.FreemeImpl:
# {"fileName":"FreemeImpl.java","id":"sourceFile"}
    android.content.Context context -> context
    36:38:void <init>(android.content.Context) -> <init>
    42:50:boolean supported() -> supported
    56:71:void doGet(com.github.gzuliyujiang.oaid.IGetter) -> doGet
com.github.gzuliyujiang.oaid.impl.FreemeImpl$1 -> com.github.gzuliyujiang.oaid.impl.FreemeImpl$1:
# {"fileName":"FreemeImpl.java","id":"sourceFile"}
    com.github.gzuliyujiang.oaid.impl.FreemeImpl this$0 -> this$0
    61:61:void <init>(com.github.gzuliyujiang.oaid.impl.FreemeImpl) -> <init>
    64:68:java.lang.String callRemoteInterface(android.os.IBinder) -> callRemoteInterface
com.github.gzuliyujiang.oaid.impl.GmsImpl -> com.github.gzuliyujiang.oaid.impl.GmsImpl:
# {"fileName":"GmsImpl.java","id":"sourceFile"}
    android.content.Context context -> context
    42:44:void <init>(android.content.Context) -> <init>
    48:56:boolean supported() -> supported
    62:78:void doGet(com.github.gzuliyujiang.oaid.IGetter) -> doGet
com.github.gzuliyujiang.oaid.impl.GmsImpl$1 -> com.github.gzuliyujiang.oaid.impl.GmsImpl$1:
# {"fileName":"GmsImpl.java","id":"sourceFile"}
    com.github.gzuliyujiang.oaid.impl.GmsImpl this$0 -> this$0
    67:67:void <init>(com.github.gzuliyujiang.oaid.impl.GmsImpl) -> <init>
    70:75:java.lang.String callRemoteInterface(android.os.IBinder) -> callRemoteInterface
com.github.gzuliyujiang.oaid.impl.HuaweiImpl -> com.github.gzuliyujiang.oaid.impl.HuaweiImpl:
# {"fileName":"HuaweiImpl.java","id":"sourceFile"}
    android.content.Context context -> context
    java.lang.String packageName -> packageName
    45:47:void <init>(android.content.Context) -> <init>
    51:70:boolean supported() -> supported
    75:107:void doGet(com.github.gzuliyujiang.oaid.IGetter) -> doGet
com.github.gzuliyujiang.oaid.impl.HuaweiImpl$1 -> com.github.gzuliyujiang.oaid.impl.HuaweiImpl$1:
# {"fileName":"HuaweiImpl.java","id":"sourceFile"}
    com.github.gzuliyujiang.oaid.impl.HuaweiImpl this$0 -> this$0
    96:96:void <init>(com.github.gzuliyujiang.oaid.impl.HuaweiImpl) -> <init>
    99:104:java.lang.String callRemoteInterface(android.os.IBinder) -> callRemoteInterface
com.github.gzuliyujiang.oaid.impl.LenovoImpl -> com.github.gzuliyujiang.oaid.impl.LenovoImpl:
# {"fileName":"LenovoImpl.java","id":"sourceFile"}
    android.content.Context context -> context
    37:39:void <init>(android.content.Context) -> <init>
    43:51:boolean supported() -> supported
    57:75:void doGet(com.github.gzuliyujiang.oaid.IGetter) -> doGet
com.github.gzuliyujiang.oaid.impl.LenovoImpl$1 -> com.github.gzuliyujiang.oaid.impl.LenovoImpl$1:
# {"fileName":"LenovoImpl.java","id":"sourceFile"}
    com.github.gzuliyujiang.oaid.impl.LenovoImpl this$0 -> this$0
    62:62:void <init>(com.github.gzuliyujiang.oaid.impl.LenovoImpl) -> <init>
    65:72:java.lang.String callRemoteInterface(android.os.IBinder) -> callRemoteInterface
com.github.gzuliyujiang.oaid.impl.MeizuImpl -> com.github.gzuliyujiang.oaid.impl.MeizuImpl:
# {"fileName":"MeizuImpl.java","id":"sourceFile"}
    android.content.Context context -> context
    34:36:void <init>(android.content.Context) -> <init>
    40:48:boolean supported() -> supported
    54:71:void doGet(com.github.gzuliyujiang.oaid.IGetter) -> doGet
com.github.gzuliyujiang.oaid.impl.MsaImpl -> com.github.gzuliyujiang.oaid.impl.MsaImpl:
# {"fileName":"MsaImpl.java","id":"sourceFile"}
    android.content.Context context -> context
    36:38:void <init>(android.content.Context) -> <init>
    42:50:boolean supported() -> supported
    56:76:void doGet(com.github.gzuliyujiang.oaid.IGetter) -> doGet
    80:91:void startMsaKlService() -> startMsaKlService
com.github.gzuliyujiang.oaid.impl.MsaImpl$1 -> com.github.gzuliyujiang.oaid.impl.MsaImpl$1:
# {"fileName":"MsaImpl.java","id":"sourceFile"}
    com.github.gzuliyujiang.oaid.impl.MsaImpl this$0 -> this$0
    63:63:void <init>(com.github.gzuliyujiang.oaid.impl.MsaImpl) -> <init>
    66:73:java.lang.String callRemoteInterface(android.os.IBinder) -> callRemoteInterface
com.github.gzuliyujiang.oaid.impl.NubiaImpl -> com.github.gzuliyujiang.oaid.impl.NubiaImpl:
# {"fileName":"NubiaImpl.java","id":"sourceFile"}
    android.content.Context context -> context
    34:36:void <init>(android.content.Context) -> <init>
    41:41:boolean supported() -> supported
    46:83:void doGet(com.github.gzuliyujiang.oaid.IGetter) -> doGet
com.github.gzuliyujiang.oaid.impl.OAIDFactory -> com.github.gzuliyujiang.oaid.impl.OAIDFactory:
# {"fileName":"OAIDFactory.java","id":"sourceFile"}
    com.github.gzuliyujiang.oaid.IOAID ioaid -> ioaid
    31:32:void <init>() -> <init>
    35:50:com.github.gzuliyujiang.oaid.IOAID create(android.content.Context) -> create
    54:90:com.github.gzuliyujiang.oaid.IOAID createManufacturerImpl(android.content.Context) -> createManufacturerImpl
    95:109:com.github.gzuliyujiang.oaid.IOAID createUniversalImpl(android.content.Context) -> createUniversalImpl
com.github.gzuliyujiang.oaid.impl.OAIDService -> com.github.gzuliyujiang.oaid.impl.OAIDService:
# {"fileName":"OAIDService.java","id":"sourceFile"}
    android.content.Context context -> context
    com.github.gzuliyujiang.oaid.IGetter getter -> getter
    com.github.gzuliyujiang.oaid.impl.OAIDService$RemoteCaller caller -> caller
    40:41:void bind(android.content.Context,android.content.Intent,com.github.gzuliyujiang.oaid.IGetter,com.github.gzuliyujiang.oaid.impl.OAIDService$RemoteCaller) -> bind
    43:51:void <init>(android.content.Context,com.github.gzuliyujiang.oaid.IGetter,com.github.gzuliyujiang.oaid.impl.OAIDService$RemoteCaller) -> <init>
    55:63:void bind(android.content.Intent) -> bind
    67:86:void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    90:91:void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.github.gzuliyujiang.oaid.impl.OAIDService$RemoteCaller -> com.github.gzuliyujiang.oaid.impl.OAIDService$RemoteCaller:
# {"fileName":"OAIDService.java","id":"sourceFile"}
    java.lang.String callRemoteInterface(android.os.IBinder) -> callRemoteInterface
com.github.gzuliyujiang.oaid.impl.OppoImpl -> com.github.gzuliyujiang.oaid.impl.OppoImpl:
# {"fileName":"OppoImpl.java","id":"sourceFile"}
    android.content.Context context -> context
    java.lang.String sign -> sign
    46:52:void <init>(android.content.Context) -> <init>
    56:64:boolean supported() -> supported
    70:87:void doGet(com.github.gzuliyujiang.oaid.IGetter) -> doGet
    92:106:java.lang.String realGetOUID(android.os.IBinder) -> realGetOUID
    110:114:java.lang.String getSerId(android.os.IBinder,java.lang.String,java.lang.String) -> getSerId
    42:42:java.lang.String access$000(com.github.gzuliyujiang.oaid.impl.OppoImpl,android.os.IBinder) -> access$000
com.github.gzuliyujiang.oaid.impl.OppoImpl$1 -> com.github.gzuliyujiang.oaid.impl.OppoImpl$1:
# {"fileName":"OppoImpl.java","id":"sourceFile"}
    com.github.gzuliyujiang.oaid.impl.OppoImpl this$0 -> this$0
    75:75:void <init>(com.github.gzuliyujiang.oaid.impl.OppoImpl) -> <init>
    79:83:java.lang.String callRemoteInterface(android.os.IBinder) -> callRemoteInterface
com.github.gzuliyujiang.oaid.impl.SamsungImpl -> com.github.gzuliyujiang.oaid.impl.SamsungImpl:
# {"fileName":"SamsungImpl.java","id":"sourceFile"}
    android.content.Context context -> context
    35:37:void <init>(android.content.Context) -> <init>
    41:49:boolean supported() -> supported
    55:70:void doGet(com.github.gzuliyujiang.oaid.IGetter) -> doGet
com.github.gzuliyujiang.oaid.impl.SamsungImpl$1 -> com.github.gzuliyujiang.oaid.impl.SamsungImpl$1:
# {"fileName":"SamsungImpl.java","id":"sourceFile"}
    com.github.gzuliyujiang.oaid.impl.SamsungImpl this$0 -> this$0
    60:60:void <init>(com.github.gzuliyujiang.oaid.impl.SamsungImpl) -> <init>
    63:67:java.lang.String callRemoteInterface(android.os.IBinder) -> callRemoteInterface
com.github.gzuliyujiang.oaid.impl.VivoImpl -> com.github.gzuliyujiang.oaid.impl.VivoImpl:
# {"fileName":"VivoImpl.java","id":"sourceFile"}
    android.content.Context context -> context
    38:40:void <init>(android.content.Context) -> <init>
    44:47:boolean supported() -> supported
    52:69:void doGet(com.github.gzuliyujiang.oaid.IGetter) -> doGet
com.github.gzuliyujiang.oaid.impl.XiaomiImpl -> com.github.gzuliyujiang.oaid.impl.XiaomiImpl:
# {"fileName":"XiaomiImpl.java","id":"sourceFile"}
    android.content.Context context -> context
    java.lang.Class idProviderClass -> idProviderClass
    java.lang.Object idProviderImpl -> idProviderImpl
    39:47:void <init>(android.content.Context) -> <init>
    51:51:boolean supported() -> supported
    56:74:void doGet(com.github.gzuliyujiang.oaid.IGetter) -> doGet
    77:78:java.lang.String getOAID() -> getOAID
com.hwj.sdk.BuildConfig -> com.hwj.sdk.BuildConfig:
# {"fileName":"BuildConfig.java","id":"sourceFile"}
    boolean DEBUG -> a
    java.lang.String LIBRARY_PACKAGE_NAME -> b
    java.lang.String BUILD_TYPE -> c
    6:6:void <init>() -> <init>
com.hwj.sdk.DeviceIdUtil -> com.hwj.sdk.DeviceIdUtil:
# {"fileName":"DeviceIdUtil.java","id":"sourceFile"}
    12:12:void <init>() -> <init>
    15:31:java.lang.String getUniqueId(android.content.Context) -> a
    35:38:boolean checkId(java.lang.String) -> a
    42:51:java.lang.String getPlatForm() -> a
    57:61:boolean isHarmonyOs() -> b
    66:66:java.lang.String getImei(android.content.Context) -> b
    70:70:java.lang.String getAndroidId(android.content.Context) -> c
    74:74:java.lang.String getWidevineId(android.content.Context) -> d
    78:78:java.lang.String getPseudoId() -> c
    82:82:java.lang.String getGUID(android.content.Context) -> e
    86:86:java.lang.String getOAID(android.content.Context) -> f
com.hwj.sdk.MMKVUtil -> com.hwj.sdk.MMKVUtil:
# {"fileName":"MMKVUtil.java","id":"sourceFile"}
    java.lang.String savePath -> b
    com.tencent.mmkv.MMKV kv -> a
    38:41:void <init>(com.hwj.sdk.MMKVUtil$Builder) -> <init>
    60:63:com.tencent.mmkv.MMKV getKv() -> b
    67:74:void init(java.lang.String) -> a
    78:78:boolean hasKey(java.lang.String) -> b
    83:84:void remove(java.lang.String) -> c
    87:88:void clear() -> a
    91:91:boolean addStr(java.lang.String,java.lang.String) -> a
    95:95:boolean addBool(java.lang.String,boolean) -> a
    99:99:boolean addInteger(java.lang.String,int) -> a
    103:103:boolean addDouble(java.lang.String,double) -> a
    107:107:boolean addLong(java.lang.String,long) -> a
    111:111:boolean addFloat(java.lang.String,float) -> a
    116:116:java.lang.String getStr(java.lang.String) -> d
    120:120:java.lang.String getStr(java.lang.String,java.lang.String) -> b
    124:124:boolean getBool(java.lang.String) -> e
    128:128:boolean getBool(java.lang.String,boolean) -> b
    132:132:int getInteger(java.lang.String) -> f
    136:136:int getInteger(java.lang.String,int) -> b
    140:140:double getDouble(java.lang.String) -> g
    144:144:double getDouble(java.lang.String,double) -> b
    148:148:float getFloat(java.lang.String,float) -> b
    152:152:long getLong(java.lang.String) -> h
    156:156:long getLong(java.lang.String,long) -> b
    14:14:void <init>(com.hwj.sdk.MMKVUtil$Builder,com.hwj.sdk.MMKVUtil$1) -> <init>
    57:57:void <clinit>() -> <clinit>
com.hwj.sdk.MMKVUtil$1 -> com.hwj.sdk.MMKVUtil$1:
# {"fileName":"MMKVUtil.java","id":"sourceFile"}
com.hwj.sdk.MMKVUtil$Builder -> com.hwj.sdk.MMKVUtil$Builder:
# {"fileName":"MMKVUtil.java","id":"sourceFile"}
    java.lang.String savePath -> a
    25:26:void <init>() -> <init>
    29:30:com.hwj.sdk.MMKVUtil$Builder setSavePath(java.lang.String) -> a
    34:34:com.hwj.sdk.MMKVUtil build() -> a
    22:22:java.lang.String access$100(com.hwj.sdk.MMKVUtil$Builder) -> a
com.hwj.sdk.NpHttpUtil -> com.hwj.sdk.NpHttpUtil:
# {"fileName":"NpHttpUtil.java","id":"sourceFile"}
    int READ_TIMEOUT -> READ_TIMEOUT
    int CONNECT_TIMEOUT -> CONNECT_TIMEOUT
    int WRITE_TIMEOUT -> WRITE_TIMEOUT
    byte[] LOCKER -> LOCKER
    com.hwj.sdk.NpHttpUtil mInstance -> mInstance
    okhttp3.OkHttpClient mOkHttpClient -> mOkHttpClient
    49:56:com.hwj.sdk.NpHttpUtil getInstance() -> getInstance
    61:76:void getAsync(java.lang.String,com.hwj.sdk.NpHttpUtil$NetCall) -> getAsync
    80:96:void postAsync(java.lang.String,java.util.Map,com.hwj.sdk.NpHttpUtil$NetCall) -> postAsync
    103:119:void postJsonAsync(java.lang.String,java.lang.String,com.hwj.sdk.NpHttpUtil$NetCall) -> postJsonAsync
    128:140:okhttp3.RequestBody setRequestBody(java.util.Map) -> setRequestBody
    144:157:void <init>() -> <init>
    163:170:javax.net.ssl.SSLSocketFactory createSSLSocketFactory() -> createSSLSocketFactory
    35:35:void <clinit>() -> <clinit>
com.hwj.sdk.NpHttpUtil$1 -> com.hwj.sdk.NpHttpUtil$1:
# {"fileName":"NpHttpUtil.java","id":"sourceFile"}
    com.hwj.sdk.NpHttpUtil$NetCall val$netCall -> a
    com.hwj.sdk.NpHttpUtil this$0 -> b
    64:64:void <init>(com.hwj.sdk.NpHttpUtil,com.hwj.sdk.NpHttpUtil$NetCall) -> <init>
    67:69:void onFailure(okhttp3.Call,java.io.IOException) -> onFailure
    73:74:void onResponse(okhttp3.Call,okhttp3.Response) -> onResponse
com.hwj.sdk.NpHttpUtil$2 -> com.hwj.sdk.NpHttpUtil$2:
# {"fileName":"NpHttpUtil.java","id":"sourceFile"}
    com.hwj.sdk.NpHttpUtil$NetCall val$netCall -> a
    com.hwj.sdk.NpHttpUtil this$0 -> b
    84:84:void <init>(com.hwj.sdk.NpHttpUtil,com.hwj.sdk.NpHttpUtil$NetCall) -> <init>
    87:89:void onFailure(okhttp3.Call,java.io.IOException) -> onFailure
    93:94:void onResponse(okhttp3.Call,okhttp3.Response) -> onResponse
com.hwj.sdk.NpHttpUtil$3 -> com.hwj.sdk.NpHttpUtil$3:
# {"fileName":"NpHttpUtil.java","id":"sourceFile"}
    com.hwj.sdk.NpHttpUtil$NetCall val$netCall -> a
    com.hwj.sdk.NpHttpUtil this$0 -> b
    108:108:void <init>(com.hwj.sdk.NpHttpUtil,com.hwj.sdk.NpHttpUtil$NetCall) -> <init>
    111:112:void onFailure(okhttp3.Call,java.io.IOException) -> onFailure
    116:117:void onResponse(okhttp3.Call,okhttp3.Response) -> onResponse
com.hwj.sdk.NpHttpUtil$4 -> com.hwj.sdk.NpHttpUtil$4:
# {"fileName":"NpHttpUtil.java","id":"sourceFile"}
    com.hwj.sdk.NpHttpUtil this$0 -> a
    150:150:void <init>(com.hwj.sdk.NpHttpUtil) -> <init>
    153:153:boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> a
com.hwj.sdk.NpHttpUtil$NetCall -> com.hwj.sdk.NpHttpUtil$NetCall:
# {"fileName":"NpHttpUtil.java","id":"sourceFile"}
    void success(okhttp3.Call,okhttp3.Response) -> a
    void failed(okhttp3.Call,java.io.IOException) -> a
com.hwj.sdk.R -> com.hwj.sdk.R:
    void <init>() -> <init>
com.hwj.sdk.SdkLibUtil -> com.hwj.sdk.SdkLibUtil:
# {"fileName":"SdkLibUtil.java","id":"sourceFile"}
    android.app.Application mApplication -> a
    java.lang.String mAppId -> b
    java.lang.String mUniqueId -> c
    java.lang.String TAG -> d
    11:11:void <init>() -> <init>
    18:19:void init(android.app.Application,java.lang.String) -> init
    22:33:void init(android.app.Application,java.lang.String,java.lang.String) -> init
    36:38:java.lang.String testFun() -> testFun
    43:43:void nilFun() -> a
    47:47:void testSdk() -> b
    50:50:android.content.Context getSdkContext() -> c
    15:15:void <clinit>() -> <clinit>
com.hwj.sdk.TrustAllCerts -> com.hwj.sdk.TrustAllCerts:
# {"fileName":"TrustAllCerts.java","id":"sourceFile"}
    12:12:void <init>() -> <init>
    15:15:void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    20:20:void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    24:24:java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
com.tencent.mmkv.BuildConfig -> com.tencent.mmkv.BuildConfig:
# {"fileName":"BuildConfig.java","id":"sourceFile"}
    boolean DEBUG -> DEBUG
    java.lang.String APPLICATION_ID -> APPLICATION_ID
    java.lang.String BUILD_TYPE -> BUILD_TYPE
    java.lang.String FLAVOR -> FLAVOR
    int VERSION_CODE -> VERSION_CODE
    java.lang.String VERSION_NAME -> VERSION_NAME
    6:6:void <init>() -> <init>
com.tencent.mmkv.MMKV -> com.tencent.mmkv.MMKV:
# {"fileName":"MMKV.java","id":"sourceFile"}
    java.util.EnumMap recoverIndex -> recoverIndex
    java.util.EnumMap logLevel2Index -> logLevel2Index
    com.tencent.mmkv.MMKVLogLevel[] index2LogLevel -> index2LogLevel
    java.lang.String rootDir -> rootDir
    int SINGLE_PROCESS_MODE -> SINGLE_PROCESS_MODE
    int MULTI_PROCESS_MODE -> MULTI_PROCESS_MODE
    int CONTEXT_MODE_MULTI_PROCESS -> CONTEXT_MODE_MULTI_PROCESS
    int ASHMEM_MODE -> ASHMEM_MODE
    java.util.HashMap mCreators -> mCreators
    com.tencent.mmkv.MMKVHandler gCallbackHandler -> gCallbackHandler
    boolean gWantLogReDirecting -> gWantLogReDirecting
    long nativeHandle -> nativeHandle
    67:68:java.lang.String initialize(android.content.Context) -> initialize
    72:72:java.lang.String initialize(java.lang.String) -> initialize
    76:89:java.lang.String initialize(java.lang.String,com.tencent.mmkv.MMKV$LibLoader) -> initialize
    94:94:java.lang.String getRootDir() -> getRootDir
    99:120:void setLogLevel(com.tencent.mmkv.MMKVLogLevel) -> setLogLevel
    void onExit() -> onExit
    135:140:com.tencent.mmkv.MMKV mmkvWithID(java.lang.String) -> mmkvWithID
    144:149:com.tencent.mmkv.MMKV mmkvWithID(java.lang.String,int) -> mmkvWithID
    154:159:com.tencent.mmkv.MMKV mmkvWithID(java.lang.String,int,java.lang.String) -> mmkvWithID
    164:172:com.tencent.mmkv.MMKV mmkvWithID(java.lang.String,java.lang.String) -> mmkvWithID
    178:186:com.tencent.mmkv.MMKV mmkvWithID(java.lang.String,int,java.lang.String,java.lang.String) -> mmkvWithID
    194:240:com.tencent.mmkv.MMKV mmkvWithAshmemID(android.content.Context,java.lang.String,int,int,java.lang.String) -> mmkvWithAshmemID
    244:249:com.tencent.mmkv.MMKV defaultMMKV() -> defaultMMKV
    253:258:com.tencent.mmkv.MMKV defaultMMKV(int,java.lang.String) -> defaultMMKV
    java.lang.String cryptKey() -> cryptKey
    boolean reKey(java.lang.String) -> reKey
    void checkReSetCryptKey(java.lang.String) -> checkReSetCryptKey
    int pageSize() -> pageSize
    java.lang.String mmapID() -> mmapID
    void lock() -> lock
    void unlock() -> unlock
    boolean tryLock() -> tryLock
    285:285:boolean encode(java.lang.String,boolean) -> encode
    289:289:boolean decodeBool(java.lang.String) -> decodeBool
    293:293:boolean decodeBool(java.lang.String,boolean) -> decodeBool
    297:297:boolean encode(java.lang.String,int) -> encode
    301:301:int decodeInt(java.lang.String) -> decodeInt
    305:305:int decodeInt(java.lang.String,int) -> decodeInt
    309:309:boolean encode(java.lang.String,long) -> encode
    313:313:long decodeLong(java.lang.String) -> decodeLong
    317:317:long decodeLong(java.lang.String,long) -> decodeLong
    321:321:boolean encode(java.lang.String,float) -> encode
    325:325:float decodeFloat(java.lang.String) -> decodeFloat
    329:329:float decodeFloat(java.lang.String,float) -> decodeFloat
    333:333:boolean encode(java.lang.String,double) -> encode
    337:337:double decodeDouble(java.lang.String) -> decodeDouble
    341:341:double decodeDouble(java.lang.String,double) -> decodeDouble
    345:345:boolean encode(java.lang.String,java.lang.String) -> encode
    349:349:java.lang.String decodeString(java.lang.String) -> decodeString
    353:353:java.lang.String decodeString(java.lang.String,java.lang.String) -> decodeString
    357:357:boolean encode(java.lang.String,java.util.Set) -> encode
    361:361:java.util.Set decodeStringSet(java.lang.String) -> decodeStringSet
    365:369:java.util.Set decodeStringSet(java.lang.String,java.util.Set) -> decodeStringSet
    373:373:boolean encode(java.lang.String,byte[]) -> encode
    377:377:byte[] decodeBytes(java.lang.String) -> decodeBytes
    383:388:boolean encode(java.lang.String,android.os.Parcelable) -> encode
    393:393:android.os.Parcelable decodeParcelable(java.lang.String,java.lang.Class) -> decodeParcelable
    398:436:android.os.Parcelable decodeParcelable(java.lang.String,java.lang.Class,android.os.Parcelable) -> decodeParcelable
    442:442:int getValueSize(java.lang.String) -> getValueSize
    448:448:int getValueActualSize(java.lang.String) -> getValueActualSize
    452:452:boolean containsKey(java.lang.String) -> containsKey
    java.lang.String[] allKeys() -> allKeys
    458:458:long count() -> count
    463:463:long totalSize() -> totalSize
    467:468:void removeValueForKey(java.lang.String) -> removeValueForKey
    void removeValuesForKeys(java.lang.String[]) -> removeValuesForKeys
    void clearAll() -> clearAll
    void trim() -> trim
    void close() -> close
    void clearMemoryCache() -> clearMemoryCache
    490:491:void sync() -> sync
    494:495:void async() -> async
    void sync(boolean) -> sync
    boolean isFileValid(java.lang.String) -> isFileValid
    504:534:int importFromSharedPreferences(android.content.SharedPreferences) -> importFromSharedPreferences
    539:539:java.util.Map getAll() -> getAll
    546:546:java.lang.String getString(java.lang.String,java.lang.String) -> getString
    551:552:android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String) -> putString
    558:558:java.util.Set getStringSet(java.lang.String,java.util.Set) -> getStringSet
    563:564:android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set) -> putStringSet
    569:569:int getInt(java.lang.String,int) -> getInt
    574:575:android.content.SharedPreferences$Editor putInt(java.lang.String,int) -> putInt
    580:580:long getLong(java.lang.String,long) -> getLong
    585:586:android.content.SharedPreferences$Editor putLong(java.lang.String,long) -> putLong
    591:591:float getFloat(java.lang.String,float) -> getFloat
    596:597:android.content.SharedPreferences$Editor putFloat(java.lang.String,float) -> putFloat
    602:602:boolean getBoolean(java.lang.String,boolean) -> getBoolean
    607:608:android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean) -> putBoolean
    613:614:android.content.SharedPreferences$Editor remove(java.lang.String) -> remove
    619:620:android.content.SharedPreferences$Editor clear() -> clear
    625:626:boolean commit() -> commit
    631:632:void apply() -> apply
    636:636:boolean contains(java.lang.String) -> contains
    641:641:android.content.SharedPreferences$Editor edit() -> edit
    647:647:void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener) -> registerOnSharedPreferenceChangeListener
    653:653:void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener) -> unregisterOnSharedPreferenceChangeListener
    658:659:com.tencent.mmkv.MMKV mmkvWithAshmemFD(java.lang.String,int,int,java.lang.String) -> mmkvWithAshmemFD
    int ashmemFD() -> ashmemFD
    int ashmemMetaFD() -> ashmemMetaFD
    668:672:com.tencent.mmkv.NativeBuffer createNativeBuffer(int) -> createNativeBuffer
    676:677:void destroyNativeBuffer(com.tencent.mmkv.NativeBuffer) -> destroyNativeBuffer
    681:681:int writeValueToNativeBuffer(java.lang.String,com.tencent.mmkv.NativeBuffer) -> writeValueToNativeBuffer
    688:697:void registerHandler(com.tencent.mmkv.MMKVHandler) -> registerHandler
    700:704:void unregisterHandler() -> unregisterHandler
    707:712:int onMMKVCRCCheckFail(java.lang.String) -> onMMKVCRCCheckFail
    716:721:int onMMKVFileLengthError(java.lang.String) -> onMMKVFileLengthError
    726:746:void mmkvLogImp(int,java.lang.String,int,java.lang.String,java.lang.String) -> mmkvLogImp
    749:753:void simpleLog(com.tencent.mmkv.MMKVLogLevel,java.lang.String) -> simpleLog
    758:760:void <init>(long) -> <init>
    void jniInitialize(java.lang.String) -> jniInitialize
    long getMMKVWithID(java.lang.String,int,java.lang.String,java.lang.String) -> getMMKVWithID
    long getMMKVWithIDAndSize(java.lang.String,int,int,java.lang.String) -> getMMKVWithIDAndSize
    long getDefaultMMKV(int,java.lang.String) -> getDefaultMMKV
    long getMMKVWithAshmemFD(java.lang.String,int,int,java.lang.String) -> getMMKVWithAshmemFD
    boolean encodeBool(long,java.lang.String,boolean) -> encodeBool
    boolean decodeBool(long,java.lang.String,boolean) -> decodeBool
    boolean encodeInt(long,java.lang.String,int) -> encodeInt
    int decodeInt(long,java.lang.String,int) -> decodeInt
    boolean encodeLong(long,java.lang.String,long) -> encodeLong
    long decodeLong(long,java.lang.String,long) -> decodeLong
    boolean encodeFloat(long,java.lang.String,float) -> encodeFloat
    float decodeFloat(long,java.lang.String,float) -> decodeFloat
    boolean encodeDouble(long,java.lang.String,double) -> encodeDouble
    double decodeDouble(long,java.lang.String,double) -> decodeDouble
    boolean encodeString(long,java.lang.String,java.lang.String) -> encodeString
    java.lang.String decodeString(long,java.lang.String,java.lang.String) -> decodeString
    boolean encodeSet(long,java.lang.String,java.lang.String[]) -> encodeSet
    java.lang.String[] decodeStringSet(long,java.lang.String) -> decodeStringSet
    boolean encodeBytes(long,java.lang.String,byte[]) -> encodeBytes
    byte[] decodeBytes(long,java.lang.String) -> decodeBytes
    boolean containsKey(long,java.lang.String) -> containsKey
    long count(long) -> count
    long totalSize(long) -> totalSize
    void removeValueForKey(long,java.lang.String) -> removeValueForKey
    int valueSize(long,java.lang.String,boolean) -> valueSize
    void setLogLevel(int) -> setLogLevel
    void setLogReDirecting(boolean) -> setLogReDirecting
    long createNB(int) -> createNB
    void destroyNB(long,int) -> destroyNB
    int writeValueToNB(long,java.lang.String,long,int) -> writeValueToNB
    47:686:void <clinit>() -> <clinit>
com.tencent.mmkv.MMKV$1 -> com.tencent.mmkv.MMKV$1:
# {"fileName":"MMKV.java","id":"sourceFile"}
    int[] $SwitchMap$com$tencent$mmkv$MMKVLogLevel -> $SwitchMap$com$tencent$mmkv$MMKVLogLevel
    99:99:void <clinit>() -> <clinit>
com.tencent.mmkv.MMKV$LibLoader -> com.tencent.mmkv.MMKV$LibLoader:
# {"fileName":"MMKV.java","id":"sourceFile"}
    void loadLibrary(java.lang.String) -> loadLibrary
com.tencent.mmkv.MMKVContentProvider -> com.tencent.mmkv.MMKVContentProvider:
# {"fileName":"MMKVContentProvider.java","id":"sourceFile"}
    java.lang.String KEY -> KEY
    java.lang.String KEY_SIZE -> KEY_SIZE
    java.lang.String KEY_MODE -> KEY_MODE
    java.lang.String KEY_CRYPT -> KEY_CRYPT
    java.lang.String FUNCTION_NAME -> FUNCTION_NAME
    android.net.Uri gUri -> gUri
    38:38:void <init>() -> <init>
    49:60:android.net.Uri contentUri(android.content.Context) -> contentUri
    64:73:android.os.Bundle mmkvFromAshmemID(java.lang.String,int,int,java.lang.String) -> mmkvFromAshmemID
    78:90:java.lang.String queryAuthority(android.content.Context) -> queryAuthority
    95:109:boolean onCreate() -> onCreate
    113:125:java.lang.String getProcessNameByPID(android.content.Context,int) -> getProcessNameByPID
    131:139:android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle) -> call
    145:145:java.lang.String getType(android.net.Uri) -> getType
    155:155:android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    163:163:int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    169:169:int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    175:175:android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
com.tencent.mmkv.MMKVHandler -> com.tencent.mmkv.MMKVHandler:
# {"fileName":"MMKVHandler.java","id":"sourceFile"}
    com.tencent.mmkv.MMKVRecoverStrategic onMMKVCRCCheckFail(java.lang.String) -> onMMKVCRCCheckFail
    com.tencent.mmkv.MMKVRecoverStrategic onMMKVFileLengthError(java.lang.String) -> onMMKVFileLengthError
    boolean wantLogRedirecting() -> wantLogRedirecting
    void mmkvLog(com.tencent.mmkv.MMKVLogLevel,java.lang.String,int,java.lang.String,java.lang.String) -> mmkvLog
com.tencent.mmkv.MMKVLogLevel -> com.tencent.mmkv.MMKVLogLevel:
# {"fileName":"MMKVLogLevel.java","id":"sourceFile"}
    com.tencent.mmkv.MMKVLogLevel LevelDebug -> LevelDebug
    com.tencent.mmkv.MMKVLogLevel LevelInfo -> LevelInfo
    com.tencent.mmkv.MMKVLogLevel LevelWarning -> LevelWarning
    com.tencent.mmkv.MMKVLogLevel LevelError -> LevelError
    com.tencent.mmkv.MMKVLogLevel LevelNone -> LevelNone
    com.tencent.mmkv.MMKVLogLevel[] $VALUES -> $VALUES
    3:3:com.tencent.mmkv.MMKVLogLevel[] values() -> values
    3:3:com.tencent.mmkv.MMKVLogLevel valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
com.tencent.mmkv.MMKVRecoverStrategic -> com.tencent.mmkv.MMKVRecoverStrategic:
# {"fileName":"MMKVRecoverStrategic.java","id":"sourceFile"}
    com.tencent.mmkv.MMKVRecoverStrategic OnErrorDiscard -> OnErrorDiscard
    com.tencent.mmkv.MMKVRecoverStrategic OnErrorRecover -> OnErrorRecover
    com.tencent.mmkv.MMKVRecoverStrategic[] $VALUES -> $VALUES
    23:23:com.tencent.mmkv.MMKVRecoverStrategic[] values() -> values
    23:23:com.tencent.mmkv.MMKVRecoverStrategic valueOf(java.lang.String) -> valueOf
    23:23:void <init>(java.lang.String,int) -> <init>
    23:25:void <clinit>() -> <clinit>
com.tencent.mmkv.NativeBuffer -> com.tencent.mmkv.NativeBuffer:
# {"fileName":"NativeBuffer.java","id":"sourceFile"}
    long pointer -> pointer
    int size -> size
    7:10:void <init>(long,int) -> <init>
com.tencent.mmkv.ParcelableMMKV -> com.tencent.mmkv.ParcelableMMKV:
# {"fileName":"ParcelableMMKV.java","id":"sourceFile"}
    java.lang.String mmapID -> mmapID
    int ashmemFD -> ashmemFD
    int ashmemMetaFD -> ashmemMetaFD
    java.lang.String cryptKey -> cryptKey
    android.os.Parcelable$Creator CREATOR -> CREATOR
    31:40:void <init>(com.tencent.mmkv.MMKV) -> <init>
    31:47:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    50:53:com.tencent.mmkv.MMKV toMMKV() -> toMMKV
    58:58:int describeContents() -> describeContents
    64:76:void writeToParcel(android.os.Parcel,int) -> writeToParcel
    29:29:void <init>(java.lang.String,int,int,java.lang.String,com.tencent.mmkv.ParcelableMMKV$1) -> <init>
    78:78:void <clinit>() -> <clinit>
com.tencent.mmkv.ParcelableMMKV$1 -> com.tencent.mmkv.ParcelableMMKV$1:
# {"fileName":"ParcelableMMKV.java","id":"sourceFile"}
    79:79:void <init>() -> <init>
    82:89:com.tencent.mmkv.ParcelableMMKV createFromParcel(android.os.Parcel) -> createFromParcel
    94:94:com.tencent.mmkv.ParcelableMMKV[] newArray(int) -> newArray
    79:79:java.lang.Object[] newArray(int) -> newArray
    79:79:java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
okhttp3.Address -> okhttp3.Address:
# {"fileName":"Address.java","id":"sourceFile"}
    okhttp3.HttpUrl url -> url
    okhttp3.Dns dns -> dns
    javax.net.SocketFactory socketFactory -> socketFactory
    okhttp3.Authenticator proxyAuthenticator -> proxyAuthenticator
    java.util.List protocols -> protocols
    java.util.List connectionSpecs -> connectionSpecs
    java.net.ProxySelector proxySelector -> proxySelector
    java.net.Proxy proxy -> proxy
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> sslSocketFactory
    javax.net.ssl.HostnameVerifier hostnameVerifier -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner -> certificatePinner
    53:84:void <init>(java.lang.String,int,okhttp3.Dns,javax.net.SocketFactory,javax.net.ssl.SSLSocketFactory,javax.net.ssl.HostnameVerifier,okhttp3.CertificatePinner,okhttp3.Authenticator,java.net.Proxy,java.util.List,java.util.List,java.net.ProxySelector) -> <init>
    91:91:okhttp3.HttpUrl url() -> url
    96:96:okhttp3.Dns dns() -> dns
    101:101:javax.net.SocketFactory socketFactory() -> socketFactory
    106:106:okhttp3.Authenticator proxyAuthenticator() -> proxyAuthenticator
    114:114:java.util.List protocols() -> protocols
    118:118:java.util.List connectionSpecs() -> connectionSpecs
    126:126:java.net.ProxySelector proxySelector() -> proxySelector
    134:134:java.net.Proxy proxy() -> proxy
    139:139:javax.net.ssl.SSLSocketFactory sslSocketFactory() -> sslSocketFactory
    144:144:javax.net.ssl.HostnameVerifier hostnameVerifier() -> hostnameVerifier
    149:149:okhttp3.CertificatePinner certificatePinner() -> certificatePinner
    153:166:boolean equals(java.lang.Object) -> equals
    170:181:int hashCode() -> hashCode
    185:196:java.lang.String toString() -> toString
okhttp3.Authenticator -> okhttp3.Authenticator:
# {"fileName":"Authenticator.java","id":"sourceFile"}
    okhttp3.Authenticator NONE -> NONE
    okhttp3.Request authenticate(okhttp3.Route,okhttp3.Response) -> authenticate
    63:63:void <clinit>() -> <clinit>
okhttp3.Authenticator$1 -> okhttp3.Authenticator$1:
# {"fileName":"Authenticator.java","id":"sourceFile"}
    63:63:void <init>() -> <init>
    65:65:okhttp3.Request authenticate(okhttp3.Route,okhttp3.Response) -> authenticate
okhttp3.Cache -> okhttp3.Cache:
# {"fileName":"Cache.java","id":"sourceFile"}
    int VERSION -> VERSION
    int ENTRY_METADATA -> ENTRY_METADATA
    int ENTRY_BODY -> ENTRY_BODY
    int ENTRY_COUNT -> ENTRY_COUNT
    okhttp3.internal.cache.InternalCache internalCache -> internalCache
    okhttp3.internal.cache.DiskLruCache cache -> cache
    int writeSuccessCount -> writeSuccessCount
    int writeAbortCount -> writeAbortCount
    int networkCount -> networkCount
    int hitCount -> hitCount
    int requestCount -> requestCount
    178:179:void <init>(java.io.File,long) -> <init>
    142:183:void <init>(java.io.File,long,okhttp3.internal.io.FileSystem) -> <init>
    186:186:java.lang.String key(okhttp3.HttpUrl) -> key
    190:217:okhttp3.Response get(okhttp3.Request) -> get
    221:253:okhttp3.internal.cache.CacheRequest put(okhttp3.Response) -> put
    258:259:void remove(okhttp3.Request) -> remove
    262:274:void update(okhttp3.Response,okhttp3.Response) -> update
    279:284:void abortQuietly(okhttp3.internal.cache.DiskLruCache$Editor) -> abortQuietly
    298:299:void initialize() -> initialize
    306:307:void delete() -> delete
    314:315:void evictAll() -> evictAll
    327:327:java.util.Iterator urls() -> urls
    370:370:int writeAbortCount() -> writeAbortCount
    374:374:int writeSuccessCount() -> writeSuccessCount
    378:378:long size() -> size
    382:382:long maxSize() -> maxSize
    386:387:void flush() -> flush
    390:391:void close() -> close
    394:394:java.io.File directory() -> directory
    398:398:boolean isClosed() -> isClosed
    402:411:void trackResponse(okhttp3.internal.cache.CacheStrategy) -> trackResponse
    414:415:void trackConditionalCacheHit() -> trackConditionalCacheHit
    418:418:int networkCount() -> networkCount
    422:422:int hitCount() -> hitCount
    426:426:int requestCount() -> requestCount
    725:732:int readInt(okio.BufferedSource) -> readInt
okhttp3.Cache$1 -> okhttp3.Cache$1:
# {"fileName":"Cache.java","id":"sourceFile"}
    okhttp3.Cache this$0 -> this$0
    142:142:void <init>(okhttp3.Cache) -> <init>
    144:144:okhttp3.Response get(okhttp3.Request) -> get
    148:148:okhttp3.internal.cache.CacheRequest put(okhttp3.Response) -> put
    152:153:void remove(okhttp3.Request) -> remove
    156:157:void update(okhttp3.Response,okhttp3.Response) -> update
    160:161:void trackConditionalCacheHit() -> trackConditionalCacheHit
    164:165:void trackResponse(okhttp3.internal.cache.CacheStrategy) -> trackResponse
okhttp3.Cache$2 -> okhttp3.Cache$2:
# {"fileName":"Cache.java","id":"sourceFile"}
    java.util.Iterator delegate -> delegate
    java.lang.String nextUrl -> nextUrl
    boolean canRemove -> canRemove
    okhttp3.Cache this$0 -> this$0
    327:328:void <init>(okhttp3.Cache) -> <init>
    334:351:boolean hasNext() -> hasNext
    355:359:java.lang.String next() -> next
    363:365:void remove() -> remove
    327:327:java.lang.Object next() -> next
okhttp3.Cache$CacheRequestImpl -> okhttp3.Cache$CacheRequestImpl:
# {"fileName":"Cache.java","id":"sourceFile"}
    okhttp3.internal.cache.DiskLruCache$Editor editor -> editor
    okio.Sink cacheOut -> cacheOut
    okio.Sink body -> body
    boolean done -> done
    okhttp3.Cache this$0 -> this$0
    435:451:void <init>(okhttp3.Cache,okhttp3.internal.cache.DiskLruCache$Editor) -> <init>
    454:466:void abort() -> abort
    469:469:okio.Sink body() -> body
okhttp3.Cache$CacheRequestImpl$1 -> okhttp3.Cache$CacheRequestImpl$1:
# {"fileName":"Cache.java","id":"sourceFile"}
    okhttp3.Cache val$this$0 -> val$this$0
    okhttp3.internal.cache.DiskLruCache$Editor val$editor -> val$editor
    okhttp3.Cache$CacheRequestImpl this$1 -> this$1
    438:438:void <init>(okhttp3.Cache$CacheRequestImpl,okio.Sink,okhttp3.Cache,okhttp3.internal.cache.DiskLruCache$Editor) -> <init>
    440:449:void close() -> close
okhttp3.Cache$CacheResponseBody -> okhttp3.Cache$CacheResponseBody:
# {"fileName":"Cache.java","id":"sourceFile"}
    okhttp3.internal.cache.DiskLruCache$Snapshot snapshot -> snapshot
    okio.BufferedSource bodySource -> bodySource
    java.lang.String contentType -> contentType
    java.lang.String contentLength -> contentLength
    743:755:void <init>(okhttp3.internal.cache.DiskLruCache$Snapshot,java.lang.String,java.lang.String) -> <init>
    758:758:okhttp3.MediaType contentType() -> contentType
    763:765:long contentLength() -> contentLength
    770:770:okio.BufferedSource source() -> source
okhttp3.Cache$CacheResponseBody$1 -> okhttp3.Cache$CacheResponseBody$1:
# {"fileName":"Cache.java","id":"sourceFile"}
    okhttp3.internal.cache.DiskLruCache$Snapshot val$snapshot -> val$snapshot
    okhttp3.Cache$CacheResponseBody this$0 -> this$0
    749:749:void <init>(okhttp3.Cache$CacheResponseBody,okio.Source,okhttp3.internal.cache.DiskLruCache$Snapshot) -> <init>
    751:753:void close() -> close
okhttp3.Cache$Entry -> okhttp3.Cache$Entry:
# {"fileName":"Cache.java","id":"sourceFile"}
    java.lang.String SENT_MILLIS -> SENT_MILLIS
    java.lang.String RECEIVED_MILLIS -> RECEIVED_MILLIS
    java.lang.String url -> url
    okhttp3.Headers varyHeaders -> varyHeaders
    java.lang.String requestMethod -> requestMethod
    okhttp3.Protocol protocol -> protocol
    int code -> code
    java.lang.String message -> message
    okhttp3.Headers responseHeaders -> responseHeaders
    okhttp3.Handshake handshake -> handshake
    long sentRequestMillis -> sentRequestMillis
    long receivedResponseMillis -> receivedResponseMillis
    539:591:void <init>(okio.Source) -> <init>
    593:604:void <init>(okhttp3.Response) -> <init>
    607:654:void writeTo(okhttp3.internal.cache.DiskLruCache$Editor) -> writeTo
    657:657:boolean isHttps() -> isHttps
    661:675:java.util.List readCertificateList(okio.BufferedSource) -> readCertificateList
    682:693:void writeCertList(okio.BufferedSink,java.util.List) -> writeCertList
    696:698:boolean matches(okhttp3.Request,okhttp3.Response) -> matches
    702:719:okhttp3.Response response(okhttp3.internal.cache.DiskLruCache$Snapshot) -> response
    475:478:void <clinit>() -> <clinit>
okhttp3.CacheControl -> okhttp3.CacheControl:
# {"fileName":"CacheControl.java","id":"sourceFile"}
    okhttp3.CacheControl FORCE_NETWORK -> FORCE_NETWORK
    okhttp3.CacheControl FORCE_CACHE -> FORCE_CACHE
    boolean noCache -> noCache
    boolean noStore -> noStore
    int maxAgeSeconds -> maxAgeSeconds
    int sMaxAgeSeconds -> sMaxAgeSeconds
    boolean isPrivate -> isPrivate
    boolean isPublic -> isPublic
    boolean mustRevalidate -> mustRevalidate
    int maxStaleSeconds -> maxStaleSeconds
    int minFreshSeconds -> minFreshSeconds
    boolean onlyIfCached -> onlyIfCached
    boolean noTransform -> noTransform
    java.lang.String headerValue -> headerValue
    46:59:void <init>(boolean,boolean,int,int,boolean,boolean,boolean,int,int,boolean,boolean,java.lang.String) -> <init>
    61:73:void <init>(okhttp3.CacheControl$Builder) -> <init>
    83:83:boolean noCache() -> noCache
    88:88:boolean noStore() -> noStore
    95:95:int maxAgeSeconds() -> maxAgeSeconds
    103:103:int sMaxAgeSeconds() -> sMaxAgeSeconds
    107:107:boolean isPrivate() -> isPrivate
    111:111:boolean isPublic() -> isPublic
    115:115:boolean mustRevalidate() -> mustRevalidate
    119:119:int maxStaleSeconds() -> maxStaleSeconds
    123:123:int minFreshSeconds() -> minFreshSeconds
    133:133:boolean onlyIfCached() -> onlyIfCached
    137:137:boolean noTransform() -> noTransform
    145:237:okhttp3.CacheControl parse(okhttp3.Headers) -> parse
    242:243:java.lang.String toString() -> toString
    247:261:java.lang.String headerValue() -> headerValue
    18:28:void <clinit>() -> <clinit>
okhttp3.CacheControl$Builder -> okhttp3.CacheControl$Builder:
# {"fileName":"CacheControl.java","id":"sourceFile"}
    boolean noCache -> noCache
    boolean noStore -> noStore
    int maxAgeSeconds -> maxAgeSeconds
    int maxStaleSeconds -> maxStaleSeconds
    int minFreshSeconds -> minFreshSeconds
    boolean onlyIfCached -> onlyIfCached
    boolean noTransform -> noTransform
    265:270:void <init>() -> <init>
    276:277:okhttp3.CacheControl$Builder noCache() -> noCache
    282:283:okhttp3.CacheControl$Builder noStore() -> noStore
    294:299:okhttp3.CacheControl$Builder maxAge(int,java.util.concurrent.TimeUnit) -> maxAge
    310:315:okhttp3.CacheControl$Builder maxStale(int,java.util.concurrent.TimeUnit) -> maxStale
    327:332:okhttp3.CacheControl$Builder minFresh(int,java.util.concurrent.TimeUnit) -> minFresh
    340:341:okhttp3.CacheControl$Builder onlyIfCached() -> onlyIfCached
    346:347:okhttp3.CacheControl$Builder noTransform() -> noTransform
    351:351:okhttp3.CacheControl build() -> build
okhttp3.Call -> okhttp3.Call:
# {"fileName":"Call.java","id":"sourceFile"}
    okhttp3.Request request() -> request
    okhttp3.Response execute() -> execute
    void enqueue(okhttp3.Callback) -> enqueue
    void cancel() -> cancel
    boolean isExecuted() -> isExecuted
    boolean isCanceled() -> isCanceled
    okhttp3.Call clone() -> clone
okhttp3.Call$Factory -> okhttp3.Call$Factory:
# {"fileName":"Call.java","id":"sourceFile"}
    okhttp3.Call newCall(okhttp3.Request) -> newCall
okhttp3.Callback -> okhttp3.Callback:
# {"fileName":"Callback.java","id":"sourceFile"}
    void onFailure(okhttp3.Call,java.io.IOException) -> onFailure
    void onResponse(okhttp3.Call,okhttp3.Response) -> onResponse
okhttp3.CertificatePinner -> okhttp3.CertificatePinner:
# {"fileName":"CertificatePinner.java","id":"sourceFile"}
    okhttp3.CertificatePinner DEFAULT -> DEFAULT
    java.util.Set pins -> pins
    okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner -> certificateChainCleaner
    133:136:void <init>(java.util.Set,okhttp3.internal.tls.CertificateChainCleaner) -> <init>
    139:142:boolean equals(java.lang.Object) -> equals
    146:148:int hashCode() -> hashCode
    161:203:void check(java.lang.String,java.util.List) -> check
    209:210:void check(java.lang.String,java.security.cert.Certificate[]) -> check
    217:224:java.util.List findMatchingPins(java.lang.String) -> findMatchingPins
    229:229:okhttp3.CertificatePinner withCertificateChainCleaner(okhttp3.internal.tls.CertificateChainCleaner) -> withCertificateChainCleaner
    241:244:java.lang.String pin(java.security.cert.Certificate) -> pin
    248:248:okio.ByteString sha1(java.security.cert.X509Certificate) -> sha1
    252:252:okio.ByteString sha256(java.security.cert.X509Certificate) -> sha256
    128:128:void <clinit>() -> <clinit>
okhttp3.CertificatePinner$Builder -> okhttp3.CertificatePinner$Builder:
# {"fileName":"CertificatePinner.java","id":"sourceFile"}
    java.util.List pins -> pins
    317:318:void <init>() -> <init>
    328:334:okhttp3.CertificatePinner$Builder add(java.lang.String,java.lang.String[]) -> add
    338:338:okhttp3.CertificatePinner build() -> build
okhttp3.CertificatePinner$Pin -> okhttp3.CertificatePinner$Pin:
# {"fileName":"CertificatePinner.java","id":"sourceFile"}
    java.lang.String WILDCARD -> WILDCARD
    java.lang.String pattern -> pattern
    java.lang.String canonicalHostname -> canonicalHostname
    java.lang.String hashAlgorithm -> hashAlgorithm
    okio.ByteString hash -> hash
    266:284:void <init>(java.lang.String,java.lang.String) -> <init>
    287:293:boolean matches(java.lang.String) -> matches
    297:300:boolean equals(java.lang.Object) -> equals
    304:308:int hashCode() -> hashCode
    312:312:java.lang.String toString() -> toString
okhttp3.Challenge -> okhttp3.Challenge:
# {"fileName":"Challenge.java","id":"sourceFile"}
    java.lang.String scheme -> scheme
    java.lang.String realm -> realm
    25:28:void <init>(java.lang.String,java.lang.String) -> <init>
    32:32:java.lang.String scheme() -> scheme
    37:37:java.lang.String realm() -> realm
    41:43:boolean equals(java.lang.Object) -> equals
    47:50:int hashCode() -> hashCode
    54:54:java.lang.String toString() -> toString
okhttp3.CipherSuite -> okhttp3.CipherSuite:
# {"fileName":"CipherSuite.java","id":"sourceFile"}
    java.util.concurrent.ConcurrentMap INSTANCES -> INSTANCES
    okhttp3.CipherSuite TLS_RSA_WITH_NULL_MD5 -> TLS_RSA_WITH_NULL_MD5
    okhttp3.CipherSuite TLS_RSA_WITH_NULL_SHA -> TLS_RSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_RSA_EXPORT_WITH_RC4_40_MD5 -> TLS_RSA_EXPORT_WITH_RC4_40_MD5
    okhttp3.CipherSuite TLS_RSA_WITH_RC4_128_MD5 -> TLS_RSA_WITH_RC4_128_MD5
    okhttp3.CipherSuite TLS_RSA_WITH_RC4_128_SHA -> TLS_RSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_RSA_EXPORT_WITH_DES40_CBC_SHA -> TLS_RSA_EXPORT_WITH_DES40_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_DES_CBC_SHA -> TLS_RSA_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_RSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA -> TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_DES_CBC_SHA -> TLS_DHE_DSS_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA -> TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA -> TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_DES_CBC_SHA -> TLS_DHE_RSA_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 -> TLS_DH_anon_EXPORT_WITH_RC4_40_MD5
    okhttp3.CipherSuite TLS_DH_anon_WITH_RC4_128_MD5 -> TLS_DH_anon_WITH_RC4_128_MD5
    okhttp3.CipherSuite TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA -> TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_WITH_DES_CBC_SHA -> TLS_DH_anon_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_WITH_3DES_EDE_CBC_SHA -> TLS_DH_anon_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_KRB5_WITH_DES_CBC_SHA -> TLS_KRB5_WITH_DES_CBC_SHA
    okhttp3.CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_SHA -> TLS_KRB5_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_KRB5_WITH_RC4_128_SHA -> TLS_KRB5_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_KRB5_WITH_DES_CBC_MD5 -> TLS_KRB5_WITH_DES_CBC_MD5
    okhttp3.CipherSuite TLS_KRB5_WITH_3DES_EDE_CBC_MD5 -> TLS_KRB5_WITH_3DES_EDE_CBC_MD5
    okhttp3.CipherSuite TLS_KRB5_WITH_RC4_128_MD5 -> TLS_KRB5_WITH_RC4_128_MD5
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA -> TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_SHA -> TLS_KRB5_EXPORT_WITH_RC4_40_SHA
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 -> TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5
    okhttp3.CipherSuite TLS_KRB5_EXPORT_WITH_RC4_40_MD5 -> TLS_KRB5_EXPORT_WITH_RC4_40_MD5
    okhttp3.CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA -> TLS_RSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA -> TLS_DHE_DSS_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA -> TLS_DHE_RSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA -> TLS_DH_anon_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA -> TLS_RSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA -> TLS_DHE_DSS_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA -> TLS_DHE_RSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA -> TLS_DH_anon_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_NULL_SHA256 -> TLS_RSA_WITH_NULL_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_AES_128_CBC_SHA256 -> TLS_RSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_AES_256_CBC_SHA256 -> TLS_RSA_WITH_AES_256_CBC_SHA256
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 -> TLS_DHE_DSS_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_CAMELLIA_128_CBC_SHA -> TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA -> TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA -> TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 -> TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 -> TLS_DHE_DSS_WITH_AES_256_CBC_SHA256
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 -> TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_128_CBC_SHA256 -> TLS_DH_anon_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_256_CBC_SHA256 -> TLS_DH_anon_WITH_AES_256_CBC_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_CAMELLIA_256_CBC_SHA -> TLS_RSA_WITH_CAMELLIA_256_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA -> TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA -> TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
    okhttp3.CipherSuite TLS_PSK_WITH_RC4_128_SHA -> TLS_PSK_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_PSK_WITH_3DES_EDE_CBC_SHA -> TLS_PSK_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_PSK_WITH_AES_128_CBC_SHA -> TLS_PSK_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_PSK_WITH_AES_256_CBC_SHA -> TLS_PSK_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_SEED_CBC_SHA -> TLS_RSA_WITH_SEED_CBC_SHA
    okhttp3.CipherSuite TLS_RSA_WITH_AES_128_GCM_SHA256 -> TLS_RSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_RSA_WITH_AES_256_GCM_SHA384 -> TLS_RSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 -> TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 -> TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 -> TLS_DHE_DSS_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 -> TLS_DHE_DSS_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_128_GCM_SHA256 -> TLS_DH_anon_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_DH_anon_WITH_AES_256_GCM_SHA384 -> TLS_DH_anon_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_EMPTY_RENEGOTIATION_INFO_SCSV -> TLS_EMPTY_RENEGOTIATION_INFO_SCSV
    okhttp3.CipherSuite TLS_FALLBACK_SCSV -> TLS_FALLBACK_SCSV
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_NULL_SHA -> TLS_ECDH_ECDSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_RC4_128_SHA -> TLS_ECDH_ECDSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA -> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA -> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_NULL_SHA -> TLS_ECDHE_ECDSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_RC4_128_SHA -> TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA -> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_NULL_SHA -> TLS_ECDH_RSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_RC4_128_SHA -> TLS_ECDH_RSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA -> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA -> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_NULL_SHA -> TLS_ECDHE_RSA_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_RC4_128_SHA -> TLS_ECDHE_RSA_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA -> TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA -> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA -> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_NULL_SHA -> TLS_ECDH_anon_WITH_NULL_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_RC4_128_SHA -> TLS_ECDH_anon_WITH_RC4_128_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA -> TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_AES_128_CBC_SHA -> TLS_ECDH_anon_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDH_anon_WITH_AES_256_CBC_SHA -> TLS_ECDH_anon_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 -> TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 -> TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 -> TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
    okhttp3.CipherSuite TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 -> TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
    okhttp3.CipherSuite TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA -> TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA -> TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA
    okhttp3.CipherSuite TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 -> TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
    okhttp3.CipherSuite TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 -> TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
    java.lang.String javaName -> javaName
    376:382:okhttp3.CipherSuite forJavaName(java.lang.String) -> forJavaName
    385:390:void <init>(java.lang.String) -> <init>
    398:398:okhttp3.CipherSuite of(java.lang.String,int) -> of
    408:408:java.lang.String javaName() -> javaName
    412:412:java.lang.String toString() -> toString
    38:362:void <clinit>() -> <clinit>
okhttp3.Connection -> okhttp3.Connection:
# {"fileName":"Connection.java","id":"sourceFile"}
    okhttp3.Route route() -> route
    java.net.Socket socket() -> socket
    okhttp3.Handshake handshake() -> handshake
    okhttp3.Protocol protocol() -> protocol
okhttp3.ConnectionPool -> okhttp3.ConnectionPool:
# {"fileName":"ConnectionPool.java","id":"sourceFile"}
    java.util.concurrent.Executor executor -> executor
    int maxIdleConnections -> maxIdleConnections
    long keepAliveDurationNs -> keepAliveDurationNs
    java.lang.Runnable cleanupRunnable -> cleanupRunnable
    java.util.Deque connections -> connections
    okhttp3.internal.connection.RouteDatabase routeDatabase -> routeDatabase
    boolean cleanupRunning -> cleanupRunning
    boolean $assertionsDisabled -> $assertionsDisabled
    85:86:void <init>() -> <init>
    56:96:void <init>(int,long,java.util.concurrent.TimeUnit) -> <init>
    100:104:int idleConnectionCount() -> idleConnectionCount
    114:114:int connectionCount() -> connectionCount
    119:126:okhttp3.internal.connection.RealConnection get(okhttp3.Address,okhttp3.internal.connection.StreamAllocation) -> get
    134:142:java.net.Socket deduplicate(okhttp3.Address,okhttp3.internal.connection.StreamAllocation) -> deduplicate
    146:152:void put(okhttp3.internal.connection.RealConnection) -> put
    159:165:boolean connectionBecameIdle(okhttp3.internal.connection.RealConnection) -> connectionBecameIdle
    171:186:void evictAll() -> evictAll
    196:243:long cleanup(long) -> cleanup
    253:279:int pruneAndGetAllocationCount(okhttp3.internal.connection.RealConnection,long) -> pruneAndGetAllocationCount
    43:51:void <clinit>() -> <clinit>
okhttp3.ConnectionPool$1 -> okhttp3.ConnectionPool$1:
# {"fileName":"ConnectionPool.java","id":"sourceFile"}
    okhttp3.ConnectionPool this$0 -> this$0
    56:56:void <init>(okhttp3.ConnectionPool) -> <init>
    59:71:void run() -> run
okhttp3.ConnectionSpec -> okhttp3.ConnectionSpec:
# {"fileName":"ConnectionSpec.java","id":"sourceFile"}
    okhttp3.CipherSuite[] APPROVED_CIPHER_SUITES -> APPROVED_CIPHER_SUITES
    okhttp3.ConnectionSpec MODERN_TLS -> MODERN_TLS
    okhttp3.ConnectionSpec COMPATIBLE_TLS -> COMPATIBLE_TLS
    okhttp3.ConnectionSpec CLEARTEXT -> CLEARTEXT
    boolean tls -> tls
    boolean supportsTlsExtensions -> supportsTlsExtensions
    java.lang.String[] cipherSuites -> cipherSuites
    java.lang.String[] tlsVersions -> tlsVersions
    88:93:void <init>(okhttp3.ConnectionSpec$Builder) -> <init>
    96:96:boolean isTls() -> isTls
    104:110:java.util.List cipherSuites() -> cipherSuites
    118:124:java.util.List tlsVersions() -> tlsVersions
    128:128:boolean supportsTlsExtensions() -> supportsTlsExtensions
    133:141:void apply(javax.net.ssl.SSLSocket,boolean) -> apply
    148:164:okhttp3.ConnectionSpec supportedSpec(javax.net.ssl.SSLSocket,boolean) -> supportedSpec
    179:193:boolean isCompatible(javax.net.ssl.SSLSocket) -> isCompatible
    202:210:boolean nonEmptyIntersection(java.lang.String[],java.lang.String[]) -> nonEmptyIntersection
    214:226:boolean equals(java.lang.Object) -> equals
    230:236:int hashCode() -> hashCode
    240:246:java.lang.String toString() -> toString
    45:81:void <clinit>() -> <clinit>
okhttp3.ConnectionSpec$Builder -> okhttp3.ConnectionSpec$Builder:
# {"fileName":"ConnectionSpec.java","id":"sourceFile"}
    boolean tls -> tls
    java.lang.String[] cipherSuites -> cipherSuites
    java.lang.String[] tlsVersions -> tlsVersions
    boolean supportsTlsExtensions -> supportsTlsExtensions
    259:261:void <init>(boolean) -> <init>
    263:268:void <init>(okhttp3.ConnectionSpec) -> <init>
    271:273:okhttp3.ConnectionSpec$Builder allEnabledCipherSuites() -> allEnabledCipherSuites
    277:283:okhttp3.ConnectionSpec$Builder cipherSuites(okhttp3.CipherSuite[]) -> cipherSuites
    287:294:okhttp3.ConnectionSpec$Builder cipherSuites(java.lang.String[]) -> cipherSuites
    298:300:okhttp3.ConnectionSpec$Builder allEnabledTlsVersions() -> allEnabledTlsVersions
    304:311:okhttp3.ConnectionSpec$Builder tlsVersions(okhttp3.TlsVersion[]) -> tlsVersions
    315:322:okhttp3.ConnectionSpec$Builder tlsVersions(java.lang.String[]) -> tlsVersions
    326:328:okhttp3.ConnectionSpec$Builder supportsTlsExtensions(boolean) -> supportsTlsExtensions
    332:332:okhttp3.ConnectionSpec build() -> build
okhttp3.Cookie -> okhttp3.Cookie:
# {"fileName":"Cookie.java","id":"sourceFile"}
    java.util.regex.Pattern YEAR_PATTERN -> YEAR_PATTERN
    java.util.regex.Pattern MONTH_PATTERN -> MONTH_PATTERN
    java.util.regex.Pattern DAY_OF_MONTH_PATTERN -> DAY_OF_MONTH_PATTERN
    java.util.regex.Pattern TIME_PATTERN -> TIME_PATTERN
    java.lang.String name -> name
    java.lang.String value -> value
    long expiresAt -> expiresAt
    java.lang.String domain -> domain
    java.lang.String path -> path
    boolean secure -> secure
    boolean httpOnly -> httpOnly
    boolean persistent -> persistent
    boolean hostOnly -> hostOnly
    66:76:void <init>(java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean) -> <init>
    78:92:void <init>(okhttp3.Cookie$Builder) -> <init>
    96:96:java.lang.String name() -> name
    101:101:java.lang.String value() -> value
    106:106:boolean persistent() -> persistent
    119:119:long expiresAt() -> expiresAt
    133:133:boolean hostOnly() -> hostOnly
    141:141:java.lang.String domain() -> domain
    150:150:java.lang.String path() -> path
    158:158:boolean httpOnly() -> httpOnly
    163:163:boolean secure() -> secure
    171:180:boolean matches(okhttp3.HttpUrl) -> matches
    184:196:boolean domainMatch(okhttp3.HttpUrl,java.lang.String) -> domainMatch
    200:211:boolean pathMatch(okhttp3.HttpUrl,java.lang.String) -> pathMatch
    219:219:okhttp3.Cookie parse(okhttp3.HttpUrl,java.lang.String) -> parse
    223:316:okhttp3.Cookie parse(long,okhttp3.HttpUrl,java.lang.String) -> parse
    322:374:long parseExpires(java.lang.String,int,int) -> parseExpires
    382:391:int dateCharacterOffset(java.lang.String,int,int,boolean) -> dateCharacterOffset
    403:410:long parseMaxAge(java.lang.String) -> parseMaxAge
    419:429:java.lang.String parseDomain(java.lang.String) -> parseDomain
    434:446:java.util.List parseAll(okhttp3.HttpUrl,okhttp3.Headers) -> parseAll
    535:535:java.lang.String toString() -> toString
    544:575:java.lang.String toString(boolean) -> toString
    579:584:boolean equals(java.lang.Object) -> equals
    593:603:int hashCode() -> hashCode
    45:52:void <clinit>() -> <clinit>
okhttp3.Cookie$Builder -> okhttp3.Cookie$Builder:
# {"fileName":"Cookie.java","id":"sourceFile"}
    java.lang.String name -> name
    java.lang.String value -> value
    long expiresAt -> expiresAt
    java.lang.String domain -> domain
    java.lang.String path -> path
    boolean secure -> secure
    boolean httpOnly -> httpOnly
    boolean persistent -> persistent
    boolean hostOnly -> hostOnly
    453:458:void <init>() -> <init>
    465:468:okhttp3.Cookie$Builder name(java.lang.String) -> name
    472:475:okhttp3.Cookie$Builder value(java.lang.String) -> value
    479:483:okhttp3.Cookie$Builder expiresAt(long) -> expiresAt
    491:491:okhttp3.Cookie$Builder domain(java.lang.String) -> domain
    499:499:okhttp3.Cookie$Builder hostOnlyDomain(java.lang.String) -> hostOnlyDomain
    503:510:okhttp3.Cookie$Builder domain(java.lang.String,boolean) -> domain
    514:516:okhttp3.Cookie$Builder path(java.lang.String) -> path
    520:521:okhttp3.Cookie$Builder secure() -> secure
    525:526:okhttp3.Cookie$Builder httpOnly() -> httpOnly
    530:530:okhttp3.Cookie build() -> build
okhttp3.CookieJar -> okhttp3.CookieJar:
# {"fileName":"CookieJar.java","id":"sourceFile"}
    okhttp3.CookieJar NO_COOKIES -> NO_COOKIES
    void saveFromResponse(okhttp3.HttpUrl,java.util.List) -> saveFromResponse
    java.util.List loadForRequest(okhttp3.HttpUrl) -> loadForRequest
    36:36:void <clinit>() -> <clinit>
okhttp3.CookieJar$1 -> okhttp3.CookieJar$1:
# {"fileName":"CookieJar.java","id":"sourceFile"}
    36:36:void <init>() -> <init>
    38:38:void saveFromResponse(okhttp3.HttpUrl,java.util.List) -> saveFromResponse
    41:41:java.util.List loadForRequest(okhttp3.HttpUrl) -> loadForRequest
okhttp3.Credentials -> okhttp3.Credentials:
# {"fileName":"Credentials.java","id":"sourceFile"}
    23:24:void <init>() -> <init>
    28:28:java.lang.String basic(java.lang.String,java.lang.String) -> basic
    32:35:java.lang.String basic(java.lang.String,java.lang.String,java.nio.charset.Charset) -> basic
okhttp3.Dispatcher -> okhttp3.Dispatcher:
# {"fileName":"Dispatcher.java","id":"sourceFile"}
    int maxRequests -> maxRequests
    int maxRequestsPerHost -> maxRequestsPerHost
    java.lang.Runnable idleCallback -> idleCallback
    java.util.concurrent.ExecutorService executorService -> executorService
    java.util.Deque readyAsyncCalls -> readyAsyncCalls
    java.util.Deque runningAsyncCalls -> runningAsyncCalls
    java.util.Deque runningSyncCalls -> runningSyncCalls
    39:57:void <init>(java.util.concurrent.ExecutorService) -> <init>
    39:60:void <init>() -> <init>
    63:67:java.util.concurrent.ExecutorService executorService() -> executorService
    78:83:void setMaxRequests(int) -> setMaxRequests
    86:86:int getMaxRequests() -> getMaxRequests
    99:104:void setMaxRequestsPerHost(int) -> setMaxRequestsPerHost
    107:107:int getMaxRequestsPerHost() -> getMaxRequestsPerHost
    123:124:void setIdleCallback(java.lang.Runnable) -> setIdleCallback
    127:133:void enqueue(okhttp3.RealCall$AsyncCall) -> enqueue
    140:151:void cancelAll() -> cancelAll
    154:168:void promoteCalls() -> promoteCalls
    172:176:int runningCallsForHost(okhttp3.RealCall$AsyncCall) -> runningCallsForHost
    181:182:void executed(okhttp3.RealCall) -> executed
    186:187:void finished(okhttp3.RealCall$AsyncCall) -> finished
    191:192:void finished(okhttp3.RealCall) -> finished
    197:207:void finished(java.util.Deque,java.lang.Object,boolean) -> finished
    211:215:java.util.List queuedCalls() -> queuedCalls
    220:225:java.util.List runningCalls() -> runningCalls
    229:229:int queuedCallsCount() -> queuedCallsCount
    233:233:int runningCallsCount() -> runningCallsCount
okhttp3.Dns -> okhttp3.Dns:
# {"fileName":"Dns.java","id":"sourceFile"}
    okhttp3.Dns SYSTEM -> SYSTEM
    java.util.List lookup(java.lang.String) -> lookup
    36:36:void <clinit>() -> <clinit>
okhttp3.Dns$1 -> okhttp3.Dns$1:
# {"fileName":"Dns.java","id":"sourceFile"}
    36:36:void <init>() -> <init>
    38:39:java.util.List lookup(java.lang.String) -> lookup
okhttp3.FormBody -> okhttp3.FormBody:
# {"fileName":"FormBody.java","id":"sourceFile"}
    okhttp3.MediaType CONTENT_TYPE -> CONTENT_TYPE
    java.util.List encodedNames -> encodedNames
    java.util.List encodedValues -> encodedValues
    35:38:void <init>(java.util.List,java.util.List) -> <init>
    42:42:int size() -> size
    46:46:java.lang.String encodedName(int) -> encodedName
    50:50:java.lang.String name(int) -> name
    54:54:java.lang.String encodedValue(int) -> encodedValue
    58:58:java.lang.String value(int) -> value
    62:62:okhttp3.MediaType contentType() -> contentType
    66:66:long contentLength() -> contentLength
    70:71:void writeTo(okio.BufferedSink) -> writeTo
    80:101:long writeOrCountBytes(okio.BufferedSink,boolean) -> writeOrCountBytes
    29:30:void <clinit>() -> <clinit>
okhttp3.FormBody$Builder -> okhttp3.FormBody$Builder:
# {"fileName":"FormBody.java","id":"sourceFile"}
    java.util.List names -> names
    java.util.List values -> values
    104:106:void <init>() -> <init>
    109:111:okhttp3.FormBody$Builder add(java.lang.String,java.lang.String) -> add
    115:117:okhttp3.FormBody$Builder addEncoded(java.lang.String,java.lang.String) -> addEncoded
    121:121:okhttp3.FormBody build() -> build
okhttp3.Handshake -> okhttp3.Handshake:
# {"fileName":"Handshake.java","id":"sourceFile"}
    okhttp3.TlsVersion tlsVersion -> tlsVersion
    okhttp3.CipherSuite cipherSuite -> cipherSuite
    java.util.List peerCertificates -> peerCertificates
    java.util.List localCertificates -> localCertificates
    41:46:void <init>(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List) -> <init>
    49:72:okhttp3.Handshake get(javax.net.ssl.SSLSession) -> get
    77:79:okhttp3.Handshake get(okhttp3.TlsVersion,okhttp3.CipherSuite,java.util.List,java.util.List) -> get
    87:87:okhttp3.TlsVersion tlsVersion() -> tlsVersion
    92:92:okhttp3.CipherSuite cipherSuite() -> cipherSuite
    97:97:java.util.List peerCertificates() -> peerCertificates
    102:103:java.security.Principal peerPrincipal() -> peerPrincipal
    109:109:java.util.List localCertificates() -> localCertificates
    114:115:java.security.Principal localPrincipal() -> localPrincipal
    120:125:boolean equals(java.lang.Object) -> equals
    129:134:int hashCode() -> hashCode
okhttp3.Headers -> okhttp3.Headers:
# {"fileName":"Headers.java","id":"sourceFile"}
    java.lang.String[] namesAndValues -> namesAndValues
    52:54:void <init>(okhttp3.Headers$Builder) -> <init>
    56:58:void <init>(java.lang.String[]) -> <init>
    62:62:java.lang.String get(java.lang.String) -> get
    70:71:java.util.Date getDate(java.lang.String) -> getDate
    76:76:int size() -> size
    81:81:java.lang.String name(int) -> name
    86:86:java.lang.String value(int) -> value
    91:95:java.util.Set names() -> names
    100:109:java.util.List values(java.lang.String) -> values
    113:115:okhttp3.Headers$Builder newBuilder() -> newBuilder
    145:146:boolean equals(java.lang.Object) -> equals
    150:150:int hashCode() -> hashCode
    154:158:java.lang.String toString() -> toString
    162:172:java.util.Map toMultimap() -> toMultimap
    176:181:java.lang.String get(java.lang.String[],java.lang.String) -> get
    189:210:okhttp3.Headers of(java.lang.String[]) -> of
    217:236:okhttp3.Headers of(java.util.Map) -> of
okhttp3.Headers$Builder -> okhttp3.Headers$Builder:
# {"fileName":"Headers.java","id":"sourceFile"}
    java.util.List namesAndValues -> namesAndValues
    239:240:void <init>() -> <init>
    247:255:okhttp3.Headers$Builder addLenient(java.lang.String) -> addLenient
    261:265:okhttp3.Headers$Builder add(java.lang.String) -> add
    270:271:okhttp3.Headers$Builder add(java.lang.String,java.lang.String) -> add
    279:281:okhttp3.Headers$Builder addLenient(java.lang.String,java.lang.String) -> addLenient
    285:292:okhttp3.Headers$Builder removeAll(java.lang.String) -> removeAll
    300:303:okhttp3.Headers$Builder set(java.lang.String,java.lang.String) -> set
    307:324:void checkNameAndValue(java.lang.String,java.lang.String) -> checkNameAndValue
    328:333:java.lang.String get(java.lang.String) -> get
    337:337:okhttp3.Headers build() -> build
okhttp3.HttpUrl -> okhttp3.HttpUrl:
# {"fileName":"HttpUrl.java","id":"sourceFile"}
    char[] HEX_DIGITS -> HEX_DIGITS
    java.lang.String USERNAME_ENCODE_SET -> USERNAME_ENCODE_SET
    java.lang.String PASSWORD_ENCODE_SET -> PASSWORD_ENCODE_SET
    java.lang.String PATH_SEGMENT_ENCODE_SET -> PATH_SEGMENT_ENCODE_SET
    java.lang.String PATH_SEGMENT_ENCODE_SET_URI -> PATH_SEGMENT_ENCODE_SET_URI
    java.lang.String QUERY_ENCODE_SET -> QUERY_ENCODE_SET
    java.lang.String QUERY_COMPONENT_ENCODE_SET -> QUERY_COMPONENT_ENCODE_SET
    java.lang.String QUERY_COMPONENT_ENCODE_SET_URI -> QUERY_COMPONENT_ENCODE_SET_URI
    java.lang.String FORM_ENCODE_SET -> FORM_ENCODE_SET
    java.lang.String FRAGMENT_ENCODE_SET -> FRAGMENT_ENCODE_SET
    java.lang.String FRAGMENT_ENCODE_SET_URI -> FRAGMENT_ENCODE_SET_URI
    java.lang.String scheme -> scheme
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String host -> host
    int port -> port
    java.util.List pathSegments -> pathSegments
    java.util.List queryNamesAndValues -> queryNamesAndValues
    java.lang.String fragment -> fragment
    java.lang.String url -> url
    333:347:void <init>(okhttp3.HttpUrl$Builder) -> <init>
    352:354:java.net.URL url() -> url
    372:381:java.net.URI uri() -> uri
    388:388:java.lang.String scheme() -> scheme
    392:392:boolean isHttps() -> isHttps
    407:410:java.lang.String encodedUsername() -> encodedUsername
    425:425:java.lang.String username() -> username
    440:443:java.lang.String encodedPassword() -> encodedPassword
    458:458:java.lang.String password() -> password
    481:481:java.lang.String host() -> host
    497:497:int port() -> port
    505:510:int defaultPort(java.lang.String) -> defaultPort
    526:526:int pathSize() -> pathSize
    541:543:java.lang.String encodedPath() -> encodedPath
    547:551:void pathSegmentsToString(java.lang.StringBuilder,java.util.List) -> pathSegmentsToString
    565:574:java.util.List encodedPathSegments() -> encodedPathSegments
    589:589:java.util.List pathSegments() -> pathSegments
    608:611:java.lang.String encodedQuery() -> encodedQuery
    615:625:void namesAndValuesToQueryString(java.lang.StringBuilder,java.util.List) -> namesAndValuesToQueryString
    634:649:java.util.List queryStringToNamesAndValues(java.lang.String) -> queryStringToNamesAndValues
    668:671:java.lang.String query() -> query
    689:689:int querySize() -> querySize
    706:712:java.lang.String queryParameter(java.lang.String) -> queryParameter
    729:734:java.util.Set queryParameterNames() -> queryParameterNames
    756:763:java.util.List queryParameterValues(java.lang.String) -> queryParameterValues
    784:785:java.lang.String queryParameterName(int) -> queryParameterName
    806:807:java.lang.String queryParameterValue(int) -> queryParameterValue
    823:825:java.lang.String encodedFragment() -> encodedFragment
    841:841:java.lang.String fragment() -> fragment
    850:854:java.lang.String redact() -> redact
    862:863:okhttp3.HttpUrl resolve(java.lang.String) -> resolve
    867:878:okhttp3.HttpUrl$Builder newBuilder() -> newBuilder
    886:888:okhttp3.HttpUrl$Builder newBuilder(java.lang.String) -> newBuilder
    896:898:okhttp3.HttpUrl parse(java.lang.String) -> parse
    906:906:okhttp3.HttpUrl get(java.net.URL) -> get
    917:928:okhttp3.HttpUrl getChecked(java.lang.String) -> getChecked
    933:933:okhttp3.HttpUrl get(java.net.URI) -> get
    937:937:boolean equals(java.lang.Object) -> equals
    941:941:int hashCode() -> hashCode
    945:945:java.lang.String toString() -> toString
    1727:1727:java.lang.String percentDecode(java.lang.String,boolean) -> percentDecode
    1731:1737:java.util.List percentDecode(java.util.List,boolean) -> percentDecode
    1741:1753:java.lang.String percentDecode(java.lang.String,int,int,boolean) -> percentDecode
    1758:1774:void percentDecode(okio.Buffer,java.lang.String,int,int,boolean) -> percentDecode
    1777:1780:boolean percentEncoded(java.lang.String,int,int) -> percentEncoded
    1784:1787:int decodeHexDigit(char) -> decodeHexDigit
    1809:1827:java.lang.String canonicalize(java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean) -> canonicalize
    1832:1863:void canonicalize(okio.Buffer,java.lang.String,int,int,java.lang.String,boolean,boolean,boolean,boolean) -> canonicalize
    1867:1868:java.lang.String canonicalize(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean) -> canonicalize
    285:285:void <clinit>() -> <clinit>
okhttp3.HttpUrl$1 -> okhttp3.HttpUrl$1:
# {"fileName":"HttpUrl.java","id":"sourceFile"}
    int[] $SwitchMap$okhttp3$HttpUrl$Builder$ParseResult -> $SwitchMap$okhttp3$HttpUrl$Builder$ParseResult
    919:919:void <clinit>() -> <clinit>
okhttp3.HttpUrl$Builder -> okhttp3.HttpUrl$Builder:
# {"fileName":"HttpUrl.java","id":"sourceFile"}
    java.lang.String scheme -> scheme
    java.lang.String encodedUsername -> encodedUsername
    java.lang.String encodedPassword -> encodedPassword
    java.lang.String host -> host
    int port -> port
    java.util.List encodedPathSegments -> encodedPathSegments
    java.util.List encodedQueryNamesAndValues -> encodedQueryNamesAndValues
    java.lang.String encodedFragment -> encodedFragment
    950:960:void <init>() -> <init>
    963:972:okhttp3.HttpUrl$Builder scheme(java.lang.String) -> scheme
    976:978:okhttp3.HttpUrl$Builder username(java.lang.String) -> username
    982:985:okhttp3.HttpUrl$Builder encodedUsername(java.lang.String) -> encodedUsername
    989:991:okhttp3.HttpUrl$Builder password(java.lang.String) -> password
    995:998:okhttp3.HttpUrl$Builder encodedPassword(java.lang.String) -> encodedPassword
    1006:1010:okhttp3.HttpUrl$Builder host(java.lang.String) -> host
    1014:1016:okhttp3.HttpUrl$Builder port(int) -> port
    1020:1020:int effectivePort() -> effectivePort
    1024:1026:okhttp3.HttpUrl$Builder addPathSegment(java.lang.String) -> addPathSegment
    1034:1035:okhttp3.HttpUrl$Builder addPathSegments(java.lang.String) -> addPathSegments
    1039:1043:okhttp3.HttpUrl$Builder addEncodedPathSegment(java.lang.String) -> addEncodedPathSegment
    1052:1055:okhttp3.HttpUrl$Builder addEncodedPathSegments(java.lang.String) -> addEncodedPathSegments
    1059:1066:okhttp3.HttpUrl$Builder addPathSegments(java.lang.String,boolean) -> addPathSegments
    1070:1077:okhttp3.HttpUrl$Builder setPathSegment(int,java.lang.String) -> setPathSegment
    1081:1090:okhttp3.HttpUrl$Builder setEncodedPathSegment(int,java.lang.String) -> setEncodedPathSegment
    1094:1098:okhttp3.HttpUrl$Builder removePathSegment(int) -> removePathSegment
    1102:1107:okhttp3.HttpUrl$Builder encodedPath(java.lang.String) -> encodedPath
    1111:1115:okhttp3.HttpUrl$Builder query(java.lang.String) -> query
    1119:1123:okhttp3.HttpUrl$Builder encodedQuery(java.lang.String) -> encodedQuery
    1128:1135:okhttp3.HttpUrl$Builder addQueryParameter(java.lang.String,java.lang.String) -> addQueryParameter
    1140:1147:okhttp3.HttpUrl$Builder addEncodedQueryParameter(java.lang.String,java.lang.String) -> addEncodedQueryParameter
    1151:1153:okhttp3.HttpUrl$Builder setQueryParameter(java.lang.String,java.lang.String) -> setQueryParameter
    1157:1159:okhttp3.HttpUrl$Builder setEncodedQueryParameter(java.lang.String,java.lang.String) -> setEncodedQueryParameter
    1163:1168:okhttp3.HttpUrl$Builder removeAllQueryParameters(java.lang.String) -> removeAllQueryParameters
    1172:1176:okhttp3.HttpUrl$Builder removeAllEncodedQueryParameters(java.lang.String) -> removeAllEncodedQueryParameters
    1180:1190:void removeAllCanonicalQueryParameters(java.lang.String) -> removeAllCanonicalQueryParameters
    1193:1196:okhttp3.HttpUrl$Builder fragment(java.lang.String) -> fragment
    1200:1203:okhttp3.HttpUrl$Builder encodedFragment(java.lang.String) -> encodedFragment
    1211:1229:okhttp3.HttpUrl$Builder reencodeForUri() -> reencodeForUri
    1233:1235:okhttp3.HttpUrl build() -> build
    1239:1279:java.lang.String toString() -> toString
    1291:1409:okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String) -> parse
    1414:1437:void resolvePath(java.lang.String,int,int) -> resolvePath
    1442:1459:void push(java.lang.String,int,int,boolean,boolean) -> push
    1462:1462:boolean isDot(java.lang.String) -> isDot
    1466:1469:boolean isDotDot(java.lang.String) -> isDotDot
    1483:1491:void pop() -> pop
    1498:1520:int schemeDelimiterOffset(java.lang.String,int,int) -> schemeDelimiterOffset
    1525:1535:int slashCount(java.lang.String,int,int) -> slashCount
    1540:1551:int portColonOffset(java.lang.String,int,int) -> portColonOffset
    1557:1571:java.lang.String canonicalizeHost(java.lang.String,int,int) -> canonicalizeHost
    1576:1641:java.net.InetAddress decodeIpv6(java.lang.String,int,int) -> decodeIpv6
    1648:1677:boolean decodeIpv4Suffix(java.lang.String,int,int,byte[],int) -> decodeIpv4Suffix
    1682:1710:java.lang.String inet6AddressToAscii(byte[]) -> inet6AddressToAscii
    1716:1721:int parsePort(java.lang.String,int,int) -> parsePort
okhttp3.HttpUrl$Builder$ParseResult -> okhttp3.HttpUrl$Builder$ParseResult:
# {"fileName":"HttpUrl.java","id":"sourceFile"}
    okhttp3.HttpUrl$Builder$ParseResult SUCCESS -> SUCCESS
    okhttp3.HttpUrl$Builder$ParseResult MISSING_SCHEME -> MISSING_SCHEME
    okhttp3.HttpUrl$Builder$ParseResult UNSUPPORTED_SCHEME -> UNSUPPORTED_SCHEME
    okhttp3.HttpUrl$Builder$ParseResult INVALID_PORT -> INVALID_PORT
    okhttp3.HttpUrl$Builder$ParseResult INVALID_HOST -> INVALID_HOST
    okhttp3.HttpUrl$Builder$ParseResult[] $VALUES -> $VALUES
    1282:1282:okhttp3.HttpUrl$Builder$ParseResult[] values() -> values
    1282:1282:okhttp3.HttpUrl$Builder$ParseResult valueOf(java.lang.String) -> valueOf
    1282:1282:void <init>(java.lang.String,int) -> <init>
    1282:1287:void <clinit>() -> <clinit>
okhttp3.Interceptor -> okhttp3.Interceptor:
# {"fileName":"Interceptor.java","id":"sourceFile"}
    okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
okhttp3.Interceptor$Chain -> okhttp3.Interceptor$Chain:
# {"fileName":"Interceptor.java","id":"sourceFile"}
    okhttp3.Request request() -> request
    okhttp3.Response proceed(okhttp3.Request) -> proceed
    okhttp3.Connection connection() -> connection
okhttp3.MediaType -> okhttp3.MediaType:
# {"fileName":"MediaType.java","id":"sourceFile"}
    java.lang.String TOKEN -> TOKEN
    java.lang.String QUOTED -> QUOTED
    java.util.regex.Pattern TYPE_SUBTYPE -> TYPE_SUBTYPE
    java.util.regex.Pattern PARAMETER -> PARAMETER
    java.lang.String mediaType -> mediaType
    java.lang.String type -> type
    java.lang.String subtype -> subtype
    java.lang.String charset -> charset
    39:44:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    51:81:okhttp3.MediaType parse(java.lang.String) -> parse
    89:89:java.lang.String type() -> type
    96:96:java.lang.String subtype() -> subtype
    103:103:java.nio.charset.Charset charset() -> charset
    111:111:java.nio.charset.Charset charset(java.nio.charset.Charset) -> charset
    119:119:java.lang.String toString() -> toString
    123:123:boolean equals(java.lang.Object) -> equals
    127:127:int hashCode() -> hashCode
    30:31:void <clinit>() -> <clinit>
okhttp3.MultipartBody -> okhttp3.MultipartBody:
# {"fileName":"MultipartBody.java","id":"sourceFile"}
    okhttp3.MediaType MIXED -> MIXED
    okhttp3.MediaType ALTERNATIVE -> ALTERNATIVE
    okhttp3.MediaType DIGEST -> DIGEST
    okhttp3.MediaType PARALLEL -> PARALLEL
    okhttp3.MediaType FORM -> FORM
    byte[] COLONSPACE -> COLONSPACE
    byte[] CRLF -> CRLF
    byte[] DASHDASH -> DASHDASH
    okio.ByteString boundary -> boundary
    okhttp3.MediaType originalType -> originalType
    okhttp3.MediaType contentType -> contentType
    java.util.List parts -> parts
    long contentLength -> contentLength
    71:78:void <init>(okio.ByteString,okhttp3.MediaType,java.util.List) -> <init>
    81:81:okhttp3.MediaType type() -> type
    85:85:java.lang.String boundary() -> boundary
    90:90:int size() -> size
    94:94:java.util.List parts() -> parts
    98:98:okhttp3.MultipartBody$Part part(int) -> part
    103:103:okhttp3.MediaType contentType() -> contentType
    107:109:long contentLength() -> contentLength
    113:114:void writeTo(okio.BufferedSink) -> writeTo
    123:187:long writeOrCountBytes(okio.BufferedSink,boolean) -> writeOrCountBytes
    201:220:java.lang.StringBuilder appendQuotedString(java.lang.StringBuilder,java.lang.String) -> appendQuotedString
    34:65:void <clinit>() -> <clinit>
okhttp3.MultipartBody$Builder -> okhttp3.MultipartBody$Builder:
# {"fileName":"MultipartBody.java","id":"sourceFile"}
    okio.ByteString boundary -> boundary
    okhttp3.MediaType type -> type
    java.util.List parts -> parts
    283:284:void <init>() -> <init>
    279:288:void <init>(java.lang.String) -> <init>
    295:302:okhttp3.MultipartBody$Builder setType(okhttp3.MediaType) -> setType
    307:307:okhttp3.MultipartBody$Builder addPart(okhttp3.RequestBody) -> addPart
    312:312:okhttp3.MultipartBody$Builder addPart(okhttp3.Headers,okhttp3.RequestBody) -> addPart
    317:317:okhttp3.MultipartBody$Builder addFormDataPart(java.lang.String,java.lang.String) -> addFormDataPart
    322:322:okhttp3.MultipartBody$Builder addFormDataPart(java.lang.String,java.lang.String,okhttp3.RequestBody) -> addFormDataPart
    327:329:okhttp3.MultipartBody$Builder addPart(okhttp3.MultipartBody$Part) -> addPart
    334:337:okhttp3.MultipartBody build() -> build
okhttp3.MultipartBody$Part -> okhttp3.MultipartBody$Part:
# {"fileName":"MultipartBody.java","id":"sourceFile"}
    okhttp3.Headers headers -> headers
    okhttp3.RequestBody body -> body
    225:225:okhttp3.MultipartBody$Part create(okhttp3.RequestBody) -> create
    229:238:okhttp3.MultipartBody$Part create(okhttp3.Headers,okhttp3.RequestBody) -> create
    242:242:okhttp3.MultipartBody$Part createFormData(java.lang.String,java.lang.String) -> createFormData
    246:257:okhttp3.MultipartBody$Part createFormData(java.lang.String,java.lang.String,okhttp3.RequestBody) -> createFormData
    263:266:void <init>(okhttp3.Headers,okhttp3.RequestBody) -> <init>
    269:269:okhttp3.Headers headers() -> headers
    273:273:okhttp3.RequestBody body() -> body
okhttp3.OkHttpClient -> okhttp3.OkHttpClient:
# {"fileName":"OkHttpClient.java","id":"sourceFile"}
    java.util.List DEFAULT_PROTOCOLS -> DEFAULT_PROTOCOLS
    java.util.List DEFAULT_CONNECTION_SPECS -> DEFAULT_CONNECTION_SPECS
    okhttp3.Dispatcher dispatcher -> dispatcher
    java.net.Proxy proxy -> proxy
    java.util.List protocols -> protocols
    java.util.List connectionSpecs -> connectionSpecs
    java.util.List interceptors -> interceptors
    java.util.List networkInterceptors -> networkInterceptors
    java.net.ProxySelector proxySelector -> proxySelector
    okhttp3.CookieJar cookieJar -> cookieJar
    okhttp3.Cache cache -> cache
    okhttp3.internal.cache.InternalCache internalCache -> internalCache
    javax.net.SocketFactory socketFactory -> socketFactory
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> sslSocketFactory
    okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner -> certificateChainCleaner
    javax.net.ssl.HostnameVerifier hostnameVerifier -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner -> certificatePinner
    okhttp3.Authenticator proxyAuthenticator -> proxyAuthenticator
    okhttp3.Authenticator authenticator -> authenticator
    okhttp3.ConnectionPool connectionPool -> connectionPool
    okhttp3.Dns dns -> dns
    boolean followSslRedirects -> followSslRedirects
    boolean followRedirects -> followRedirects
    boolean retryOnConnectionFailure -> retryOnConnectionFailure
    int connectTimeout -> connectTimeout
    int readTimeout -> readTimeout
    int writeTimeout -> writeTimeout
    int pingInterval -> pingInterval
    217:218:void <init>() -> <init>
    220:261:void <init>(okhttp3.OkHttpClient$Builder) -> <init>
    265:275:javax.net.ssl.X509TrustManager systemDefaultTrustManager() -> systemDefaultTrustManager
    281:285:javax.net.ssl.SSLSocketFactory systemDefaultSslSocketFactory(javax.net.ssl.X509TrustManager) -> systemDefaultSslSocketFactory
    291:291:int connectTimeoutMillis() -> connectTimeoutMillis
    296:296:int readTimeoutMillis() -> readTimeoutMillis
    301:301:int writeTimeoutMillis() -> writeTimeoutMillis
    306:306:int pingIntervalMillis() -> pingIntervalMillis
    310:310:java.net.Proxy proxy() -> proxy
    314:314:java.net.ProxySelector proxySelector() -> proxySelector
    318:318:okhttp3.CookieJar cookieJar() -> cookieJar
    322:322:okhttp3.Cache cache() -> cache
    326:326:okhttp3.internal.cache.InternalCache internalCache() -> internalCache
    330:330:okhttp3.Dns dns() -> dns
    334:334:javax.net.SocketFactory socketFactory() -> socketFactory
    338:338:javax.net.ssl.SSLSocketFactory sslSocketFactory() -> sslSocketFactory
    342:342:javax.net.ssl.HostnameVerifier hostnameVerifier() -> hostnameVerifier
    346:346:okhttp3.CertificatePinner certificatePinner() -> certificatePinner
    350:350:okhttp3.Authenticator authenticator() -> authenticator
    354:354:okhttp3.Authenticator proxyAuthenticator() -> proxyAuthenticator
    358:358:okhttp3.ConnectionPool connectionPool() -> connectionPool
    362:362:boolean followSslRedirects() -> followSslRedirects
    366:366:boolean followRedirects() -> followRedirects
    370:370:boolean retryOnConnectionFailure() -> retryOnConnectionFailure
    374:374:okhttp3.Dispatcher dispatcher() -> dispatcher
    378:378:java.util.List protocols() -> protocols
    382:382:java.util.List connectionSpecs() -> connectionSpecs
    391:391:java.util.List interceptors() -> interceptors
    400:400:java.util.List networkInterceptors() -> networkInterceptors
    407:407:okhttp3.Call newCall(okhttp3.Request) -> newCall
    414:416:okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener) -> newWebSocket
    420:420:okhttp3.OkHttpClient$Builder newBuilder() -> newBuilder
    122:187:void <clinit>() -> <clinit>
okhttp3.OkHttpClient$1 -> okhttp3.OkHttpClient$1:
# {"fileName":"OkHttpClient.java","id":"sourceFile"}
    129:129:void <init>() -> <init>
    131:132:void addLenient(okhttp3.Headers$Builder,java.lang.String) -> addLenient
    135:136:void addLenient(okhttp3.Headers$Builder,java.lang.String,java.lang.String) -> addLenient
    139:140:void setCache(okhttp3.OkHttpClient$Builder,okhttp3.internal.cache.InternalCache) -> setCache
    144:144:boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection) -> connectionBecameIdle
    149:149:okhttp3.internal.connection.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.connection.StreamAllocation) -> get
    154:154:java.net.Socket deduplicate(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.connection.StreamAllocation) -> deduplicate
    158:159:void put(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection) -> put
    162:162:okhttp3.internal.connection.RouteDatabase routeDatabase(okhttp3.ConnectionPool) -> routeDatabase
    166:166:int code(okhttp3.Response$Builder) -> code
    171:172:void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean) -> apply
    176:176:okhttp3.HttpUrl getHttpUrlChecked(java.lang.String) -> getHttpUrlChecked
    180:180:okhttp3.internal.connection.StreamAllocation streamAllocation(okhttp3.Call) -> streamAllocation
    184:184:okhttp3.Call newWebSocketCall(okhttp3.OkHttpClient,okhttp3.Request) -> newWebSocketCall
okhttp3.OkHttpClient$Builder -> okhttp3.OkHttpClient$Builder:
# {"fileName":"OkHttpClient.java","id":"sourceFile"}
    okhttp3.Dispatcher dispatcher -> dispatcher
    java.net.Proxy proxy -> proxy
    java.util.List protocols -> protocols
    java.util.List connectionSpecs -> connectionSpecs
    java.util.List interceptors -> interceptors
    java.util.List networkInterceptors -> networkInterceptors
    java.net.ProxySelector proxySelector -> proxySelector
    okhttp3.CookieJar cookieJar -> cookieJar
    okhttp3.Cache cache -> cache
    okhttp3.internal.cache.InternalCache internalCache -> internalCache
    javax.net.SocketFactory socketFactory -> socketFactory
    javax.net.ssl.SSLSocketFactory sslSocketFactory -> sslSocketFactory
    okhttp3.internal.tls.CertificateChainCleaner certificateChainCleaner -> certificateChainCleaner
    javax.net.ssl.HostnameVerifier hostnameVerifier -> hostnameVerifier
    okhttp3.CertificatePinner certificatePinner -> certificatePinner
    okhttp3.Authenticator proxyAuthenticator -> proxyAuthenticator
    okhttp3.Authenticator authenticator -> authenticator
    okhttp3.ConnectionPool connectionPool -> connectionPool
    okhttp3.Dns dns -> dns
    boolean followSslRedirects -> followSslRedirects
    boolean followRedirects -> followRedirects
    boolean retryOnConnectionFailure -> retryOnConnectionFailure
    int connectTimeout -> connectTimeout
    int readTimeout -> readTimeout
    int writeTimeout -> writeTimeout
    int pingInterval -> pingInterval
    428:471:void <init>() -> <init>
    428:500:void <init>(okhttp3.OkHttpClient) -> <init>
    508:509:okhttp3.OkHttpClient$Builder connectTimeout(long,java.util.concurrent.TimeUnit) -> connectTimeout
    517:518:okhttp3.OkHttpClient$Builder readTimeout(long,java.util.concurrent.TimeUnit) -> readTimeout
    526:527:okhttp3.OkHttpClient$Builder writeTimeout(long,java.util.concurrent.TimeUnit) -> writeTimeout
    539:540:okhttp3.OkHttpClient$Builder pingInterval(long,java.util.concurrent.TimeUnit) -> pingInterval
    544:549:int checkDuration(java.lang.String,long,java.util.concurrent.TimeUnit) -> checkDuration
    558:559:okhttp3.OkHttpClient$Builder proxy(java.net.Proxy) -> proxy
    571:572:okhttp3.OkHttpClient$Builder proxySelector(java.net.ProxySelector) -> proxySelector
    582:584:okhttp3.OkHttpClient$Builder cookieJar(okhttp3.CookieJar) -> cookieJar
    589:591:void setInternalCache(okhttp3.internal.cache.InternalCache) -> setInternalCache
    595:597:okhttp3.OkHttpClient$Builder cache(okhttp3.Cache) -> cache
    606:608:okhttp3.OkHttpClient$Builder dns(okhttp3.Dns) -> dns
    620:622:okhttp3.OkHttpClient$Builder socketFactory(javax.net.SocketFactory) -> socketFactory
    635:643:okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory) -> sslSocketFactory
    678:682:okhttp3.OkHttpClient$Builder sslSocketFactory(javax.net.ssl.SSLSocketFactory,javax.net.ssl.X509TrustManager) -> sslSocketFactory
    692:694:okhttp3.OkHttpClient$Builder hostnameVerifier(javax.net.ssl.HostnameVerifier) -> hostnameVerifier
    703:705:okhttp3.OkHttpClient$Builder certificatePinner(okhttp3.CertificatePinner) -> certificatePinner
    715:717:okhttp3.OkHttpClient$Builder authenticator(okhttp3.Authenticator) -> authenticator
    727:729:okhttp3.OkHttpClient$Builder proxyAuthenticator(okhttp3.Authenticator) -> proxyAuthenticator
    738:740:okhttp3.OkHttpClient$Builder connectionPool(okhttp3.ConnectionPool) -> connectionPool
    750:751:okhttp3.OkHttpClient$Builder followSslRedirects(boolean) -> followSslRedirects
    756:757:okhttp3.OkHttpClient$Builder followRedirects(boolean) -> followRedirects
    779:780:okhttp3.OkHttpClient$Builder retryOnConnectionFailure(boolean) -> retryOnConnectionFailure
    787:789:okhttp3.OkHttpClient$Builder dispatcher(okhttp3.Dispatcher) -> dispatcher
    821:841:okhttp3.OkHttpClient$Builder protocols(java.util.List) -> protocols
    845:846:okhttp3.OkHttpClient$Builder connectionSpecs(java.util.List) -> connectionSpecs
    855:855:java.util.List interceptors() -> interceptors
    859:860:okhttp3.OkHttpClient$Builder addInterceptor(okhttp3.Interceptor) -> addInterceptor
    869:869:java.util.List networkInterceptors() -> networkInterceptors
    873:874:okhttp3.OkHttpClient$Builder addNetworkInterceptor(okhttp3.Interceptor) -> addNetworkInterceptor
    878:878:okhttp3.OkHttpClient build() -> build
okhttp3.Protocol -> okhttp3.Protocol:
# {"fileName":"Protocol.java","id":"sourceFile"}
    okhttp3.Protocol HTTP_1_0 -> HTTP_1_0
    okhttp3.Protocol HTTP_1_1 -> HTTP_1_1
    okhttp3.Protocol SPDY_3 -> SPDY_3
    okhttp3.Protocol HTTP_2 -> HTTP_2
    java.lang.String protocol -> protocol
    okhttp3.Protocol[] $VALUES -> $VALUES
    29:29:okhttp3.Protocol[] values() -> values
    29:29:okhttp3.Protocol valueOf(java.lang.String) -> valueOf
    66:68:void <init>(java.lang.String,int,java.lang.String) -> <init>
    77:81:okhttp3.Protocol get(java.lang.String) -> get
    89:89:java.lang.String toString() -> toString
    29:62:void <clinit>() -> <clinit>
okhttp3.RealCall -> okhttp3.RealCall:
# {"fileName":"RealCall.java","id":"sourceFile"}
    okhttp3.OkHttpClient client -> client
    okhttp3.internal.http.RetryAndFollowUpInterceptor retryAndFollowUpInterceptor -> retryAndFollowUpInterceptor
    okhttp3.Request originalRequest -> originalRequest
    boolean forWebSocket -> forWebSocket
    boolean executed -> executed
    44:49:void <init>(okhttp3.OkHttpClient,okhttp3.Request,boolean) -> <init>
    52:52:okhttp3.Request request() -> request
    56:67:okhttp3.Response execute() -> execute
    72:74:void captureCallStackTrace() -> captureCallStackTrace
    77:83:void enqueue(okhttp3.Callback) -> enqueue
    86:87:void cancel() -> cancel
    90:90:boolean isExecuted() -> isExecuted
    94:94:boolean isCanceled() -> isCanceled
    99:99:okhttp3.RealCall clone() -> clone
    103:103:okhttp3.internal.connection.StreamAllocation streamAllocation() -> streamAllocation
    155:157:java.lang.String toLoggableString() -> toLoggableString
    161:161:java.lang.String redactedUrl() -> redactedUrl
    166:179:okhttp3.Response getResponseWithInterceptorChain() -> getResponseWithInterceptorChain
    33:33:java.lang.Object clone() -> clone
    33:33:okhttp3.Call clone() -> clone
okhttp3.RealCall$AsyncCall -> okhttp3.RealCall$AsyncCall:
# {"fileName":"RealCall.java","id":"sourceFile"}
    okhttp3.Callback responseCallback -> responseCallback
    okhttp3.RealCall this$0 -> this$0
    109:112:void <init>(okhttp3.RealCall,okhttp3.Callback) -> <init>
    115:115:java.lang.String host() -> host
    119:119:okhttp3.Request request() -> request
    123:123:okhttp3.RealCall get() -> get
    127:147:void execute() -> execute
okhttp3.Request -> okhttp3.Request:
# {"fileName":"Request.java","id":"sourceFile"}
    okhttp3.HttpUrl url -> url
    java.lang.String method -> method
    okhttp3.Headers headers -> headers
    okhttp3.RequestBody body -> body
    java.lang.Object tag -> tag
    okhttp3.CacheControl cacheControl -> cacheControl
    36:42:void <init>(okhttp3.Request$Builder) -> <init>
    45:45:okhttp3.HttpUrl url() -> url
    49:49:java.lang.String method() -> method
    53:53:okhttp3.Headers headers() -> headers
    57:57:java.lang.String header(java.lang.String) -> header
    61:61:java.util.List headers(java.lang.String) -> headers
    65:65:okhttp3.RequestBody body() -> body
    69:69:java.lang.Object tag() -> tag
    73:73:okhttp3.Request$Builder newBuilder() -> newBuilder
    81:82:okhttp3.CacheControl cacheControl() -> cacheControl
    86:86:boolean isHttps() -> isHttps
    90:90:java.lang.String toString() -> toString
okhttp3.Request$Builder -> okhttp3.Request$Builder:
# {"fileName":"Request.java","id":"sourceFile"}
    okhttp3.HttpUrl url -> url
    java.lang.String method -> method
    okhttp3.Headers$Builder headers -> headers
    okhttp3.RequestBody body -> body
    java.lang.Object tag -> tag
    106:109:void <init>() -> <init>
    111:117:void <init>(okhttp3.Request) -> <init>
    120:122:okhttp3.Request$Builder url(okhttp3.HttpUrl) -> url
    132:143:okhttp3.Request$Builder url(java.lang.String) -> url
    153:156:okhttp3.Request$Builder url(java.net.URL) -> url
    164:165:okhttp3.Request$Builder header(java.lang.String,java.lang.String) -> header
    176:177:okhttp3.Request$Builder addHeader(java.lang.String,java.lang.String) -> addHeader
    181:182:okhttp3.Request$Builder removeHeader(java.lang.String) -> removeHeader
    187:188:okhttp3.Request$Builder headers(okhttp3.Headers) -> headers
    197:199:okhttp3.Request$Builder cacheControl(okhttp3.CacheControl) -> cacheControl
    203:203:okhttp3.Request$Builder get() -> get
    207:207:okhttp3.Request$Builder head() -> head
    211:211:okhttp3.Request$Builder post(okhttp3.RequestBody) -> post
    215:215:okhttp3.Request$Builder delete(okhttp3.RequestBody) -> delete
    219:219:okhttp3.Request$Builder delete() -> delete
    223:223:okhttp3.Request$Builder put(okhttp3.RequestBody) -> put
    227:227:okhttp3.Request$Builder patch(okhttp3.RequestBody) -> patch
    231:241:okhttp3.Request$Builder method(java.lang.String,okhttp3.RequestBody) -> method
    249:250:okhttp3.Request$Builder tag(java.lang.Object) -> tag
    254:255:okhttp3.Request build() -> build
okhttp3.RequestBody -> okhttp3.RequestBody:
# {"fileName":"RequestBody.java","id":"sourceFile"}
    27:27:void <init>() -> <init>
    okhttp3.MediaType contentType() -> contentType
    36:36:long contentLength() -> contentLength
    void writeTo(okio.BufferedSink) -> writeTo
    47:56:okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String) -> create
    61:61:okhttp3.RequestBody create(okhttp3.MediaType,okio.ByteString) -> create
    78:78:okhttp3.RequestBody create(okhttp3.MediaType,byte[]) -> create
    84:86:okhttp3.RequestBody create(okhttp3.MediaType,byte[],int,int) -> create
    103:105:okhttp3.RequestBody create(okhttp3.MediaType,java.io.File) -> create
okhttp3.RequestBody$1 -> okhttp3.RequestBody$1:
# {"fileName":"RequestBody.java","id":"sourceFile"}
    okhttp3.MediaType val$contentType -> val$contentType
    okio.ByteString val$content -> val$content
    61:61:void <init>(okhttp3.MediaType,okio.ByteString) -> <init>
    63:63:okhttp3.MediaType contentType() -> contentType
    67:67:long contentLength() -> contentLength
    71:72:void writeTo(okio.BufferedSink) -> writeTo
okhttp3.RequestBody$2 -> okhttp3.RequestBody$2:
# {"fileName":"RequestBody.java","id":"sourceFile"}
    okhttp3.MediaType val$contentType -> val$contentType
    int val$byteCount -> val$byteCount
    byte[] val$content -> val$content
    int val$offset -> val$offset
    86:86:void <init>(okhttp3.MediaType,int,byte[],int) -> <init>
    88:88:okhttp3.MediaType contentType() -> contentType
    92:92:long contentLength() -> contentLength
    96:97:void writeTo(okio.BufferedSink) -> writeTo
okhttp3.RequestBody$3 -> okhttp3.RequestBody$3:
# {"fileName":"RequestBody.java","id":"sourceFile"}
    okhttp3.MediaType val$contentType -> val$contentType
    java.io.File val$file -> val$file
    105:105:void <init>(okhttp3.MediaType,java.io.File) -> <init>
    107:107:okhttp3.MediaType contentType() -> contentType
    111:111:long contentLength() -> contentLength
    115:122:void writeTo(okio.BufferedSink) -> writeTo
okhttp3.Response -> okhttp3.Response:
# {"fileName":"Response.java","id":"sourceFile"}
    okhttp3.Request request -> request
    okhttp3.Protocol protocol -> protocol
    int code -> code
    java.lang.String message -> message
    okhttp3.Handshake handshake -> handshake
    okhttp3.Headers headers -> headers
    okhttp3.ResponseBody body -> body
    okhttp3.Response networkResponse -> networkResponse
    okhttp3.Response cacheResponse -> cacheResponse
    okhttp3.Response priorResponse -> priorResponse
    long sentRequestAtMillis -> sentRequestAtMillis
    long receivedResponseAtMillis -> receivedResponseAtMillis
    okhttp3.CacheControl cacheControl -> cacheControl
    58:71:void <init>(okhttp3.Response$Builder) -> <init>
    85:85:okhttp3.Request request() -> request
    92:92:okhttp3.Protocol protocol() -> protocol
    97:97:int code() -> code
    105:105:boolean isSuccessful() -> isSuccessful
    110:110:java.lang.String message() -> message
    118:118:okhttp3.Handshake handshake() -> handshake
    122:122:java.util.List headers(java.lang.String) -> headers
    126:126:java.lang.String header(java.lang.String) -> header
    130:131:java.lang.String header(java.lang.String,java.lang.String) -> header
    135:135:okhttp3.Headers headers() -> headers
    150:164:okhttp3.ResponseBody peekBody(long) -> peekBody
    176:176:okhttp3.ResponseBody body() -> body
    180:180:okhttp3.Response$Builder newBuilder() -> newBuilder
    185:194:boolean isRedirect() -> isRedirect
    204:204:okhttp3.Response networkResponse() -> networkResponse
    213:213:okhttp3.Response cacheResponse() -> cacheResponse
    223:223:okhttp3.Response priorResponse() -> priorResponse
    234:241:java.util.List challenges() -> challenges
    249:250:okhttp3.CacheControl cacheControl() -> cacheControl
    259:259:long sentRequestAtMillis() -> sentRequestAtMillis
    268:268:long receivedResponseAtMillis() -> receivedResponseAtMillis
    273:274:void close() -> close
    277:284:java.lang.String toString() -> toString
okhttp3.Response$Builder -> okhttp3.Response$Builder:
# {"fileName":"Response.java","id":"sourceFile"}
    okhttp3.Request request -> request
    okhttp3.Protocol protocol -> protocol
    int code -> code
    java.lang.String message -> message
    okhttp3.Handshake handshake -> handshake
    okhttp3.Headers$Builder headers -> headers
    okhttp3.ResponseBody body -> body
    okhttp3.Response networkResponse -> networkResponse
    okhttp3.Response cacheResponse -> cacheResponse
    okhttp3.Response priorResponse -> priorResponse
    long sentRequestAtMillis -> sentRequestAtMillis
    long receivedResponseAtMillis -> receivedResponseAtMillis
    291:304:void <init>() -> <init>
    291:319:void <init>(okhttp3.Response) -> <init>
    322:323:okhttp3.Response$Builder request(okhttp3.Request) -> request
    327:328:okhttp3.Response$Builder protocol(okhttp3.Protocol) -> protocol
    332:333:okhttp3.Response$Builder code(int) -> code
    337:338:okhttp3.Response$Builder message(java.lang.String) -> message
    342:343:okhttp3.Response$Builder handshake(okhttp3.Handshake) -> handshake
    351:352:okhttp3.Response$Builder header(java.lang.String,java.lang.String) -> header
    360:361:okhttp3.Response$Builder addHeader(java.lang.String,java.lang.String) -> addHeader
    365:366:okhttp3.Response$Builder removeHeader(java.lang.String) -> removeHeader
    371:372:okhttp3.Response$Builder headers(okhttp3.Headers) -> headers
    376:377:okhttp3.Response$Builder body(okhttp3.ResponseBody) -> body
    381:383:okhttp3.Response$Builder networkResponse(okhttp3.Response) -> networkResponse
    387:389:okhttp3.Response$Builder cacheResponse(okhttp3.Response) -> cacheResponse
    393:402:void checkSupportResponse(java.lang.String,okhttp3.Response) -> checkSupportResponse
    405:407:okhttp3.Response$Builder priorResponse(okhttp3.Response) -> priorResponse
    411:414:void checkPriorResponse(okhttp3.Response) -> checkPriorResponse
    417:418:okhttp3.Response$Builder sentRequestAtMillis(long) -> sentRequestAtMillis
    422:423:okhttp3.Response$Builder receivedResponseAtMillis(long) -> receivedResponseAtMillis
    427:430:okhttp3.Response build() -> build
okhttp3.ResponseBody -> okhttp3.ResponseBody:
# {"fileName":"ResponseBody.java","id":"sourceFile"}
    java.io.Reader reader -> reader
    101:101:void <init>() -> <init>
    okhttp3.MediaType contentType() -> contentType
    long contentLength() -> contentLength
    114:114:java.io.InputStream byteStream() -> byteStream
    okio.BufferedSource source() -> source
    127:146:byte[] bytes() -> bytes
    156:157:java.io.Reader charStream() -> charStream
    171:176:java.lang.String string() -> string
    181:182:java.nio.charset.Charset charset() -> charset
    186:187:void close() -> close
    194:203:okhttp3.ResponseBody create(okhttp3.MediaType,java.lang.String) -> create
    208:209:okhttp3.ResponseBody create(okhttp3.MediaType,byte[]) -> create
    215:216:okhttp3.ResponseBody create(okhttp3.MediaType,long,okio.BufferedSource) -> create
okhttp3.ResponseBody$1 -> okhttp3.ResponseBody$1:
# {"fileName":"ResponseBody.java","id":"sourceFile"}
    okhttp3.MediaType val$contentType -> val$contentType
    long val$contentLength -> val$contentLength
    okio.BufferedSource val$content -> val$content
    216:216:void <init>(okhttp3.MediaType,long,okio.BufferedSource) -> <init>
    218:218:okhttp3.MediaType contentType() -> contentType
    222:222:long contentLength() -> contentLength
    226:226:okio.BufferedSource source() -> source
okhttp3.ResponseBody$BomAwareReader -> okhttp3.ResponseBody$BomAwareReader:
# {"fileName":"ResponseBody.java","id":"sourceFile"}
    okio.BufferedSource source -> source
    java.nio.charset.Charset charset -> charset
    boolean closed -> closed
    java.io.Reader delegate -> delegate
    238:241:void <init>(okio.BufferedSource,java.nio.charset.Charset) -> <init>
    244:251:int read(char[],int,int) -> read
    255:261:void close() -> close
okhttp3.Route -> okhttp3.Route:
# {"fileName":"Route.java","id":"sourceFile"}
    okhttp3.Address address -> address
    java.net.Proxy proxy -> proxy
    java.net.InetSocketAddress inetSocketAddress -> inetSocketAddress
    41:54:void <init>(okhttp3.Address,java.net.Proxy,java.net.InetSocketAddress) -> <init>
    57:57:okhttp3.Address address() -> address
    67:67:java.net.Proxy proxy() -> proxy
    71:71:java.net.InetSocketAddress socketAddress() -> socketAddress
    79:79:boolean requiresTunnel() -> requiresTunnel
    83:89:boolean equals(java.lang.Object) -> equals
    93:97:int hashCode() -> hashCode
    101:101:java.lang.String toString() -> toString
okhttp3.TlsVersion -> okhttp3.TlsVersion:
# {"fileName":"TlsVersion.java","id":"sourceFile"}
    okhttp3.TlsVersion TLS_1_3 -> TLS_1_3
    okhttp3.TlsVersion TLS_1_2 -> TLS_1_2
    okhttp3.TlsVersion TLS_1_1 -> TLS_1_1
    okhttp3.TlsVersion TLS_1_0 -> TLS_1_0
    okhttp3.TlsVersion SSL_3_0 -> SSL_3_0
    java.lang.String javaName -> javaName
    okhttp3.TlsVersion[] $VALUES -> $VALUES
    22:22:okhttp3.TlsVersion[] values() -> values
    22:22:okhttp3.TlsVersion valueOf(java.lang.String) -> valueOf
    32:34:void <init>(java.lang.String,int,java.lang.String) -> <init>
    37:49:okhttp3.TlsVersion forJavaName(java.lang.String) -> forJavaName
    53:53:java.lang.String javaName() -> javaName
    22:27:void <clinit>() -> <clinit>
okhttp3.WebSocket -> okhttp3.WebSocket:
# {"fileName":"WebSocket.java","id":"sourceFile"}
    okhttp3.Request request() -> request
    long queueSize() -> queueSize
    boolean send(java.lang.String) -> send
    boolean send(okio.ByteString) -> send
    boolean close(int,java.lang.String) -> close
    void cancel() -> cancel
okhttp3.WebSocket$Factory -> okhttp3.WebSocket$Factory:
# {"fileName":"WebSocket.java","id":"sourceFile"}
    okhttp3.WebSocket newWebSocket(okhttp3.Request,okhttp3.WebSocketListener) -> newWebSocket
okhttp3.WebSocketListener -> okhttp3.WebSocketListener:
# {"fileName":"WebSocketListener.java","id":"sourceFile"}
    20:20:void <init>() -> <init>
    26:26:void onOpen(okhttp3.WebSocket,okhttp3.Response) -> onOpen
    30:30:void onMessage(okhttp3.WebSocket,java.lang.String) -> onMessage
    34:34:void onMessage(okhttp3.WebSocket,okio.ByteString) -> onMessage
    38:38:void onClosing(okhttp3.WebSocket,int,java.lang.String) -> onClosing
    45:45:void onClosed(okhttp3.WebSocket,int,java.lang.String) -> onClosed
    53:53:void onFailure(okhttp3.WebSocket,java.lang.Throwable,okhttp3.Response) -> onFailure
okhttp3.internal.Internal -> okhttp3.internal.Internal:
# {"fileName":"Internal.java","id":"sourceFile"}
    okhttp3.internal.Internal instance -> instance
    40:40:void <init>() -> <init>
    44:45:void initializeInstanceForTests() -> initializeInstanceForTests
    void addLenient(okhttp3.Headers$Builder,java.lang.String) -> addLenient
    void addLenient(okhttp3.Headers$Builder,java.lang.String,java.lang.String) -> addLenient
    void setCache(okhttp3.OkHttpClient$Builder,okhttp3.internal.cache.InternalCache) -> setCache
    okhttp3.internal.connection.RealConnection get(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.connection.StreamAllocation) -> get
    java.net.Socket deduplicate(okhttp3.ConnectionPool,okhttp3.Address,okhttp3.internal.connection.StreamAllocation) -> deduplicate
    void put(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection) -> put
    boolean connectionBecameIdle(okhttp3.ConnectionPool,okhttp3.internal.connection.RealConnection) -> connectionBecameIdle
    okhttp3.internal.connection.RouteDatabase routeDatabase(okhttp3.ConnectionPool) -> routeDatabase
    int code(okhttp3.Response$Builder) -> code
    void apply(okhttp3.ConnectionSpec,javax.net.ssl.SSLSocket,boolean) -> apply
    okhttp3.HttpUrl getHttpUrlChecked(java.lang.String) -> getHttpUrlChecked
    okhttp3.internal.connection.StreamAllocation streamAllocation(okhttp3.Call) -> streamAllocation
    okhttp3.Call newWebSocketCall(okhttp3.OkHttpClient,okhttp3.Request) -> newWebSocketCall
okhttp3.internal.NamedRunnable -> okhttp3.internal.NamedRunnable:
# {"fileName":"NamedRunnable.java","id":"sourceFile"}
    java.lang.String name -> name
    24:26:void <init>(java.lang.String,java.lang.Object[]) -> <init>
    29:36:void run() -> run
    void execute() -> execute
okhttp3.internal.Util -> okhttp3.internal.Util:
# {"fileName":"Util.java","id":"sourceFile"}
    byte[] EMPTY_BYTE_ARRAY -> EMPTY_BYTE_ARRAY
    java.lang.String[] EMPTY_STRING_ARRAY -> EMPTY_STRING_ARRAY
    okhttp3.ResponseBody EMPTY_RESPONSE -> EMPTY_RESPONSE
    okhttp3.RequestBody EMPTY_REQUEST -> EMPTY_REQUEST
    okio.ByteString UTF_8_BOM -> UTF_8_BOM
    okio.ByteString UTF_16_BE_BOM -> UTF_16_BE_BOM
    okio.ByteString UTF_16_LE_BOM -> UTF_16_LE_BOM
    okio.ByteString UTF_32_BE_BOM -> UTF_32_BE_BOM
    okio.ByteString UTF_32_LE_BOM -> UTF_32_LE_BOM
    java.nio.charset.Charset UTF_8 -> UTF_8
    java.nio.charset.Charset UTF_16_BE -> UTF_16_BE
    java.nio.charset.Charset UTF_16_LE -> UTF_16_LE
    java.nio.charset.Charset UTF_32_BE -> UTF_32_BE
    java.nio.charset.Charset UTF_32_LE -> UTF_32_LE
    java.util.TimeZone UTC -> UTC
    java.util.regex.Pattern VERIFY_AS_IP_ADDRESS -> VERIFY_AS_IP_ADDRESS
    79:80:void <init>() -> <init>
    83:86:void checkOffsetAndCount(long,long,long) -> checkOffsetAndCount
    90:90:boolean equal(java.lang.Object,java.lang.Object) -> equal
    98:106:void closeQuietly(java.io.Closeable) -> closeQuietly
    113:123:void closeQuietly(java.net.Socket) -> closeQuietly
    130:138:void closeQuietly(java.net.ServerSocket) -> closeQuietly
    147:149:boolean discard(okio.Source,int,java.util.concurrent.TimeUnit) -> discard
    158:175:boolean skipAll(okio.Source,int,java.util.concurrent.TimeUnit) -> skipAll
    182:182:java.util.List immutableList(java.util.List) -> immutableList
    187:187:java.util.List immutableList(java.lang.Object[]) -> immutableList
    191:191:java.util.concurrent.ThreadFactory threadFactory(java.lang.String,boolean) -> threadFactory
    206:207:java.lang.Object[] intersect(java.lang.Class,java.lang.Object[],java.lang.Object[]) -> intersect
    215:224:java.util.List intersect(java.lang.Object[],java.lang.Object[]) -> intersect
    228:232:java.lang.String hostHeader(okhttp3.HttpUrl,boolean) -> hostHeader
    238:250:java.lang.String toHumanReadableAscii(java.lang.String) -> toHumanReadableAscii
    258:259:boolean isAndroidGetsocknameError(java.lang.AssertionError) -> isAndroidGetsocknameError
    263:266:int indexOf(java.lang.Object[],java.lang.Object) -> indexOf
    270:273:java.lang.String[] concat(java.lang.String[],java.lang.String) -> concat
    281:293:int skipLeadingAsciiWhitespace(java.lang.String,int,int) -> skipLeadingAsciiWhitespace
    301:313:int skipTrailingAsciiWhitespace(java.lang.String,int,int) -> skipTrailingAsciiWhitespace
    318:320:java.lang.String trimSubstring(java.lang.String,int,int) -> trimSubstring
    328:331:int delimiterOffset(java.lang.String,int,int,java.lang.String) -> delimiterOffset
    339:342:int delimiterOffset(java.lang.String,int,int,char) -> delimiterOffset
    353:363:java.lang.String domainToAscii(java.lang.String) -> domainToAscii
    368:383:boolean containsInvalidHostnameAsciiCodes(java.lang.String) -> containsInvalidHostnameAsciiCodes
    392:398:int indexOfControlOrNonAscii(java.lang.String) -> indexOfControlOrNonAscii
    403:403:boolean verifyAsIpAddress(java.lang.String) -> verifyAsIpAddress
    408:408:java.lang.String format(java.lang.String,java.lang.Object[]) -> format
    412:432:java.nio.charset.Charset bomAwareCharset(okio.BufferedSource,java.nio.charset.Charset) -> bomAwareCharset
    45:76:void <clinit>() -> <clinit>
okhttp3.internal.Util$1 -> okhttp3.internal.Util$1:
# {"fileName":"Util.java","id":"sourceFile"}
    java.lang.String val$name -> val$name
    boolean val$daemon -> val$daemon
    191:191:void <init>(java.lang.String,boolean) -> <init>
    193:195:java.lang.Thread newThread(java.lang.Runnable) -> newThread
okhttp3.internal.Version -> okhttp3.internal.Version:
# {"fileName":"Version.java","id":"sourceFile"}
    20:20:java.lang.String userAgent() -> userAgent
    23:24:void <init>() -> <init>
okhttp3.internal.cache.CacheInterceptor -> okhttp3.internal.cache.CacheInterceptor:
# {"fileName":"CacheInterceptor.java","id":"sourceFile"}
    okhttp3.internal.cache.InternalCache cache -> cache
    48:50:void <init>(okhttp3.internal.cache.InternalCache) -> <init>
    53:133:okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
    137:138:okhttp3.Response stripBody(okhttp3.Response) -> stripBody
    144:159:okhttp3.internal.cache.CacheRequest maybeCache(okhttp3.Response,okhttp3.Request,okhttp3.internal.cache.InternalCache) -> maybeCache
    170:221:okhttp3.Response cacheWritingResponse(okhttp3.internal.cache.CacheRequest,okhttp3.Response) -> cacheWritingResponse
    226:249:okhttp3.Headers combine(okhttp3.Headers,okhttp3.Headers) -> combine
    257:264:boolean isEndToEnd(java.lang.String) -> isEndToEnd
okhttp3.internal.cache.CacheInterceptor$1 -> okhttp3.internal.cache.CacheInterceptor$1:
# {"fileName":"CacheInterceptor.java","id":"sourceFile"}
    boolean cacheRequestClosed -> cacheRequestClosed
    okio.BufferedSource val$source -> val$source
    okhttp3.internal.cache.CacheRequest val$cacheRequest -> val$cacheRequest
    okio.BufferedSink val$cacheBody -> val$cacheBody
    okhttp3.internal.cache.CacheInterceptor this$0 -> this$0
    177:177:void <init>(okhttp3.internal.cache.CacheInterceptor,okio.BufferedSource,okhttp3.internal.cache.CacheRequest,okio.BufferedSink) -> <init>
    183:202:long read(okio.Buffer,long) -> read
    206:206:okio.Timeout timeout() -> timeout
    210:216:void close() -> close
okhttp3.internal.cache.CacheRequest -> okhttp3.internal.cache.CacheRequest:
# {"fileName":"CacheRequest.java","id":"sourceFile"}
    okio.Sink body() -> body
    void abort() -> abort
okhttp3.internal.cache.CacheStrategy -> okhttp3.internal.cache.CacheStrategy:
# {"fileName":"CacheStrategy.java","id":"sourceFile"}
    okhttp3.Request networkRequest -> networkRequest
    okhttp3.Response cacheResponse -> cacheResponse
    56:59:void <init>(okhttp3.Request,okhttp3.Response) -> <init>
    65:99:boolean isCacheable(okhttp3.Response,okhttp3.Request) -> isCacheable
okhttp3.internal.cache.CacheStrategy$Factory -> okhttp3.internal.cache.CacheStrategy$Factory:
# {"fileName":"CacheStrategy.java","id":"sourceFile"}
    long nowMillis -> nowMillis
    okhttp3.Request request -> request
    okhttp3.Response cacheResponse -> cacheResponse
    java.util.Date servedDate -> servedDate
    java.lang.String servedDateString -> servedDateString
    java.util.Date lastModified -> lastModified
    java.lang.String lastModifiedString -> lastModifiedString
    java.util.Date expires -> expires
    long sentRequestMillis -> sentRequestMillis
    long receivedResponseMillis -> receivedResponseMillis
    java.lang.String etag -> etag
    int ageSeconds -> ageSeconds
    137:166:void <init>(long,okhttp3.Request,okhttp3.Response) -> <init>
    172:179:okhttp3.internal.cache.CacheStrategy get() -> get
    185:259:okhttp3.internal.cache.CacheStrategy getCandidate() -> getCandidate
    267:288:long computeFreshnessLifetime() -> computeFreshnessLifetime
    296:304:long cacheResponseAge() -> cacheResponseAge
    312:312:boolean isFreshnessLifetimeHeuristic() -> isFreshnessLifetimeHeuristic
    321:321:boolean hasConditions(okhttp3.Request) -> hasConditions
okhttp3.internal.cache.DiskLruCache -> okhttp3.internal.cache.DiskLruCache:
# {"fileName":"DiskLruCache.java","id":"sourceFile"}
    java.lang.String JOURNAL_FILE -> JOURNAL_FILE
    java.lang.String JOURNAL_FILE_TEMP -> JOURNAL_FILE_TEMP
    java.lang.String JOURNAL_FILE_BACKUP -> JOURNAL_FILE_BACKUP
    java.lang.String MAGIC -> MAGIC
    java.lang.String VERSION_1 -> VERSION_1
    long ANY_SEQUENCE_NUMBER -> ANY_SEQUENCE_NUMBER
    java.util.regex.Pattern LEGAL_KEY_PATTERN -> LEGAL_KEY_PATTERN
    java.lang.String CLEAN -> CLEAN
    java.lang.String DIRTY -> DIRTY
    java.lang.String REMOVE -> REMOVE
    java.lang.String READ -> READ
    okhttp3.internal.io.FileSystem fileSystem -> fileSystem
    java.io.File directory -> directory
    java.io.File journalFile -> journalFile
    java.io.File journalFileTmp -> journalFileTmp
    java.io.File journalFileBackup -> journalFileBackup
    int appVersion -> appVersion
    long maxSize -> maxSize
    int valueCount -> valueCount
    long size -> size
    okio.BufferedSink journalWriter -> journalWriter
    java.util.LinkedHashMap lruEntries -> lruEntries
    int redundantOpCount -> redundantOpCount
    boolean hasJournalErrors -> hasJournalErrors
    boolean initialized -> initialized
    boolean closed -> closed
    boolean mostRecentTrimFailed -> mostRecentTrimFailed
    boolean mostRecentRebuildFailed -> mostRecentRebuildFailed
    long nextSequenceNumber -> nextSequenceNumber
    java.util.concurrent.Executor executor -> executor
    java.lang.Runnable cleanupRunnable -> cleanupRunnable
    boolean $assertionsDisabled -> $assertionsDisabled
    147:205:void <init>(okhttp3.internal.io.FileSystem,java.io.File,int,int,long,java.util.concurrent.Executor) -> <init>
    208:248:void initialize() -> initialize
    260:271:okhttp3.internal.cache.DiskLruCache create(okhttp3.internal.io.FileSystem,java.io.File,int,int,long) -> create
    275:311:void readJournal() -> readJournal
    314:321:okio.BufferedSink newJournalWriter() -> newJournalWriter
    325:361:void readJournalLine(java.lang.String) -> readJournalLine
    368:384:void processJournal() -> processJournal
    391:428:void rebuildJournal() -> rebuildJournal
    435:451:okhttp3.internal.cache.DiskLruCache$Snapshot get(java.lang.String) -> get
    458:458:okhttp3.internal.cache.DiskLruCache$Editor edit(java.lang.String) -> edit
    462:498:okhttp3.internal.cache.DiskLruCache$Editor edit(java.lang.String,long) -> edit
    503:503:java.io.File getDirectory() -> getDirectory
    510:510:long getMaxSize() -> getMaxSize
    518:522:void setMaxSize(long) -> setMaxSize
    529:530:long size() -> size
    534:591:void completeEdit(okhttp3.internal.cache.DiskLruCache$Editor,boolean) -> completeEdit
    598:600:boolean journalRebuildRequired() -> journalRebuildRequired
    610:618:boolean remove(java.lang.String) -> remove
    622:640:boolean removeEntry(okhttp3.internal.cache.DiskLruCache$Entry) -> removeEntry
    645:645:boolean isClosed() -> isClosed
    649:652:void checkNotClosed() -> checkNotClosed
    656:661:void flush() -> flush
    665:679:void close() -> close
    682:687:void trimToSize() -> trimToSize
    694:696:void delete() -> delete
    703:709:void evictAll() -> evictAll
    712:717:void validateKey(java.lang.String) -> validateKey
    735:736:java.util.Iterator snapshots() -> snapshots
    86:93:void <clinit>() -> <clinit>
okhttp3.internal.cache.DiskLruCache$1 -> okhttp3.internal.cache.DiskLruCache$1:
# {"fileName":"DiskLruCache.java","id":"sourceFile"}
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    168:168:void <init>(okhttp3.internal.cache.DiskLruCache) -> <init>
    170:191:void run() -> run
okhttp3.internal.cache.DiskLruCache$2 -> okhttp3.internal.cache.DiskLruCache$2:
# {"fileName":"DiskLruCache.java","id":"sourceFile"}
    boolean $assertionsDisabled -> $assertionsDisabled
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    315:315:void <init>(okhttp3.internal.cache.DiskLruCache,okio.Sink) -> <init>
    317:319:void onException(java.io.IOException) -> onException
    315:315:void <clinit>() -> <clinit>
okhttp3.internal.cache.DiskLruCache$3 -> okhttp3.internal.cache.DiskLruCache$3:
# {"fileName":"DiskLruCache.java","id":"sourceFile"}
    java.util.Iterator delegate -> delegate
    okhttp3.internal.cache.DiskLruCache$Snapshot nextSnapshot -> nextSnapshot
    okhttp3.internal.cache.DiskLruCache$Snapshot removeSnapshot -> removeSnapshot
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    736:738:void <init>(okhttp3.internal.cache.DiskLruCache) -> <init>
    747:762:boolean hasNext() -> hasNext
    766:769:okhttp3.internal.cache.DiskLruCache$Snapshot next() -> next
    773:782:void remove() -> remove
    736:736:java.lang.Object next() -> next
okhttp3.internal.cache.DiskLruCache$Editor -> okhttp3.internal.cache.DiskLruCache$Editor:
# {"fileName":"DiskLruCache.java","id":"sourceFile"}
    okhttp3.internal.cache.DiskLruCache$Entry entry -> entry
    boolean[] written -> written
    boolean done -> done
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    835:838:void <init>(okhttp3.internal.cache.DiskLruCache,okhttp3.internal.cache.DiskLruCache$Entry) -> <init>
    847:857:void detach() -> detach
    864:876:okio.Source newSource(int) -> newSource
    885:909:okio.Sink newSink(int) -> newSink
    917:926:void commit() -> commit
    933:942:void abort() -> abort
    945:953:void abortUnlessCommitted() -> abortUnlessCommitted
okhttp3.internal.cache.DiskLruCache$Editor$1 -> okhttp3.internal.cache.DiskLruCache$Editor$1:
# {"fileName":"DiskLruCache.java","id":"sourceFile"}
    okhttp3.internal.cache.DiskLruCache$Editor this$1 -> this$1
    902:902:void <init>(okhttp3.internal.cache.DiskLruCache$Editor,okio.Sink) -> <init>
    904:907:void onException(java.io.IOException) -> onException
okhttp3.internal.cache.DiskLruCache$Entry -> okhttp3.internal.cache.DiskLruCache$Entry:
# {"fileName":"DiskLruCache.java","id":"sourceFile"}
    java.lang.String key -> key
    long[] lengths -> lengths
    java.io.File[] cleanFiles -> cleanFiles
    java.io.File[] dirtyFiles -> dirtyFiles
    boolean readable -> readable
    okhttp3.internal.cache.DiskLruCache$Editor currentEditor -> currentEditor
    long sequenceNumber -> sequenceNumber
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    973:990:void <init>(okhttp3.internal.cache.DiskLruCache,java.lang.String) -> <init>
    994:1005:void setLengths(java.lang.String[]) -> setLengths
    1009:1012:void writeLengths(okio.BufferedSink) -> writeLengths
    1015:1015:java.io.IOException invalidLengths(java.lang.String[]) -> invalidLengths
    1024:1048:okhttp3.internal.cache.DiskLruCache$Snapshot snapshot() -> snapshot
okhttp3.internal.cache.DiskLruCache$Snapshot -> okhttp3.internal.cache.DiskLruCache$Snapshot:
# {"fileName":"DiskLruCache.java","id":"sourceFile"}
    java.lang.String key -> key
    long sequenceNumber -> sequenceNumber
    okio.Source[] sources -> sources
    long[] lengths -> lengths
    okhttp3.internal.cache.DiskLruCache this$0 -> this$0
    793:798:void <init>(okhttp3.internal.cache.DiskLruCache,java.lang.String,long,okio.Source[],long[]) -> <init>
    801:801:java.lang.String key() -> key
    809:809:okhttp3.internal.cache.DiskLruCache$Editor edit() -> edit
    814:814:okio.Source getSource(int) -> getSource
    819:819:long getLength(int) -> getLength
    823:826:void close() -> close
    787:787:java.lang.String access$000(okhttp3.internal.cache.DiskLruCache$Snapshot) -> access$000
okhttp3.internal.cache.FaultHidingSink -> okhttp3.internal.cache.FaultHidingSink:
# {"fileName":"FaultHidingSink.java","id":"sourceFile"}
    boolean hasErrors -> hasErrors
    28:29:void <init>(okio.Sink) -> <init>
    32:42:void write(okio.Buffer,long) -> write
    45:52:void flush() -> flush
    55:62:void close() -> close
    65:65:void onException(java.io.IOException) -> onException
okhttp3.internal.cache.InternalCache -> okhttp3.internal.cache.InternalCache:
# {"fileName":"InternalCache.java","id":"sourceFile"}
    okhttp3.Response get(okhttp3.Request) -> get
    okhttp3.internal.cache.CacheRequest put(okhttp3.Response) -> put
    void remove(okhttp3.Request) -> remove
    void update(okhttp3.Response,okhttp3.Response) -> update
    void trackConditionalCacheHit() -> trackConditionalCacheHit
    void trackResponse(okhttp3.internal.cache.CacheStrategy) -> trackResponse
okhttp3.internal.cache2.FileOperator -> okhttp3.internal.cache2.FileOperator:
# {"fileName":"FileOperator.java","id":"sourceFile"}
    int BUFFER_SIZE -> BUFFER_SIZE
    byte[] byteArray -> byteArray
    java.nio.ByteBuffer byteBuffer -> byteBuffer
    java.nio.channels.FileChannel fileChannel -> fileChannel
    40:46:void <init>(java.nio.channels.FileChannel) -> <init>
    50:70:void write(long,okio.Buffer,long) -> write
    78:95:void read(long,okio.Buffer,long) -> read
okhttp3.internal.cache2.Relay -> okhttp3.internal.cache2.Relay:
# {"fileName":"Relay.java","id":"sourceFile"}
    int SOURCE_UPSTREAM -> SOURCE_UPSTREAM
    int SOURCE_FILE -> SOURCE_FILE
    okio.ByteString PREFIX_CLEAN -> PREFIX_CLEAN
    okio.ByteString PREFIX_DIRTY -> PREFIX_DIRTY
    long FILE_HEADER_SIZE -> FILE_HEADER_SIZE
    java.io.RandomAccessFile file -> file
    java.lang.Thread upstreamReader -> upstreamReader
    okio.Source upstream -> upstream
    okio.Buffer upstreamBuffer -> upstreamBuffer
    long upstreamPos -> upstreamPos
    boolean complete -> complete
    okio.ByteString metadata -> metadata
    okio.Buffer buffer -> buffer
    long bufferMaxSize -> bufferMaxSize
    int sourceCount -> sourceCount
    79:114:void <init>(java.io.RandomAccessFile,okio.Source,long,okio.ByteString,long) -> <init>
    126:133:okhttp3.internal.cache2.Relay edit(java.io.File,okio.Source,okio.ByteString,long) -> edit
    144:161:okhttp3.internal.cache2.Relay read(java.io.File) -> read
    166:174:void writeHeader(okio.ByteString,long,long) -> writeHeader
    177:182:void writeMetadata(long) -> writeMetadata
    186:200:void commit(long) -> commit
    203:203:boolean isClosed() -> isClosed
    207:207:okio.ByteString metadata() -> metadata
    216:221:okio.Source newSource() -> newSource
    45:46:void <clinit>() -> <clinit>
okhttp3.internal.cache2.Relay$RelaySource -> okhttp3.internal.cache2.Relay$RelaySource:
# {"fileName":"Relay.java","id":"sourceFile"}
    okio.Timeout timeout -> timeout
    okhttp3.internal.cache2.FileOperator fileOperator -> fileOperator
    long sourcePos -> sourcePos
    okhttp3.internal.cache2.Relay this$0 -> this$0
    224:228:void <init>(okhttp3.internal.cache2.Relay) -> <init>
    252:335:long read(okio.Buffer,long) -> read
    340:340:okio.Timeout timeout() -> timeout
    344:359:void close() -> close
okhttp3.internal.connection.ConnectInterceptor -> okhttp3.internal.connection.ConnectInterceptor:
# {"fileName":"ConnectInterceptor.java","id":"sourceFile"}
    okhttp3.OkHttpClient client -> client
    31:33:void <init>(okhttp3.OkHttpClient) -> <init>
    36:45:okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
okhttp3.internal.connection.ConnectionSpecSelector -> okhttp3.internal.connection.ConnectionSpecSelector:
# {"fileName":"ConnectionSpecSelector.java","id":"sourceFile"}
    java.util.List connectionSpecs -> connectionSpecs
    int nextModeIndex -> nextModeIndex
    boolean isFallbackPossible -> isFallbackPossible
    boolean isFallback -> isFallback
    44:47:void <init>(java.util.List) -> <init>
    56:80:okhttp3.ConnectionSpec configureSecureSocket(javax.net.ssl.SSLSocket) -> configureSecureSocket
    92:126:boolean connectionFailed(java.io.IOException) -> connectionFailed
    135:140:boolean isFallbackPossible(javax.net.ssl.SSLSocket) -> isFallbackPossible
okhttp3.internal.connection.RealConnection -> okhttp3.internal.connection.RealConnection:
# {"fileName":"RealConnection.java","id":"sourceFile"}
    okhttp3.ConnectionPool connectionPool -> connectionPool
    okhttp3.Route route -> route
    java.net.Socket rawSocket -> rawSocket
    java.net.Socket socket -> socket
    okhttp3.Handshake handshake -> handshake
    okhttp3.Protocol protocol -> protocol
    okhttp3.internal.http2.Http2Connection http2Connection -> http2Connection
    okio.BufferedSource source -> source
    okio.BufferedSink sink -> sink
    boolean noNewStreams -> noNewStreams
    int successCount -> successCount
    int allocationLimit -> allocationLimit
    java.util.List allocations -> allocations
    long idleAtNanos -> idleAtNanos
    100:111:void <init>(okhttp3.ConnectionPool,okhttp3.Route) -> <init>
    115:118:okhttp3.internal.connection.RealConnection testConnection(okhttp3.ConnectionPool,okhttp3.Route,java.net.Socket,long) -> testConnection
    123:178:void connect(int,int,int,boolean) -> connect
    186:207:void connectTunnel(int,int,int) -> connectTunnel
    211:228:void connectSocket(int,int) -> connectSocket
    231:247:void establishProtocol(okhttp3.internal.connection.ConnectionSpecSelector) -> establishProtocol
    250:306:void connectTls(okhttp3.internal.connection.ConnectionSpecSelector) -> connectTls
    315:359:okhttp3.Request createTunnel(int,int,okhttp3.Request,okhttp3.HttpUrl) -> createTunnel
    368:373:okhttp3.Request createTunnelRequest() -> createTunnelRequest
    378:379:boolean isEligible(okhttp3.Address) -> isEligible
    385:391:okhttp3.internal.http.HttpCodec newCodec(okhttp3.OkHttpClient,okhttp3.internal.connection.StreamAllocation) -> newCodec
    396:396:okhttp3.internal.ws.RealWebSocket$Streams newWebSocketStreams(okhttp3.internal.connection.StreamAllocation) -> newWebSocketStreams
    404:404:okhttp3.Route route() -> route
    409:410:void cancel() -> cancel
    413:413:java.net.Socket socket() -> socket
    418:445:boolean isHealthy(boolean) -> isHealthy
    450:451:void onStream(okhttp3.internal.http2.Http2Stream) -> onStream
    455:458:void onSettings(okhttp3.internal.http2.Http2Connection) -> onSettings
    461:461:okhttp3.Handshake handshake() -> handshake
    469:469:boolean isMultiplexed() -> isMultiplexed
    473:473:okhttp3.Protocol protocol() -> protocol
    477:484:java.lang.String toString() -> toString
okhttp3.internal.connection.RealConnection$1 -> okhttp3.internal.connection.RealConnection$1:
# {"fileName":"RealConnection.java","id":"sourceFile"}
    okhttp3.internal.connection.StreamAllocation val$streamAllocation -> val$streamAllocation
    okhttp3.internal.connection.RealConnection this$0 -> this$0
    396:396:void <init>(okhttp3.internal.connection.RealConnection,boolean,okio.BufferedSource,okio.BufferedSink,okhttp3.internal.connection.StreamAllocation) -> <init>
    398:399:void close() -> close
okhttp3.internal.connection.RouteDatabase -> okhttp3.internal.connection.RouteDatabase:
# {"fileName":"RouteDatabase.java","id":"sourceFile"}
    java.util.Set failedRoutes -> failedRoutes
    28:29:void <init>() -> <init>
    33:34:void failed(okhttp3.Route) -> failed
    38:39:void connected(okhttp3.Route) -> connected
    43:43:boolean shouldPostpone(okhttp3.Route) -> shouldPostpone
okhttp3.internal.connection.RouteException -> okhttp3.internal.connection.RouteException:
# {"fileName":"RouteException.java","id":"sourceFile"}
    java.lang.reflect.Method addSuppressedExceptionMethod -> addSuppressedExceptionMethod
    java.io.IOException lastException -> lastException
    42:44:void <init>(java.io.IOException) -> <init>
    47:47:java.io.IOException getLastConnectException() -> getLastConnectException
    51:53:void addConnectException(java.io.IOException) -> addConnectException
    56:62:void addSuppressedIfPossible(java.io.IOException,java.io.IOException) -> addSuppressedIfPossible
    32:37:void <clinit>() -> <clinit>
okhttp3.internal.connection.RouteSelector -> okhttp3.internal.connection.RouteSelector:
# {"fileName":"RouteSelector.java","id":"sourceFile"}
    okhttp3.Address address -> address
    okhttp3.internal.connection.RouteDatabase routeDatabase -> routeDatabase
    java.net.Proxy lastProxy -> lastProxy
    java.net.InetSocketAddress lastInetSocketAddress -> lastInetSocketAddress
    java.util.List proxies -> proxies
    int nextProxyIndex -> nextProxyIndex
    java.util.List inetSocketAddresses -> inetSocketAddresses
    int nextInetSocketAddressIndex -> nextInetSocketAddressIndex
    java.util.List postponedRoutes -> postponedRoutes
    46:61:void <init>(okhttp3.Address,okhttp3.internal.connection.RouteDatabase) -> <init>
    67:69:boolean hasNext() -> hasNext
    74:92:okhttp3.Route next() -> next
    100:107:void connectFailed(okhttp3.Route,java.io.IOException) -> connectFailed
    111:122:void resetNextProxy(okhttp3.HttpUrl,java.net.Proxy) -> resetNextProxy
    126:126:boolean hasNextProxy() -> hasNextProxy
    131:137:java.net.Proxy nextProxy() -> nextProxy
    143:178:void resetNextInetSocketAddress(java.net.Proxy) -> resetNextInetSocketAddress
    186:195:java.lang.String getHostString(java.net.InetSocketAddress) -> getHostString
    200:200:boolean hasNextInetSocketAddress() -> hasNextInetSocketAddress
    205:209:java.net.InetSocketAddress nextInetSocketAddress() -> nextInetSocketAddress
    214:214:boolean hasNextPostponed() -> hasNextPostponed
    219:219:okhttp3.Route nextPostponed() -> nextPostponed
okhttp3.internal.connection.StreamAllocation -> okhttp3.internal.connection.StreamAllocation:
# {"fileName":"StreamAllocation.java","id":"sourceFile"}
    okhttp3.Address address -> address
    okhttp3.Route route -> route
    okhttp3.ConnectionPool connectionPool -> connectionPool
    java.lang.Object callStackTrace -> callStackTrace
    okhttp3.internal.connection.RouteSelector routeSelector -> routeSelector
    int refusedStreamCount -> refusedStreamCount
    okhttp3.internal.connection.RealConnection connection -> connection
    boolean released -> released
    boolean canceled -> canceled
    okhttp3.internal.http.HttpCodec codec -> codec
    boolean $assertionsDisabled -> $assertionsDisabled
    86:91:void <init>(okhttp3.ConnectionPool,okhttp3.Address,java.lang.Object) -> <init>
    94:109:okhttp3.internal.http.HttpCodec newStream(okhttp3.OkHttpClient,boolean) -> newStream
    121:138:okhttp3.internal.connection.RealConnection findHealthyConnection(int,int,int,boolean,boolean) -> findHealthyConnection
    149:203:okhttp3.internal.connection.RealConnection findConnection(int,int,int,boolean) -> findConnection
    208:218:void streamFinished(boolean,okhttp3.internal.http.HttpCodec) -> streamFinished
    221:223:okhttp3.internal.http.HttpCodec codec() -> codec
    227:227:okhttp3.internal.connection.RouteDatabase routeDatabase() -> routeDatabase
    231:231:okhttp3.internal.connection.RealConnection connection() -> connection
    236:240:void release() -> release
    245:249:void noNewStreams() -> noNewStreams
    259:283:java.net.Socket deallocate(boolean,boolean,boolean) -> deallocate
    289:299:void cancel() -> cancel
    303:333:void streamFailed(java.io.IOException) -> streamFailed
    340:345:void acquire(okhttp3.internal.connection.RealConnection) -> acquire
    349:356:void release(okhttp3.internal.connection.RealConnection) -> release
    368:379:java.net.Socket releaseAndAcquire(okhttp3.internal.connection.RealConnection) -> releaseAndAcquire
    383:383:boolean hasMoreRoutes() -> hasMoreRoutes
    387:388:java.lang.String toString() -> toString
    72:72:void <clinit>() -> <clinit>
okhttp3.internal.connection.StreamAllocation$StreamAllocationReference -> okhttp3.internal.connection.StreamAllocation$StreamAllocationReference:
# {"fileName":"StreamAllocation.java","id":"sourceFile"}
    java.lang.Object callStackTrace -> callStackTrace
    399:401:void <init>(okhttp3.internal.connection.StreamAllocation,java.lang.Object) -> <init>
okhttp3.internal.http.BridgeInterceptor -> okhttp3.internal.http.BridgeInterceptor:
# {"fileName":"BridgeInterceptor.java","id":"sourceFile"}
    okhttp3.CookieJar cookieJar -> cookieJar
    43:45:void <init>(okhttp3.CookieJar) -> <init>
    48:112:okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
    117:125:java.lang.String cookieHeader(java.util.List) -> cookieHeader
okhttp3.internal.http.CallServerInterceptor -> okhttp3.internal.http.CallServerInterceptor:
# {"fileName":"CallServerInterceptor.java","id":"sourceFile"}
    boolean forWebSocket -> forWebSocket
    33:35:void <init>(boolean) -> <init>
    38:99:okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
okhttp3.internal.http.HttpCodec -> okhttp3.internal.http.HttpCodec:
# {"fileName":"HttpCodec.java","id":"sourceFile"}
    int DISCARD_STREAM_TIMEOUT_MILLIS -> DISCARD_STREAM_TIMEOUT_MILLIS
    okio.Sink createRequestBody(okhttp3.Request,long) -> createRequestBody
    void writeRequestHeaders(okhttp3.Request) -> writeRequestHeaders
    void flushRequest() -> flushRequest
    void finishRequest() -> finishRequest
    okhttp3.Response$Builder readResponseHeaders(boolean) -> readResponseHeaders
    okhttp3.ResponseBody openResponseBody(okhttp3.Response) -> openResponseBody
    void cancel() -> cancel
okhttp3.internal.http.HttpDate -> okhttp3.internal.http.HttpDate:
# {"fileName":"HttpDate.java","id":"sourceFile"}
    long MAX_DATE -> MAX_DATE
    java.lang.ThreadLocal STANDARD_DATE_FORMAT -> STANDARD_DATE_FORMAT
    java.lang.String[] BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS -> BROWSER_COMPATIBLE_DATE_FORMAT_STRINGS
    java.text.DateFormat[] BROWSER_COMPATIBLE_DATE_FORMATS -> BROWSER_COMPATIBLE_DATE_FORMATS
    76:109:java.util.Date parse(java.lang.String) -> parse
    114:114:java.lang.String format(java.util.Date) -> format
    117:118:void <init>() -> <init>
    37:71:void <clinit>() -> <clinit>
okhttp3.internal.http.HttpDate$1 -> okhttp3.internal.http.HttpDate$1:
# {"fileName":"HttpDate.java","id":"sourceFile"}
    38:38:void <init>() -> <init>
    41:44:java.text.DateFormat initialValue() -> initialValue
    38:38:java.lang.Object initialValue() -> initialValue
okhttp3.internal.http.HttpHeaders -> okhttp3.internal.http.HttpHeaders:
# {"fileName":"HttpHeaders.java","id":"sourceFile"}
    java.lang.String TOKEN -> TOKEN
    java.lang.String QUOTED_STRING -> QUOTED_STRING
    java.util.regex.Pattern PARAMETER -> PARAMETER
    45:46:void <init>() -> <init>
    49:49:long contentLength(okhttp3.Response) -> contentLength
    53:53:long contentLength(okhttp3.Headers) -> contentLength
    57:61:long stringToLong(java.lang.String) -> stringToLong
    71:74:boolean varyMatches(okhttp3.Response,okhttp3.Headers,okhttp3.Request) -> varyMatches
    81:81:boolean hasVaryAll(okhttp3.Response) -> hasVaryAll
    88:88:boolean hasVaryAll(okhttp3.Headers) -> hasVaryAll
    92:92:java.util.Set varyFields(okhttp3.Response) -> varyFields
    99:111:java.util.Set varyFields(okhttp3.Headers) -> varyFields
    122:124:okhttp3.Headers varyHeaders(okhttp3.Response) -> varyHeaders
    132:142:okhttp3.Headers varyHeaders(okhttp3.Headers,okhttp3.Headers) -> varyHeaders
    155:173:java.util.List parseChallenges(okhttp3.Headers,java.lang.String) -> parseChallenges
    177:183:void receiveHeaders(okhttp3.CookieJar,okhttp3.HttpUrl,okhttp3.Headers) -> receiveHeaders
    188:206:boolean hasBody(okhttp3.Response) -> hasBody
    214:219:int skipUntil(java.lang.String,int,java.lang.String) -> skipUntil
    227:233:int skipWhitespace(java.lang.String,int) -> skipWhitespace
    242:251:int parseSeconds(java.lang.String,int) -> parseSeconds
    42:43:void <clinit>() -> <clinit>
okhttp3.internal.http.HttpMethod -> okhttp3.internal.http.HttpMethod:
# {"fileName":"HttpMethod.java","id":"sourceFile"}
    20:24:boolean invalidatesCache(java.lang.String) -> invalidatesCache
    28:32:boolean requiresRequestBody(java.lang.String) -> requiresRequestBody
    36:41:boolean permitsRequestBody(java.lang.String) -> permitsRequestBody
    45:45:boolean redirectsWithBody(java.lang.String) -> redirectsWithBody
    50:50:boolean redirectsToGet(java.lang.String) -> redirectsToGet
    53:54:void <init>() -> <init>
okhttp3.internal.http.RealInterceptorChain -> okhttp3.internal.http.RealInterceptorChain:
# {"fileName":"RealInterceptorChain.java","id":"sourceFile"}
    java.util.List interceptors -> interceptors
    okhttp3.internal.connection.StreamAllocation streamAllocation -> streamAllocation
    okhttp3.internal.http.HttpCodec httpCodec -> httpCodec
    okhttp3.Connection connection -> connection
    int index -> index
    okhttp3.Request request -> request
    int calls -> calls
    41:48:void <init>(java.util.List,okhttp3.internal.connection.StreamAllocation,okhttp3.internal.http.HttpCodec,okhttp3.Connection,int,okhttp3.Request) -> <init>
    51:51:okhttp3.Connection connection() -> connection
    55:55:okhttp3.internal.connection.StreamAllocation streamAllocation() -> streamAllocation
    59:59:okhttp3.internal.http.HttpCodec httpStream() -> httpStream
    63:63:okhttp3.Request request() -> request
    67:67:okhttp3.Response proceed(okhttp3.Request) -> proceed
    72:105:okhttp3.Response proceed(okhttp3.Request,okhttp3.internal.connection.StreamAllocation,okhttp3.internal.http.HttpCodec,okhttp3.Connection) -> proceed
    109:110:boolean sameConnection(okhttp3.HttpUrl) -> sameConnection
okhttp3.internal.http.RealResponseBody -> okhttp3.internal.http.RealResponseBody:
# {"fileName":"RealResponseBody.java","id":"sourceFile"}
    okhttp3.Headers headers -> headers
    okio.BufferedSource source -> source
    27:30:void <init>(okhttp3.Headers,okio.BufferedSource) -> <init>
    33:34:okhttp3.MediaType contentType() -> contentType
    38:38:long contentLength() -> contentLength
    42:42:okio.BufferedSource source() -> source
okhttp3.internal.http.RequestLine -> okhttp3.internal.http.RequestLine:
# {"fileName":"RequestLine.java","id":"sourceFile"}
    24:25:void <init>() -> <init>
    33:44:java.lang.String get(okhttp3.Request,java.net.Proxy$Type) -> get
    52:52:boolean includeAuthorityInRequestLine(okhttp3.Request,java.net.Proxy$Type) -> includeAuthorityInRequestLine
    60:62:java.lang.String requestPath(okhttp3.HttpUrl) -> requestPath
okhttp3.internal.http.RetryAndFollowUpInterceptor -> okhttp3.internal.http.RetryAndFollowUpInterceptor:
# {"fileName":"RetryAndFollowUpInterceptor.java","id":"sourceFile"}
    int MAX_FOLLOW_UPS -> MAX_FOLLOW_UPS
    okhttp3.OkHttpClient client -> client
    boolean forWebSocket -> forWebSocket
    okhttp3.internal.connection.StreamAllocation streamAllocation -> streamAllocation
    java.lang.Object callStackTrace -> callStackTrace
    boolean canceled -> canceled
    71:74:void <init>(okhttp3.OkHttpClient,boolean) -> <init>
    86:89:void cancel() -> cancel
    92:92:boolean isCanceled() -> isCanceled
    96:97:void setCallStackTrace(java.lang.Object) -> setCallStackTrace
    100:100:okhttp3.internal.connection.StreamAllocation streamAllocation() -> streamAllocation
    104:184:okhttp3.Response intercept(okhttp3.Interceptor$Chain) -> intercept
    188:199:okhttp3.Address createAddress(okhttp3.HttpUrl) -> createAddress
    209:224:boolean recover(java.io.IOException,boolean,okhttp3.Request) -> recover
    229:256:boolean isRecoverable(java.io.IOException,boolean) -> isRecoverable
    265:349:okhttp3.Request followUpRequest(okhttp3.Response) -> followUpRequest
    358:361:boolean sameConnection(okhttp3.Response,okhttp3.HttpUrl) -> sameConnection
okhttp3.internal.http.StatusLine -> okhttp3.internal.http.StatusLine:
# {"fileName":"StatusLine.java","id":"sourceFile"}
    int HTTP_TEMP_REDIRECT -> HTTP_TEMP_REDIRECT
    int HTTP_PERM_REDIRECT -> HTTP_PERM_REDIRECT
    int HTTP_CONTINUE -> HTTP_CONTINUE
    okhttp3.Protocol protocol -> protocol
    int code -> code
    java.lang.String message -> message
    34:38:void <init>(okhttp3.Protocol,int,java.lang.String) -> <init>
    41:41:okhttp3.internal.http.StatusLine get(okhttp3.Response) -> get
    51:93:okhttp3.internal.http.StatusLine parse(java.lang.String) -> parse
    97:103:java.lang.String toString() -> toString
okhttp3.internal.http.UnrepeatableRequestBody -> okhttp3.internal.http.UnrepeatableRequestBody:
# {"fileName":"UnrepeatableRequestBody.java","id":"sourceFile"}
okhttp3.internal.http1.Http1Codec -> okhttp3.internal.http1.Http1Codec:
# {"fileName":"Http1Codec.java","id":"sourceFile"}
    int STATE_IDLE -> STATE_IDLE
    int STATE_OPEN_REQUEST_BODY -> STATE_OPEN_REQUEST_BODY
    int STATE_WRITING_REQUEST_BODY -> STATE_WRITING_REQUEST_BODY
    int STATE_READ_RESPONSE_HEADERS -> STATE_READ_RESPONSE_HEADERS
    int STATE_OPEN_RESPONSE_BODY -> STATE_OPEN_RESPONSE_BODY
    int STATE_READING_RESPONSE_BODY -> STATE_READING_RESPONSE_BODY
    int STATE_CLOSED -> STATE_CLOSED
    okhttp3.OkHttpClient client -> client
    okhttp3.internal.connection.StreamAllocation streamAllocation -> streamAllocation
    okio.BufferedSource source -> source
    okio.BufferedSink sink -> sink
    int state -> state
    85:93:void <init>(okhttp3.OkHttpClient,okhttp3.internal.connection.StreamAllocation,okio.BufferedSource,okio.BufferedSink) -> <init>
    96:106:okio.Sink createRequestBody(okhttp3.Request,long) -> createRequestBody
    111:113:void cancel() -> cancel
    126:129:void writeRequestHeaders(okhttp3.Request) -> writeRequestHeaders
    132:133:okhttp3.ResponseBody openResponseBody(okhttp3.Response) -> openResponseBody
    137:153:okio.Source getTransferStream(okhttp3.Response) -> getTransferStream
    158:158:boolean isClosed() -> isClosed
    162:163:void flushRequest() -> flushRequest
    166:167:void finishRequest() -> finishRequest
    171:181:void writeRequest(okhttp3.Headers,java.lang.String) -> writeRequest
    184:207:okhttp3.Response$Builder readResponseHeaders(boolean) -> readResponseHeaders
    213:218:okhttp3.Headers readHeaders() -> readHeaders
    222:224:okio.Sink newChunkedSink() -> newChunkedSink
    228:230:okio.Sink newFixedLengthSink(long) -> newFixedLengthSink
    234:236:okio.Source newFixedLengthSource(long) -> newFixedLengthSource
    240:242:okio.Source newChunkedSource(okhttp3.HttpUrl) -> newChunkedSource
    246:250:okio.Source newUnknownLengthSource() -> newUnknownLengthSource
    259:263:void detachTimeout(okio.ForwardingTimeout) -> detachTimeout
okhttp3.internal.http1.Http1Codec$1 -> okhttp3.internal.http1.Http1Codec$1:
# {"fileName":"Http1Codec.java","id":"sourceFile"}
okhttp3.internal.http1.Http1Codec$AbstractSource -> okhttp3.internal.http1.Http1Codec$AbstractSource:
# {"fileName":"Http1Codec.java","id":"sourceFile"}
    okio.ForwardingTimeout timeout -> timeout
    boolean closed -> closed
    okhttp3.internal.http1.Http1Codec this$0 -> this$0
    343:344:void <init>(okhttp3.internal.http1.Http1Codec) -> <init>
    348:348:okio.Timeout timeout() -> timeout
    356:365:void endOfInput(boolean) -> endOfInput
    343:343:void <init>(okhttp3.internal.http1.Http1Codec,okhttp3.internal.http1.Http1Codec$1) -> <init>
okhttp3.internal.http1.Http1Codec$ChunkedSink -> okhttp3.internal.http1.Http1Codec$ChunkedSink:
# {"fileName":"Http1Codec.java","id":"sourceFile"}
    okio.ForwardingTimeout timeout -> timeout
    boolean closed -> closed
    okhttp3.internal.http1.Http1Codec this$0 -> this$0
    309:313:void <init>(okhttp3.internal.http1.Http1Codec) -> <init>
    316:316:okio.Timeout timeout() -> timeout
    320:327:void write(okio.Buffer,long) -> write
    330:332:void flush() -> flush
    335:340:void close() -> close
okhttp3.internal.http1.Http1Codec$ChunkedSource -> okhttp3.internal.http1.Http1Codec$ChunkedSource:
# {"fileName":"Http1Codec.java","id":"sourceFile"}
    long NO_CHUNK_YET -> NO_CHUNK_YET
    okhttp3.HttpUrl url -> url
    long bytesRemainingInChunk -> bytesRemainingInChunk
    boolean hasMoreChunks -> hasMoreChunks
    okhttp3.internal.http1.Http1Codec this$0 -> this$0
    412:417:void <init>(okhttp3.internal.http1.Http1Codec,okhttp3.HttpUrl) -> <init>
    420:435:long read(okio.Buffer,long) -> read
    440:458:void readChunkSize() -> readChunkSize
    461:466:void close() -> close
okhttp3.internal.http1.Http1Codec$FixedLengthSink -> okhttp3.internal.http1.Http1Codec$FixedLengthSink:
# {"fileName":"Http1Codec.java","id":"sourceFile"}
    okio.ForwardingTimeout timeout -> timeout
    boolean closed -> closed
    long bytesRemaining -> bytesRemaining
    okhttp3.internal.http1.Http1Codec this$0 -> this$0
    267:273:void <init>(okhttp3.internal.http1.Http1Codec,long) -> <init>
    276:276:okio.Timeout timeout() -> timeout
    280:288:void write(okio.Buffer,long) -> write
    291:293:void flush() -> flush
    296:301:void close() -> close
okhttp3.internal.http1.Http1Codec$FixedLengthSource -> okhttp3.internal.http1.Http1Codec$FixedLengthSource:
# {"fileName":"Http1Codec.java","id":"sourceFile"}
    long bytesRemaining -> bytesRemaining
    okhttp3.internal.http1.Http1Codec this$0 -> this$0
    372:377:void <init>(okhttp3.internal.http1.Http1Codec,long) -> <init>
    380:394:long read(okio.Buffer,long) -> read
    398:405:void close() -> close
okhttp3.internal.http1.Http1Codec$UnknownLengthSource -> okhttp3.internal.http1.Http1Codec$UnknownLengthSource:
# {"fileName":"Http1Codec.java","id":"sourceFile"}
    boolean inputExhausted -> inputExhausted
    okhttp3.internal.http1.Http1Codec this$0 -> this$0
    473:474:void <init>(okhttp3.internal.http1.Http1Codec) -> <init>
    478:488:long read(okio.Buffer,long) -> read
    492:497:void close() -> close
okhttp3.internal.http2.ConnectionShutdownException -> okhttp3.internal.http2.ConnectionShutdownException:
# {"fileName":"ConnectionShutdownException.java","id":"sourceFile"}
    24:24:void <init>() -> <init>
okhttp3.internal.http2.ErrorCode -> okhttp3.internal.http2.ErrorCode:
# {"fileName":"ErrorCode.java","id":"sourceFile"}
    okhttp3.internal.http2.ErrorCode NO_ERROR -> NO_ERROR
    okhttp3.internal.http2.ErrorCode PROTOCOL_ERROR -> PROTOCOL_ERROR
    okhttp3.internal.http2.ErrorCode INTERNAL_ERROR -> INTERNAL_ERROR
    okhttp3.internal.http2.ErrorCode FLOW_CONTROL_ERROR -> FLOW_CONTROL_ERROR
    okhttp3.internal.http2.ErrorCode REFUSED_STREAM -> REFUSED_STREAM
    okhttp3.internal.http2.ErrorCode CANCEL -> CANCEL
    int httpCode -> httpCode
    okhttp3.internal.http2.ErrorCode[] $VALUES -> $VALUES
    19:19:okhttp3.internal.http2.ErrorCode[] values() -> values
    19:19:okhttp3.internal.http2.ErrorCode valueOf(java.lang.String) -> valueOf
    35:37:void <init>(java.lang.String,int,int) -> <init>
    40:43:okhttp3.internal.http2.ErrorCode fromHttp2(int) -> fromHttp2
    19:31:void <clinit>() -> <clinit>
okhttp3.internal.http2.Header -> okhttp3.internal.http2.Header:
# {"fileName":"Header.java","id":"sourceFile"}
    okio.ByteString PSEUDO_PREFIX -> PSEUDO_PREFIX
    okio.ByteString RESPONSE_STATUS -> RESPONSE_STATUS
    okio.ByteString TARGET_METHOD -> TARGET_METHOD
    okio.ByteString TARGET_PATH -> TARGET_PATH
    okio.ByteString TARGET_SCHEME -> TARGET_SCHEME
    okio.ByteString TARGET_AUTHORITY -> TARGET_AUTHORITY
    okio.ByteString name -> name
    okio.ByteString value -> value
    int hpackSize -> hpackSize
    39:40:void <init>(java.lang.String,java.lang.String) -> <init>
    43:44:void <init>(okio.ByteString,java.lang.String) -> <init>
    46:50:void <init>(okio.ByteString,okio.ByteString) -> <init>
    53:58:boolean equals(java.lang.Object) -> equals
    62:65:int hashCode() -> hashCode
    69:69:java.lang.String toString() -> toString
    24:29:void <clinit>() -> <clinit>
okhttp3.internal.http2.Hpack -> okhttp3.internal.http2.Hpack:
# {"fileName":"Hpack.java","id":"sourceFile"}
    int PREFIX_4_BITS -> PREFIX_4_BITS
    int PREFIX_5_BITS -> PREFIX_5_BITS
    int PREFIX_6_BITS -> PREFIX_6_BITS
    int PREFIX_7_BITS -> PREFIX_7_BITS
    okhttp3.internal.http2.Header[] STATIC_HEADER_TABLE -> STATIC_HEADER_TABLE
    java.util.Map NAME_TO_FIRST_INDEX -> NAME_TO_FIRST_INDEX
    111:112:void <init>() -> <init>
    352:358:java.util.Map nameToFirstIndex() -> nameToFirstIndex
    591:597:okio.ByteString checkLowercase(okio.ByteString) -> checkLowercase
    47:349:void <clinit>() -> <clinit>
okhttp3.internal.http2.Hpack$Reader -> okhttp3.internal.http2.Hpack$Reader:
# {"fileName":"Hpack.java","id":"sourceFile"}
    java.util.List headerList -> headerList
    okio.BufferedSource source -> source
    int headerTableSizeSetting -> headerTableSizeSetting
    int maxDynamicTableByteCount -> maxDynamicTableByteCount
    okhttp3.internal.http2.Header[] dynamicTable -> dynamicTable
    int nextHeaderIndex -> nextHeaderIndex
    int headerCount -> headerCount
    int dynamicTableByteCount -> dynamicTableByteCount
    131:132:void <init>(int,okio.Source) -> <init>
    117:138:void <init>(int,int,okio.Source) -> <init>
    141:141:int maxDynamicTableByteCount() -> maxDynamicTableByteCount
    145:152:void adjustDynamicTableByteCount() -> adjustDynamicTableByteCount
    155:159:void clearDynamicTable() -> clearDynamicTable
    163:176:int evictToRecoverBytes(int) -> evictToRecoverBytes
    184:210:void readHeaders() -> readHeaders
    213:215:java.util.List getAndResetHeaderList() -> getAndResetHeaderList
    219:229:void readIndexedHeader(int) -> readIndexedHeader
    233:233:int dynamicTableIndex(int) -> dynamicTableIndex
    237:240:void readLiteralHeaderWithoutIndexingIndexedName(int) -> readLiteralHeaderWithoutIndexingIndexedName
    243:246:void readLiteralHeaderWithoutIndexingNewName() -> readLiteralHeaderWithoutIndexingNewName
    250:253:void readLiteralHeaderWithIncrementalIndexingIndexedName(int) -> readLiteralHeaderWithIncrementalIndexingIndexedName
    256:259:void readLiteralHeaderWithIncrementalIndexingNewName() -> readLiteralHeaderWithIncrementalIndexingNewName
    262:265:okio.ByteString getName(int) -> getName
    270:270:boolean isStaticHeader(int) -> isStaticHeader
    275:307:void insertIntoDynamicTable(int,okhttp3.internal.http2.Header) -> insertIntoDynamicTable
    310:310:int readByte() -> readByte
    314:332:int readInt(int,int) -> readInt
    337:344:okio.ByteString readByteString() -> readByteString
okhttp3.internal.http2.Hpack$Writer -> okhttp3.internal.http2.Hpack$Writer:
# {"fileName":"Hpack.java","id":"sourceFile"}
    int SETTINGS_HEADER_TABLE_SIZE -> SETTINGS_HEADER_TABLE_SIZE
    int SETTINGS_HEADER_TABLE_SIZE_LIMIT -> SETTINGS_HEADER_TABLE_SIZE_LIMIT
    okio.Buffer out -> out
    boolean useCompression -> useCompression
    int smallestHeaderTableSizeSetting -> smallestHeaderTableSizeSetting
    boolean emitDynamicTableSizeUpdate -> emitDynamicTableSizeUpdate
    int headerTableSizeSetting -> headerTableSizeSetting
    int maxDynamicTableByteCount -> maxDynamicTableByteCount
    okhttp3.internal.http2.Header[] dynamicTable -> dynamicTable
    int nextHeaderIndex -> nextHeaderIndex
    int headerCount -> headerCount
    int dynamicTableByteCount -> dynamicTableByteCount
    392:393:void <init>(okio.Buffer) -> <init>
    378:400:void <init>(int,boolean,okio.Buffer) -> <init>
    403:407:void clearDynamicTable() -> clearDynamicTable
    411:425:int evictToRecoverBytes(int) -> evictToRecoverBytes
    429:451:void insertIntoDynamicTable(okhttp3.internal.http2.Header) -> insertIntoDynamicTable
    456:523:void writeHeaders(java.util.List) -> writeHeaders
    528:544:void writeInt(int,int,int) -> writeInt
    547:557:void writeByteString(okio.ByteString) -> writeByteString
    560:573:void setHeaderTableSizeSetting(int) -> setHeaderTableSizeSetting
    576:583:void adjustDynamicTableByteCount() -> adjustDynamicTableByteCount
okhttp3.internal.http2.Http2 -> okhttp3.internal.http2.Http2:
# {"fileName":"Http2.java","id":"sourceFile"}
    okio.ByteString CONNECTION_PREFACE -> CONNECTION_PREFACE
    int INITIAL_MAX_FRAME_SIZE -> INITIAL_MAX_FRAME_SIZE
    byte TYPE_DATA -> TYPE_DATA
    byte TYPE_HEADERS -> TYPE_HEADERS
    byte TYPE_PRIORITY -> TYPE_PRIORITY
    byte TYPE_RST_STREAM -> TYPE_RST_STREAM
    byte TYPE_SETTINGS -> TYPE_SETTINGS
    byte TYPE_PUSH_PROMISE -> TYPE_PUSH_PROMISE
    byte TYPE_PING -> TYPE_PING
    byte TYPE_GOAWAY -> TYPE_GOAWAY
    byte TYPE_WINDOW_UPDATE -> TYPE_WINDOW_UPDATE
    byte TYPE_CONTINUATION -> TYPE_CONTINUATION
    byte FLAG_NONE -> FLAG_NONE
    byte FLAG_ACK -> FLAG_ACK
    byte FLAG_END_STREAM -> FLAG_END_STREAM
    byte FLAG_END_HEADERS -> FLAG_END_HEADERS
    byte FLAG_END_PUSH_PROMISE -> FLAG_END_PUSH_PROMISE
    byte FLAG_PADDED -> FLAG_PADDED
    byte FLAG_PRIORITY -> FLAG_PRIORITY
    byte FLAG_COMPRESSED -> FLAG_COMPRESSED
    java.lang.String[] FRAME_NAMES -> FRAME_NAMES
    java.lang.String[] FLAGS -> FLAGS
    java.lang.String[] BINARY -> BINARY
    105:106:void <init>() -> <init>
    109:109:java.lang.IllegalArgumentException illegalArgument(java.lang.String,java.lang.Object[]) -> illegalArgument
    113:113:java.io.IOException ioException(java.lang.String,java.lang.Object[]) -> ioException
    135:137:java.lang.String frameLog(boolean,int,int,byte,byte) -> frameLog
    147:165:java.lang.String formatFlags(byte,byte) -> formatFlags
    24:103:void <clinit>() -> <clinit>
okhttp3.internal.http2.Http2Codec -> okhttp3.internal.http2.Http2Codec:
# {"fileName":"Http2Codec.java","id":"sourceFile"}
    okio.ByteString CONNECTION -> CONNECTION
    okio.ByteString HOST -> HOST
    okio.ByteString KEEP_ALIVE -> KEEP_ALIVE
    okio.ByteString PROXY_CONNECTION -> PROXY_CONNECTION
    okio.ByteString TRANSFER_ENCODING -> TRANSFER_ENCODING
    okio.ByteString TE -> TE
    okio.ByteString ENCODING -> ENCODING
    okio.ByteString UPGRADE -> UPGRADE
    java.util.List HTTP_2_SKIPPED_REQUEST_HEADERS -> HTTP_2_SKIPPED_REQUEST_HEADERS
    java.util.List HTTP_2_SKIPPED_RESPONSE_HEADERS -> HTTP_2_SKIPPED_RESPONSE_HEADERS
    okhttp3.OkHttpClient client -> client
    okhttp3.internal.connection.StreamAllocation streamAllocation -> streamAllocation
    okhttp3.internal.http2.Http2Connection connection -> connection
    okhttp3.internal.http2.Http2Stream stream -> stream
    91:95:void <init>(okhttp3.OkHttpClient,okhttp3.internal.connection.StreamAllocation,okhttp3.internal.http2.Http2Connection) -> <init>
    98:98:okio.Sink createRequestBody(okhttp3.Request,long) -> createRequestBody
    102:109:void writeRequestHeaders(okhttp3.Request) -> writeRequestHeaders
    112:113:void flushRequest() -> flushRequest
    116:117:void finishRequest() -> finishRequest
    120:125:okhttp3.Response$Builder readResponseHeaders(boolean) -> readResponseHeaders
    129:146:java.util.List http2HeadersList(okhttp3.Request) -> http2HeadersList
    151:180:okhttp3.Response$Builder readHttp2HeadersList(java.util.List) -> readHttp2HeadersList
    184:185:okhttp3.ResponseBody openResponseBody(okhttp3.Response) -> openResponseBody
    189:190:void cancel() -> cancel
    52:75:void <clinit>() -> <clinit>
okhttp3.internal.http2.Http2Codec$StreamFinishingSource -> okhttp3.internal.http2.Http2Codec$StreamFinishingSource:
# {"fileName":"Http2Codec.java","id":"sourceFile"}
    okhttp3.internal.http2.Http2Codec this$0 -> this$0
    193:195:void <init>(okhttp3.internal.http2.Http2Codec,okio.Source) -> <init>
    198:200:void close() -> close
okhttp3.internal.http2.Http2Connection -> okhttp3.internal.http2.Http2Connection:
# {"fileName":"Http2Connection.java","id":"sourceFile"}
    java.util.concurrent.ExecutorService executor -> executor
    boolean client -> client
    okhttp3.internal.http2.Http2Connection$Listener listener -> listener
    java.util.Map streams -> streams
    java.lang.String hostname -> hostname
    int lastGoodStreamId -> lastGoodStreamId
    int nextStreamId -> nextStreamId
    boolean shutdown -> shutdown
    java.util.concurrent.ExecutorService pushExecutor -> pushExecutor
    java.util.Map pings -> pings
    okhttp3.internal.http2.PushObserver pushObserver -> pushObserver
    int nextPingId -> nextPingId
    long unacknowledgedBytesRead -> unacknowledgedBytesRead
    long bytesLeftInWriteWindow -> bytesLeftInWriteWindow
    okhttp3.internal.http2.Settings okHttpSettings -> okHttpSettings
    int OKHTTP_CLIENT_WINDOW_SIZE -> OKHTTP_CLIENT_WINDOW_SIZE
    okhttp3.internal.http2.Settings peerSettings -> peerSettings
    boolean receivedInitialPeerSettings -> receivedInitialPeerSettings
    java.net.Socket socket -> socket
    okhttp3.internal.http2.Http2Writer writer -> writer
    okhttp3.internal.http2.Http2Connection$ReaderRunnable readerRunnable -> readerRunnable
    java.util.Set currentPushRequests -> currentPushRequests
    boolean $assertionsDisabled -> $assertionsDisabled
    81:777:void <init>(okhttp3.internal.http2.Http2Connection$Builder) -> <init>
    162:162:okhttp3.Protocol getProtocol() -> getProtocol
    169:169:int openStreamCount() -> openStreamCount
    173:173:okhttp3.internal.http2.Http2Stream getStream(int) -> getStream
    177:179:okhttp3.internal.http2.Http2Stream removeStream(int) -> removeStream
    183:183:int maxConcurrentStreams() -> maxConcurrentStreams
    195:196:okhttp3.internal.http2.Http2Stream pushStream(int,java.util.List,boolean) -> pushStream
    205:205:okhttp3.internal.http2.Http2Stream newStream(java.util.List,boolean) -> newStream
    210:242:okhttp3.internal.http2.Http2Stream newStream(int,java.util.List,boolean) -> newStream
    247:248:void writeSynReply(int,boolean,java.util.List) -> writeSynReply
    264:293:void writeData(int,boolean,okio.Buffer,long) -> writeData
    299:301:void addBytesToWriteWindow(long) -> addBytesToWriteWindow
    304:312:void writeSynResetLater(int,okhttp3.internal.http2.ErrorCode) -> writeSynResetLater
    315:316:void writeSynReset(int,okhttp3.internal.http2.ErrorCode) -> writeSynReset
    319:327:void writeWindowUpdateLater(int,long) -> writeWindowUpdateLater
    334:346:okhttp3.internal.http2.Ping ping() -> ping
    351:360:void writePingLater(boolean,int,int,okhttp3.internal.http2.Ping) -> writePingLater
    363:368:void writePing(boolean,int,int,okhttp3.internal.http2.Ping) -> writePing
    371:371:okhttp3.internal.http2.Ping removePing(int) -> removePing
    375:376:void flush() -> flush
    384:397:void shutdown(okhttp3.internal.http2.ErrorCode) -> shutdown
    404:405:void close() -> close
    408:460:void close(okhttp3.internal.http2.ErrorCode,okhttp3.internal.http2.ErrorCode) -> close
    467:468:void start() -> start
    475:484:void start(boolean) -> start
    488:497:void setSettings(okhttp3.internal.http2.Settings) -> setSettings
    500:500:boolean isShutdown() -> isShutdown
    773:773:boolean pushedStream(int) -> pushedStream
    780:801:void pushRequestLater(int,java.util.List) -> pushRequestLater
    805:819:void pushHeadersLater(int,java.util.List,boolean) -> pushHeadersLater
    827:845:void pushDataLater(int,okio.BufferedSource,int,boolean) -> pushDataLater
    848:856:void pushResetLater(int,okhttp3.internal.http2.ErrorCode) -> pushResetLater
    55:71:void <clinit>() -> <clinit>
okhttp3.internal.http2.Http2Connection$1 -> okhttp3.internal.http2.Http2Connection$1:
# {"fileName":"Http2Connection.java","id":"sourceFile"}
    int val$streamId -> val$streamId
    okhttp3.internal.http2.ErrorCode val$errorCode -> val$errorCode
    okhttp3.internal.http2.Http2Connection this$0 -> this$0
    304:304:void <init>(okhttp3.internal.http2.Http2Connection,java.lang.String,java.lang.Object[],int,okhttp3.internal.http2.ErrorCode) -> <init>
    307:310:void execute() -> execute
okhttp3.internal.http2.Http2Connection$2 -> okhttp3.internal.http2.Http2Connection$2:
# {"fileName":"Http2Connection.java","id":"sourceFile"}
    int val$streamId -> val$streamId
    long val$unacknowledgedBytesRead -> val$unacknowledgedBytesRead
    okhttp3.internal.http2.Http2Connection this$0 -> this$0
    319:319:void <init>(okhttp3.internal.http2.Http2Connection,java.lang.String,java.lang.Object[],int,long) -> <init>
    322:325:void execute() -> execute
okhttp3.internal.http2.Http2Connection$3 -> okhttp3.internal.http2.Http2Connection$3:
# {"fileName":"Http2Connection.java","id":"sourceFile"}
    boolean val$reply -> val$reply
    int val$payload1 -> val$payload1
    int val$payload2 -> val$payload2
    okhttp3.internal.http2.Ping val$ping -> val$ping
    okhttp3.internal.http2.Http2Connection this$0 -> this$0
    352:352:void <init>(okhttp3.internal.http2.Http2Connection,java.lang.String,java.lang.Object[],boolean,int,int,okhttp3.internal.http2.Ping) -> <init>
    355:358:void execute() -> execute
okhttp3.internal.http2.Http2Connection$4 -> okhttp3.internal.http2.Http2Connection$4:
# {"fileName":"Http2Connection.java","id":"sourceFile"}
    int val$streamId -> val$streamId
    java.util.List val$requestHeaders -> val$requestHeaders
    okhttp3.internal.http2.Http2Connection this$0 -> this$0
    787:787:void <init>(okhttp3.internal.http2.Http2Connection,java.lang.String,java.lang.Object[],int,java.util.List) -> <init>
    789:799:void execute() -> execute
okhttp3.internal.http2.Http2Connection$5 -> okhttp3.internal.http2.Http2Connection$5:
# {"fileName":"Http2Connection.java","id":"sourceFile"}
    int val$streamId -> val$streamId
    java.util.List val$requestHeaders -> val$requestHeaders
    boolean val$inFinished -> val$inFinished
    okhttp3.internal.http2.Http2Connection this$0 -> this$0
    805:805:void <init>(okhttp3.internal.http2.Http2Connection,java.lang.String,java.lang.Object[],int,java.util.List,boolean) -> <init>
    807:817:void execute() -> execute
okhttp3.internal.http2.Http2Connection$6 -> okhttp3.internal.http2.Http2Connection$6:
# {"fileName":"Http2Connection.java","id":"sourceFile"}
    int val$streamId -> val$streamId
    okio.Buffer val$buffer -> val$buffer
    int val$byteCount -> val$byteCount
    boolean val$inFinished -> val$inFinished
    okhttp3.internal.http2.Http2Connection this$0 -> this$0
    831:831:void <init>(okhttp3.internal.http2.Http2Connection,java.lang.String,java.lang.Object[],int,okio.Buffer,int,boolean) -> <init>
    834:843:void execute() -> execute
okhttp3.internal.http2.Http2Connection$7 -> okhttp3.internal.http2.Http2Connection$7:
# {"fileName":"Http2Connection.java","id":"sourceFile"}
    int val$streamId -> val$streamId
    okhttp3.internal.http2.ErrorCode val$errorCode -> val$errorCode
    okhttp3.internal.http2.Http2Connection this$0 -> this$0
    848:848:void <init>(okhttp3.internal.http2.Http2Connection,java.lang.String,java.lang.Object[],int,okhttp3.internal.http2.ErrorCode) -> <init>
    850:854:void execute() -> execute
okhttp3.internal.http2.Http2Connection$Builder -> okhttp3.internal.http2.Http2Connection$Builder:
# {"fileName":"Http2Connection.java","id":"sourceFile"}
    java.net.Socket socket -> socket
    java.lang.String hostname -> hostname
    okio.BufferedSource source -> source
    okio.BufferedSink sink -> sink
    okhttp3.internal.http2.Http2Connection$Listener listener -> listener
    okhttp3.internal.http2.PushObserver pushObserver -> pushObserver
    boolean client -> client
    508:518:void <init>(boolean) -> <init>
    521:522:okhttp3.internal.http2.Http2Connection$Builder socket(java.net.Socket) -> socket
    527:531:okhttp3.internal.http2.Http2Connection$Builder socket(java.net.Socket,java.lang.String,okio.BufferedSource,okio.BufferedSink) -> socket
    535:536:okhttp3.internal.http2.Http2Connection$Builder listener(okhttp3.internal.http2.Http2Connection$Listener) -> listener
    540:541:okhttp3.internal.http2.Http2Connection$Builder pushObserver(okhttp3.internal.http2.PushObserver) -> pushObserver
    545:545:okhttp3.internal.http2.Http2Connection build() -> build
okhttp3.internal.http2.Http2Connection$Listener -> okhttp3.internal.http2.Http2Connection$Listener:
# {"fileName":"Http2Connection.java","id":"sourceFile"}
    okhttp3.internal.http2.Http2Connection$Listener REFUSE_INCOMING_STREAMS -> REFUSE_INCOMING_STREAMS
    859:859:void <init>() -> <init>
    void onStream(okhttp3.internal.http2.Http2Stream) -> onStream
    882:882:void onSettings(okhttp3.internal.http2.Http2Connection) -> onSettings
    860:860:void <clinit>() -> <clinit>
okhttp3.internal.http2.Http2Connection$Listener$1 -> okhttp3.internal.http2.Http2Connection$Listener$1:
# {"fileName":"Http2Connection.java","id":"sourceFile"}
    860:860:void <init>() -> <init>
    862:863:void onStream(okhttp3.internal.http2.Http2Stream) -> onStream
okhttp3.internal.http2.Http2Connection$ReaderRunnable -> okhttp3.internal.http2.Http2Connection$ReaderRunnable:
# {"fileName":"Http2Connection.java","id":"sourceFile"}
    okhttp3.internal.http2.Http2Reader reader -> reader
    okhttp3.internal.http2.Http2Connection this$0 -> this$0
    556:559:void <init>(okhttp3.internal.http2.Http2Connection,okhttp3.internal.http2.Http2Reader) -> <init>
    562:580:void execute() -> execute
    584:598:void data(boolean,int,okio.BufferedSource,int) -> data
    602:645:void headers(boolean,int,int,java.util.List) -> headers
    648:656:void rstStream(int,okhttp3.internal.http2.ErrorCode) -> rstStream
    659:690:void settings(boolean,okhttp3.internal.http2.Settings) -> settings
    693:701:void applyAndAckSettings(okhttp3.internal.http2.Settings) -> applyAndAckSettings
    705:705:void ackSettings() -> ackSettings
    708:717:void ping(boolean,int,int) -> ping
    720:737:void goAway(int,okhttp3.internal.http2.ErrorCode,okio.ByteString) -> goAway
    740:753:void windowUpdate(int,long) -> windowUpdate
    758:758:void priority(int,int,int,boolean) -> priority
    762:763:void pushPromise(int,int,java.util.List) -> pushPromise
    768:768:void alternateService(int,java.lang.String,okio.ByteString,java.lang.String,int,long) -> alternateService
okhttp3.internal.http2.Http2Connection$ReaderRunnable$1 -> okhttp3.internal.http2.Http2Connection$ReaderRunnable$1:
# {"fileName":"Http2Connection.java","id":"sourceFile"}
    okhttp3.internal.http2.Http2Stream val$newStream -> val$newStream
    okhttp3.internal.http2.Http2Connection$ReaderRunnable this$1 -> this$1
    625:625:void <init>(okhttp3.internal.http2.Http2Connection$ReaderRunnable,java.lang.String,java.lang.Object[],okhttp3.internal.http2.Http2Stream) -> <init>
    628:636:void execute() -> execute
okhttp3.internal.http2.Http2Connection$ReaderRunnable$2 -> okhttp3.internal.http2.Http2Connection$ReaderRunnable$2:
# {"fileName":"Http2Connection.java","id":"sourceFile"}
    okhttp3.internal.http2.Http2Connection$ReaderRunnable this$1 -> this$1
    677:677:void <init>(okhttp3.internal.http2.Http2Connection$ReaderRunnable,java.lang.String,java.lang.Object[]) -> <init>
    679:680:void execute() -> execute
okhttp3.internal.http2.Http2Connection$ReaderRunnable$3 -> okhttp3.internal.http2.Http2Connection$ReaderRunnable$3:
# {"fileName":"Http2Connection.java","id":"sourceFile"}
    okhttp3.internal.http2.Settings val$peerSettings -> val$peerSettings
    okhttp3.internal.http2.Http2Connection$ReaderRunnable this$1 -> this$1
    693:693:void <init>(okhttp3.internal.http2.Http2Connection$ReaderRunnable,java.lang.String,java.lang.Object[],okhttp3.internal.http2.Settings) -> <init>
    696:699:void execute() -> execute
okhttp3.internal.http2.Http2Reader -> okhttp3.internal.http2.Http2Reader:
# {"fileName":"Http2Reader.java","id":"sourceFile"}
    java.util.logging.Logger logger -> logger
    okio.BufferedSource source -> source
    okhttp3.internal.http2.Http2Reader$ContinuationSource continuation -> continuation
    boolean client -> client
    okhttp3.internal.http2.Hpack$Reader hpackReader -> hpackReader
    70:75:void <init>(okio.BufferedSource,boolean) -> <init>
    78:91:void readConnectionPreface(okhttp3.internal.http2.Http2Reader$Handler) -> readConnectionPreface
    95:164:boolean nextFrame(boolean,okhttp3.internal.http2.Http2Reader$Handler) -> nextFrame
    169:185:void readHeaders(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readHeaders
    189:197:java.util.List readHeaderBlock(int,short,byte,int) -> readHeaderBlock
    203:214:void readData(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readData
    218:221:void readPriority(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readPriority
    224:229:void readPriority(okhttp3.internal.http2.Http2Reader$Handler,int) -> readPriority
    233:241:void readRstStream(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readRstStream
    245:288:void readSettings(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readSettings
    292:301:void readPushPromise(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readPushPromise
    305:311:void readPing(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readPing
    315:329:void readGoAway(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readGoAway
    333:337:void readWindowUpdate(okhttp3.internal.http2.Http2Reader$Handler,int,byte,int) -> readWindowUpdate
    340:341:void close() -> close
    397:399:int readMedium(okio.BufferedSource) -> readMedium
    404:408:int lengthWithoutPadding(int,byte,short) -> lengthWithoutPadding
    60:60:void <clinit>() -> <clinit>
okhttp3.internal.http2.Http2Reader$ContinuationSource -> okhttp3.internal.http2.Http2Reader$ContinuationSource:
# {"fileName":"Http2Reader.java","id":"sourceFile"}
    okio.BufferedSource source -> source
    int length -> length
    byte flags -> flags
    int streamId -> streamId
    int left -> left
    short padding -> padding
    357:359:void <init>(okio.BufferedSource) -> <init>
    362:373:long read(okio.Buffer,long) -> read
    377:377:okio.Timeout timeout() -> timeout
    381:381:void close() -> close
    384:393:void readContinuationHeader() -> readContinuationHeader
okhttp3.internal.http2.Http2Reader$Handler -> okhttp3.internal.http2.Http2Reader$Handler:
# {"fileName":"Http2Reader.java","id":"sourceFile"}
    void data(boolean,int,okio.BufferedSource,int) -> data
    void headers(boolean,int,int,java.util.List) -> headers
    void rstStream(int,okhttp3.internal.http2.ErrorCode) -> rstStream
    void settings(boolean,okhttp3.internal.http2.Settings) -> settings
    void ackSettings() -> ackSettings
    void ping(boolean,int,int) -> ping
    void goAway(int,okhttp3.internal.http2.ErrorCode,okio.ByteString) -> goAway
    void windowUpdate(int,long) -> windowUpdate
    void priority(int,int,int,boolean) -> priority
    void pushPromise(int,int,java.util.List) -> pushPromise
    void alternateService(int,java.lang.String,okio.ByteString,java.lang.String,int,long) -> alternateService
okhttp3.internal.http2.Http2Stream -> okhttp3.internal.http2.Http2Stream:
# {"fileName":"Http2Stream.java","id":"sourceFile"}
    long unacknowledgedBytesRead -> unacknowledgedBytesRead
    long bytesLeftInWriteWindow -> bytesLeftInWriteWindow
    int id -> id
    okhttp3.internal.http2.Http2Connection connection -> connection
    java.util.List requestHeaders -> requestHeaders
    java.util.List responseHeaders -> responseHeaders
    boolean hasResponseHeaders -> hasResponseHeaders
    okhttp3.internal.http2.Http2Stream$FramingSource source -> source
    okhttp3.internal.http2.Http2Stream$FramingSink sink -> sink
    okhttp3.internal.http2.Http2Stream$StreamTimeout readTimeout -> readTimeout
    okhttp3.internal.http2.Http2Stream$StreamTimeout writeTimeout -> writeTimeout
    okhttp3.internal.http2.ErrorCode errorCode -> errorCode
    boolean $assertionsDisabled -> $assertionsDisabled
    41:88:void <init>(int,okhttp3.internal.http2.Http2Connection,boolean,boolean,java.util.List) -> <init>
    91:91:int getId() -> getId
    106:114:boolean isOpen() -> isOpen
    119:120:boolean isLocallyInitiated() -> isLocallyInitiated
    124:124:okhttp3.internal.http2.Http2Connection getConnection() -> getConnection
    128:128:java.util.List getRequestHeaders() -> getRequestHeaders
    137:153:java.util.List takeResponseHeaders() -> takeResponseHeaders
    161:161:okhttp3.internal.http2.ErrorCode getErrorCode() -> getErrorCode
    171:188:void sendResponseHeaders(java.util.List,boolean) -> sendResponseHeaders
    191:191:okio.Timeout readTimeout() -> readTimeout
    195:195:okio.Timeout writeTimeout() -> writeTimeout
    200:200:okio.Source getSource() -> getSource
    210:215:okio.Sink getSink() -> getSink
    223:227:void close(okhttp3.internal.http2.ErrorCode) -> close
    234:238:void closeLater(okhttp3.internal.http2.ErrorCode) -> closeLater
    242:254:boolean closeInternal(okhttp3.internal.http2.ErrorCode) -> closeInternal
    258:277:void receiveHeaders(java.util.List) -> receiveHeaders
    280:282:void receiveData(okio.BufferedSource,int) -> receiveData
    285:295:void receiveFin() -> receiveFin
    298:302:void receiveRstStream(okhttp3.internal.http2.ErrorCode) -> receiveRstStream
    442:458:void cancelStreamIfNecessary() -> cancelStreamIfNecessary
    557:559:void addBytesToWriteWindow(long) -> addBytesToWriteWindow
    562:569:void checkOutNotClosed() -> checkOutNotClosed
    577:581:void waitForIo() -> waitForIo
    32:32:void <clinit>() -> <clinit>
okhttp3.internal.http2.Http2Stream$FramingSink -> okhttp3.internal.http2.Http2Stream$FramingSink:
# {"fileName":"Http2Stream.java","id":"sourceFile"}
    long EMIT_BUFFER_SIZE -> EMIT_BUFFER_SIZE
    okio.Buffer sendBuffer -> sendBuffer
    boolean closed -> closed
    boolean finished -> finished
    boolean $assertionsDisabled -> $assertionsDisabled
    okhttp3.internal.http2.Http2Stream this$0 -> this$0
    461:468:void <init>(okhttp3.internal.http2.Http2Stream) -> <init>
    478:483:void write(okio.Buffer,long) -> write
    491:512:void emitFrame(boolean) -> emitFrame
    515:523:void flush() -> flush
    526:526:okio.Timeout timeout() -> timeout
    530:550:void close() -> close
    461:461:void <clinit>() -> <clinit>
okhttp3.internal.http2.Http2Stream$FramingSource -> okhttp3.internal.http2.Http2Stream$FramingSource:
# {"fileName":"Http2Stream.java","id":"sourceFile"}
    okio.Buffer receiveBuffer -> receiveBuffer
    okio.Buffer readBuffer -> readBuffer
    long maxByteCount -> maxByteCount
    boolean closed -> closed
    boolean finished -> finished
    boolean $assertionsDisabled -> $assertionsDisabled
    okhttp3.internal.http2.Http2Stream this$0 -> this$0
    311:330:void <init>(okhttp3.internal.http2.Http2Stream,long) -> <init>
    333:363:long read(okio.Buffer,long) -> read
    368:376:void waitUntilReadable() -> waitUntilReadable
    379:416:void receive(okio.BufferedSource,long) -> receive
    419:419:okio.Timeout timeout() -> timeout
    423:429:void close() -> close
    432:438:void checkNotClosed() -> checkNotClosed
    309:309:void <clinit>() -> <clinit>
okhttp3.internal.http2.Http2Stream$StreamTimeout -> okhttp3.internal.http2.Http2Stream$StreamTimeout:
# {"fileName":"Http2Stream.java","id":"sourceFile"}
    okhttp3.internal.http2.Http2Stream this$0 -> this$0
    587:587:void <init>(okhttp3.internal.http2.Http2Stream) -> <init>
    589:590:void timedOut() -> timedOut
    593:597:java.io.IOException newTimeoutException(java.io.IOException) -> newTimeoutException
    601:602:void exitAndThrowIfTimedOut() -> exitAndThrowIfTimedOut
okhttp3.internal.http2.Http2Writer -> okhttp3.internal.http2.Http2Writer:
# {"fileName":"Http2Writer.java","id":"sourceFile"}
    java.util.logging.Logger logger -> logger
    okio.BufferedSink sink -> sink
    boolean client -> client
    okio.Buffer hpackBuffer -> hpackBuffer
    int maxFrameSize -> maxFrameSize
    boolean closed -> closed
    okhttp3.internal.http2.Hpack$Writer hpackWriter -> hpackWriter
    57:63:void <init>(okio.BufferedSink,boolean) -> <init>
    66:73:void connectionPreface() -> connectionPreface
    77:88:void applyAndAckSettings(okhttp3.internal.http2.Settings) -> applyAndAckSettings
    105:117:void pushPromise(int,int,java.util.List) -> pushPromise
    120:122:void flush() -> flush
    126:128:void synStream(boolean,int,int,java.util.List) -> synStream
    132:134:void synReply(boolean,int,java.util.List) -> synReply
    138:140:void headers(int,java.util.List) -> headers
    144:153:void rstStream(int,okhttp3.internal.http2.ErrorCode) -> rstStream
    157:157:int maxDataLength() -> maxDataLength
    170:174:void data(boolean,int,okio.Buffer,int) -> data
    177:182:void dataFrame(int,byte,okio.Buffer,int) -> dataFrame
    186:204:void settings(okhttp3.internal.http2.Settings) -> settings
    211:220:void ping(boolean,int,int) -> ping
    232:245:void goAway(int,okhttp3.internal.http2.ErrorCode,byte[]) -> goAway
    252:263:void windowUpdate(int,long) -> windowUpdate
    266:275:void frameHeader(int,int,byte,byte) -> frameHeader
    278:280:void close() -> close
    283:286:void writeMedium(okio.BufferedSink,int) -> writeMedium
    289:295:void writeContinuationFrames(int,long) -> writeContinuationFrames
    298:310:void headers(boolean,int,java.util.List) -> headers
    47:47:void <clinit>() -> <clinit>
okhttp3.internal.http2.Huffman -> okhttp3.internal.http2.Huffman:
# {"fileName":"Huffman.java","id":"sourceFile"}
    int[] CODES -> CODES
    byte[] CODE_LENGTHS -> CODE_LENGTHS
    okhttp3.internal.http2.Huffman INSTANCE -> INSTANCE
    okhttp3.internal.http2.Huffman$Node root -> root
    82:82:okhttp3.internal.http2.Huffman get() -> get
    85:89:void <init>() -> <init>
    92:115:void encode(okio.ByteString,okio.BufferedSink) -> encode
    118:125:int encodedLength(okio.ByteString) -> encodedLength
    129:163:byte[] decode(byte[]) -> decode
    167:170:void buildTree() -> buildTree
    173:194:void addCode(int,int,byte) -> addCode
    37:79:void <clinit>() -> <clinit>
okhttp3.internal.http2.Huffman$Node -> okhttp3.internal.http2.Huffman$Node:
# {"fileName":"Huffman.java","id":"sourceFile"}
    okhttp3.internal.http2.Huffman$Node[] children -> children
    int symbol -> symbol
    int terminalBits -> terminalBits
    208:212:void <init>() -> <init>
    220:225:void <init>(int,int) -> <init>
okhttp3.internal.http2.Ping -> okhttp3.internal.http2.Ping:
# {"fileName":"Ping.java","id":"sourceFile"}
    java.util.concurrent.CountDownLatch latch -> latch
    long sent -> sent
    long received -> received
    25:30:void <init>() -> <init>
    33:35:void send() -> send
    38:41:void receive() -> receive
    44:47:void cancel() -> cancel
    54:55:long roundTripTime() -> roundTripTime
    63:66:long roundTripTime(long,java.util.concurrent.TimeUnit) -> roundTripTime
okhttp3.internal.http2.PushObserver -> okhttp3.internal.http2.PushObserver:
# {"fileName":"PushObserver.java","id":"sourceFile"}
    okhttp3.internal.http2.PushObserver CANCEL -> CANCEL
    boolean onRequest(int,java.util.List) -> onRequest
    boolean onHeaders(int,java.util.List,boolean) -> onHeaders
    boolean onData(int,okio.BufferedSource,int,boolean) -> onData
    void onReset(int,okhttp3.internal.http2.ErrorCode) -> onReset
    76:76:void <clinit>() -> <clinit>
okhttp3.internal.http2.PushObserver$1 -> okhttp3.internal.http2.PushObserver$1:
# {"fileName":"PushObserver.java","id":"sourceFile"}
    76:76:void <init>() -> <init>
    79:79:boolean onRequest(int,java.util.List) -> onRequest
    83:83:boolean onHeaders(int,java.util.List,boolean) -> onHeaders
    88:89:boolean onData(int,okio.BufferedSource,int,boolean) -> onData
    93:93:void onReset(int,okhttp3.internal.http2.ErrorCode) -> onReset
okhttp3.internal.http2.Settings -> okhttp3.internal.http2.Settings:
# {"fileName":"Settings.java","id":"sourceFile"}
    int DEFAULT_INITIAL_WINDOW_SIZE -> DEFAULT_INITIAL_WINDOW_SIZE
    int HEADER_TABLE_SIZE -> HEADER_TABLE_SIZE
    int ENABLE_PUSH -> ENABLE_PUSH
    int MAX_CONCURRENT_STREAMS -> MAX_CONCURRENT_STREAMS
    int MAX_FRAME_SIZE -> MAX_FRAME_SIZE
    int MAX_HEADER_LIST_SIZE -> MAX_HEADER_LIST_SIZE
    int INITIAL_WINDOW_SIZE -> INITIAL_WINDOW_SIZE
    int COUNT -> COUNT
    int set -> set
    int[] values -> values
    24:51:void <init>() -> <init>
    54:56:void clear() -> clear
    59:66:okhttp3.internal.http2.Settings set(int,int) -> set
    71:72:boolean isSet(int) -> isSet
    77:77:int get(int) -> get
    82:82:int size() -> size
    87:88:int getHeaderTableSize() -> getHeaderTableSize
    93:94:boolean getEnablePush(boolean) -> getEnablePush
    99:100:int getMaxConcurrentStreams(int) -> getMaxConcurrentStreams
    104:105:int getMaxFrameSize(int) -> getMaxFrameSize
    109:110:int getMaxHeaderListSize(int) -> getMaxHeaderListSize
    114:115:int getInitialWindowSize() -> getInitialWindowSize
    123:127:void merge(okhttp3.internal.http2.Settings) -> merge
okhttp3.internal.http2.StreamResetException -> okhttp3.internal.http2.StreamResetException:
# {"fileName":"StreamResetException.java","id":"sourceFile"}
    okhttp3.internal.http2.ErrorCode errorCode -> errorCode
    25:27:void <init>(okhttp3.internal.http2.ErrorCode) -> <init>
okhttp3.internal.io.FileSystem -> okhttp3.internal.io.FileSystem:
# {"fileName":"FileSystem.java","id":"sourceFile"}
    okhttp3.internal.io.FileSystem SYSTEM -> SYSTEM
    okio.Source source(java.io.File) -> source
    okio.Sink sink(java.io.File) -> sink
    okio.Sink appendingSink(java.io.File) -> appendingSink
    void delete(java.io.File) -> delete
    boolean exists(java.io.File) -> exists
    long size(java.io.File) -> size
    void rename(java.io.File,java.io.File) -> rename
    void deleteContents(java.io.File) -> deleteContents
    42:42:void <clinit>() -> <clinit>
okhttp3.internal.io.FileSystem$1 -> okhttp3.internal.io.FileSystem$1:
# {"fileName":"FileSystem.java","id":"sourceFile"}
    42:42:void <init>() -> <init>
    44:44:okio.Source source(java.io.File) -> source
    49:53:okio.Sink sink(java.io.File) -> sink
    59:63:okio.Sink appendingSink(java.io.File) -> appendingSink
    69:72:void delete(java.io.File) -> delete
    75:75:boolean exists(java.io.File) -> exists
    79:79:long size(java.io.File) -> size
    83:87:void rename(java.io.File,java.io.File) -> rename
    90:102:void deleteContents(java.io.File) -> deleteContents
okhttp3.internal.platform.AndroidPlatform -> okhttp3.internal.platform.AndroidPlatform:
# {"fileName":"AndroidPlatform.java","id":"sourceFile"}
    int MAX_LOG_LENGTH -> MAX_LOG_LENGTH
    java.lang.Class sslParametersClass -> sslParametersClass
    okhttp3.internal.platform.OptionalMethod setUseSessionTickets -> setUseSessionTickets
    okhttp3.internal.platform.OptionalMethod setHostname -> setHostname
    okhttp3.internal.platform.OptionalMethod getAlpnSelectedProtocol -> getAlpnSelectedProtocol
    okhttp3.internal.platform.OptionalMethod setAlpnProtocols -> setAlpnProtocols
    okhttp3.internal.platform.AndroidPlatform$CloseGuard closeGuard -> closeGuard
    48:58:void <init>(java.lang.Class,okhttp3.internal.platform.OptionalMethod,okhttp3.internal.platform.OptionalMethod,okhttp3.internal.platform.OptionalMethod,okhttp3.internal.platform.OptionalMethod) -> <init>
    63:74:void connectSocket(java.net.Socket,java.net.InetSocketAddress,int) -> connectSocket
    77:95:javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory) -> trustManager
    101:111:void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> configureTlsExtensions
    114:118:java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> getSelectedProtocol
    122:135:void log(int,java.lang.String,java.lang.Throwable) -> log
    138:138:java.lang.Object getStackTraceForCloseable(java.lang.String) -> getStackTraceForCloseable
    142:147:void logCloseableLeak(java.lang.String,java.lang.Object) -> logCloseableLeak
    151:160:boolean isCleartextTrafficPermitted(java.lang.String) -> isCleartextTrafficPermitted
    166:173:okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager) -> buildCertificateChainCleaner
    182:210:okhttp3.internal.platform.Platform buildIfSupported() -> buildIfSupported
okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner -> okhttp3.internal.platform.AndroidPlatform$AndroidCertificateChainCleaner:
# {"fileName":"AndroidPlatform.java","id":"sourceFile"}
    java.lang.Object x509TrustManagerExtensions -> x509TrustManagerExtensions
    java.lang.reflect.Method checkServerTrusted -> checkServerTrusted
    222:225:void <init>(java.lang.Object,java.lang.reflect.Method) -> <init>
    231:239:java.util.List clean(java.util.List,java.lang.String) -> clean
    244:244:boolean equals(java.lang.Object) -> equals
    248:248:int hashCode() -> hashCode
okhttp3.internal.platform.AndroidPlatform$CloseGuard -> okhttp3.internal.platform.AndroidPlatform$CloseGuard:
# {"fileName":"AndroidPlatform.java","id":"sourceFile"}
    java.lang.reflect.Method getMethod -> getMethod
    java.lang.reflect.Method openMethod -> openMethod
    java.lang.reflect.Method warnIfOpenMethod -> warnIfOpenMethod
    262:266:void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method) -> <init>
    269:277:java.lang.Object createAndOpen(java.lang.String) -> createAndOpen
    281:289:boolean warnIfOpen(java.lang.Object) -> warnIfOpen
    298:307:okhttp3.internal.platform.AndroidPlatform$CloseGuard get() -> get
okhttp3.internal.platform.Jdk9Platform -> okhttp3.internal.platform.Jdk9Platform:
# {"fileName":"Jdk9Platform.java","id":"sourceFile"}
    java.lang.reflect.Method setProtocolMethod -> setProtocolMethod
    java.lang.reflect.Method getProtocolMethod -> getProtocolMethod
    34:37:void <init>(java.lang.reflect.Method,java.lang.reflect.Method) -> <init>
    43:54:void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> configureTlsExtensions
    59:69:java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> getSelectedProtocol
    78:78:javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory) -> trustManager
    85:94:okhttp3.internal.platform.Jdk9Platform buildIfSupported() -> buildIfSupported
okhttp3.internal.platform.JdkWithJettyBootPlatform -> okhttp3.internal.platform.JdkWithJettyBootPlatform:
# {"fileName":"JdkWithJettyBootPlatform.java","id":"sourceFile"}
    java.lang.reflect.Method putMethod -> putMethod
    java.lang.reflect.Method getMethod -> getMethod
    java.lang.reflect.Method removeMethod -> removeMethod
    java.lang.Class clientProviderClass -> clientProviderClass
    java.lang.Class serverProviderClass -> serverProviderClass
    38:44:void <init>(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Class,java.lang.Class) -> <init>
    48:57:void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> configureTlsExtensions
    61:65:void afterHandshake(javax.net.ssl.SSLSocket) -> afterHandshake
    69:78:java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> getSelectedProtocol
    85:98:okhttp3.internal.platform.Platform buildIfSupported() -> buildIfSupported
okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider -> okhttp3.internal.platform.JdkWithJettyBootPlatform$JettyNegoProvider:
# {"fileName":"JdkWithJettyBootPlatform.java","id":"sourceFile"}
    java.util.List protocols -> protocols
    boolean unsupported -> unsupported
    java.lang.String selected -> selected
    113:115:void <init>(java.util.List) -> <init>
    118:145:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[]) -> invoke
okhttp3.internal.platform.OptionalMethod -> okhttp3.internal.platform.OptionalMethod:
# {"fileName":"OptionalMethod.java","id":"sourceFile"}
    java.lang.Class returnType -> returnType
    java.lang.String methodName -> methodName
    java.lang.Class[] methodParams -> methodParams
    45:49:void <init>(java.lang.Class,java.lang.String,java.lang.Class[]) -> <init>
    55:55:boolean isSupported(java.lang.Object) -> isSupported
    66:73:java.lang.Object invokeOptional(java.lang.Object,java.lang.Object[]) -> invokeOptional
    86:94:java.lang.Object invokeOptionalWithoutCheckedException(java.lang.Object,java.lang.Object[]) -> invokeOptionalWithoutCheckedException
    106:116:java.lang.Object invoke(java.lang.Object,java.lang.Object[]) -> invoke
    129:137:java.lang.Object invokeWithoutCheckedException(java.lang.Object,java.lang.Object[]) -> invokeWithoutCheckedException
    147:158:java.lang.reflect.Method getMethod(java.lang.Class) -> getMethod
    162:171:java.lang.reflect.Method getPublicMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getPublicMethod
okhttp3.internal.platform.Platform -> okhttp3.internal.platform.Platform:
# {"fileName":"Platform.java","id":"sourceFile"}
    okhttp3.internal.platform.Platform PLATFORM -> PLATFORM
    int INFO -> INFO
    int WARN -> WARN
    java.util.logging.Logger logger -> logger
    72:72:void <init>() -> <init>
    79:79:okhttp3.internal.platform.Platform get() -> get
    84:84:java.lang.String getPrefix() -> getPrefix
    92:97:javax.net.ssl.X509TrustManager trustManager(javax.net.ssl.SSLSocketFactory) -> trustManager
    108:108:void configureTlsExtensions(javax.net.ssl.SSLSocket,java.lang.String,java.util.List) -> configureTlsExtensions
    115:115:void afterHandshake(javax.net.ssl.SSLSocket) -> afterHandshake
    119:119:java.lang.String getSelectedProtocol(javax.net.ssl.SSLSocket) -> getSelectedProtocol
    124:125:void connectSocket(java.net.Socket,java.net.InetSocketAddress,int) -> connectSocket
    128:130:void log(int,java.lang.String,java.lang.Throwable) -> log
    133:133:boolean isCleartextTrafficPermitted(java.lang.String) -> isCleartextTrafficPermitted
    142:145:java.lang.Object getStackTraceForCloseable(java.lang.String) -> getStackTraceForCloseable
    149:154:void logCloseableLeak(java.lang.String,java.lang.Object) -> logCloseableLeak
    157:163:java.util.List alpnProtocolNames(java.util.List) -> alpnProtocolNames
    167:167:okhttp3.internal.tls.CertificateChainCleaner buildCertificateChainCleaner(javax.net.ssl.X509TrustManager) -> buildCertificateChainCleaner
    172:191:okhttp3.internal.platform.Platform findPlatform() -> findPlatform
    199:206:byte[] concatLengthPrefixed(java.util.List) -> concatLengthPrefixed
    210:229:java.lang.Object readFieldOrNull(java.lang.Object,java.lang.Class,java.lang.String) -> readFieldOrNull
    73:76:void <clinit>() -> <clinit>
okhttp3.internal.tls.BasicCertificateChainCleaner -> okhttp3.internal.tls.BasicCertificateChainCleaner:
# {"fileName":"BasicCertificateChainCleaner.java","id":"sourceFile"}
    int MAX_SIGNERS -> MAX_SIGNERS
    okhttp3.internal.tls.TrustRootIndex trustRootIndex -> trustRootIndex
    43:45:void <init>(okhttp3.internal.tls.TrustRootIndex) -> <init>
    56:101:java.util.List clean(java.util.List,java.lang.String) -> clean
    106:111:boolean verifySignature(java.security.cert.X509Certificate,java.security.cert.X509Certificate) -> verifySignature
    116:116:int hashCode() -> hashCode
    120:122:boolean equals(java.lang.Object) -> equals
okhttp3.internal.tls.CertificateChainCleaner -> okhttp3.internal.tls.CertificateChainCleaner:
# {"fileName":"CertificateChainCleaner.java","id":"sourceFile"}
    36:36:void <init>() -> <init>
    java.util.List clean(java.util.List,java.lang.String) -> clean
    41:41:okhttp3.internal.tls.CertificateChainCleaner get(javax.net.ssl.X509TrustManager) -> get
    45:45:okhttp3.internal.tls.CertificateChainCleaner get(java.security.cert.X509Certificate[]) -> get
okhttp3.internal.tls.DistinguishedNameParser -> okhttp3.internal.tls.DistinguishedNameParser:
# {"fileName":"DistinguishedNameParser.java","id":"sourceFile"}
    java.lang.String dn -> dn
    int length -> length
    int pos -> pos
    int beg -> beg
    int end -> end
    int cur -> cur
    char[] chars -> chars
    38:44:void <init>(javax.security.auth.x500.X500Principal) -> <init>
    50:99:java.lang.String nextAT() -> nextAT
    104:132:java.lang.String quotedAV() -> quotedAV
    137:182:java.lang.String hexAV() -> hexAV
    187:225:java.lang.String escapedAV() -> escapedAV
    232:256:char getEscaped() -> getEscaped
    263:300:char getUTF8() -> getUTF8
    311:339:int getByte(int) -> getByte
    350:404:java.lang.String findMostSpecific(java.lang.String) -> findMostSpecific
okhttp3.internal.tls.OkHostnameVerifier -> okhttp3.internal.tls.OkHostnameVerifier:
# {"fileName":"OkHostnameVerifier.java","id":"sourceFile"}
    okhttp3.internal.tls.OkHostnameVerifier INSTANCE -> INSTANCE
    int ALT_DNS_NAME -> ALT_DNS_NAME
    int ALT_IPA_NAME -> ALT_IPA_NAME
    43:44:void <init>() -> <init>
    49:52:boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
    57:59:boolean verify(java.lang.String,java.security.cert.X509Certificate) -> verify
    64:70:boolean verifyIpAddress(java.lang.String,java.security.cert.X509Certificate) -> verifyIpAddress
    75:94:boolean verifyHostname(java.lang.String,java.security.cert.X509Certificate) -> verifyHostname
    98:103:java.util.List allSubjectAltNames(java.security.cert.X509Certificate) -> allSubjectAltNames
    107:131:java.util.List getSubjectAltNames(java.security.cert.X509Certificate,int) -> getSubjectAltNames
    145:227:boolean verifyHostname(java.lang.String,java.lang.String) -> verifyHostname
    38:38:void <clinit>() -> <clinit>
okhttp3.internal.tls.TrustRootIndex -> okhttp3.internal.tls.TrustRootIndex:
# {"fileName":"TrustRootIndex.java","id":"sourceFile"}
    30:30:void <init>() -> <init>
    java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate) -> findByIssuerAndSignature
    38:43:okhttp3.internal.tls.TrustRootIndex get(javax.net.ssl.X509TrustManager) -> get
    48:48:okhttp3.internal.tls.TrustRootIndex get(java.security.cert.X509Certificate[]) -> get
okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex -> okhttp3.internal.tls.TrustRootIndex$AndroidTrustRootIndex:
# {"fileName":"TrustRootIndex.java","id":"sourceFile"}
    javax.net.ssl.X509TrustManager trustManager -> trustManager
    java.lang.reflect.Method findByIssuerAndSignatureMethod -> findByIssuerAndSignatureMethod
    64:67:void <init>(javax.net.ssl.X509TrustManager,java.lang.reflect.Method) -> <init>
    71:79:java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate) -> findByIssuerAndSignature
    85:93:boolean equals(java.lang.Object) -> equals
    98:98:int hashCode() -> hashCode
okhttp3.internal.tls.TrustRootIndex$BasicTrustRootIndex -> okhttp3.internal.tls.TrustRootIndex$BasicTrustRootIndex:
# {"fileName":"TrustRootIndex.java","id":"sourceFile"}
    java.util.Map subjectToCaCerts -> subjectToCaCerts
    106:117:void <init>(java.security.cert.X509Certificate[]) -> <init>
    120:133:java.security.cert.X509Certificate findByIssuerAndSignature(java.security.cert.X509Certificate) -> findByIssuerAndSignature
    137:139:boolean equals(java.lang.Object) -> equals
    143:143:int hashCode() -> hashCode
okhttp3.internal.ws.RealWebSocket -> okhttp3.internal.ws.RealWebSocket:
# {"fileName":"RealWebSocket.java","id":"sourceFile"}
    java.util.List ONLY_HTTP1 -> ONLY_HTTP1
    long MAX_QUEUE_SIZE -> MAX_QUEUE_SIZE
    long CANCEL_AFTER_CLOSE_MILLIS -> CANCEL_AFTER_CLOSE_MILLIS
    okhttp3.Request originalRequest -> originalRequest
    okhttp3.WebSocketListener listener -> listener
    java.util.Random random -> random
    java.lang.String key -> key
    okhttp3.Call call -> call
    java.lang.Runnable writerRunnable -> writerRunnable
    okhttp3.internal.ws.WebSocketReader reader -> reader
    okhttp3.internal.ws.WebSocketWriter writer -> writer
    java.util.concurrent.ScheduledExecutorService executor -> executor
    okhttp3.internal.ws.RealWebSocket$Streams streams -> streams
    java.util.ArrayDeque pongQueue -> pongQueue
    java.util.ArrayDeque messageAndCloseQueue -> messageAndCloseQueue
    long queueSize -> queueSize
    boolean enqueuedClose -> enqueuedClose
    java.util.concurrent.ScheduledFuture cancelFuture -> cancelFuture
    int receivedCloseCode -> receivedCloseCode
    java.lang.String receivedCloseReason -> receivedCloseReason
    boolean failed -> failed
    int pingCount -> pingCount
    int pongCount -> pongCount
    boolean $assertionsDisabled -> $assertionsDisabled
    100:154:void <init>(okhttp3.Request,okhttp3.WebSocketListener,java.util.Random) -> <init>
    157:157:okhttp3.Request request() -> request
    161:161:long queueSize() -> queueSize
    165:166:void cancel() -> cancel
    169:211:void connect(okhttp3.OkHttpClient) -> connect
    214:238:void checkResponse(okhttp3.Response) -> checkResponse
    242:256:void initReaderAndWriter(java.lang.String,long,okhttp3.internal.ws.RealWebSocket$Streams) -> initReaderAndWriter
    260:264:void loopReader() -> loopReader
    272:276:boolean processNextFrame() -> processNextFrame
    284:285:void awaitTermination(int,java.util.concurrent.TimeUnit) -> awaitTermination
    291:296:void tearDown() -> tearDown
    299:299:int pingCount() -> pingCount
    303:303:int pongCount() -> pongCount
    307:308:void onReadMessage(java.lang.String) -> onReadMessage
    311:312:void onReadMessage(okio.ByteString) -> onReadMessage
    316:321:void onReadPing(okio.ByteString) -> onReadPing
    325:326:void onReadPong(okio.ByteString) -> onReadPong
    329:353:void onReadClose(int,java.lang.String) -> onReadClose
    358:359:boolean send(java.lang.String) -> send
    363:364:boolean send(okio.ByteString) -> send
    369:381:boolean send(okio.ByteString,int) -> send
    386:390:boolean pong(okio.ByteString) -> pong
    394:394:boolean close(int,java.lang.String) -> close
    398:416:boolean close(int,java.lang.String,long) -> close
    420:425:void runWriter() -> runWriter
    443:504:boolean writeOneFrame() -> writeOneFrame
    519:529:void writePingFrame() -> writePingFrame
    533:547:void failWebSocket(java.lang.Exception,okhttp3.Response) -> failWebSocket
    53:54:void <clinit>() -> <clinit>
okhttp3.internal.ws.RealWebSocket$1 -> okhttp3.internal.ws.RealWebSocket$1:
# {"fileName":"RealWebSocket.java","id":"sourceFile"}
    okhttp3.internal.ws.RealWebSocket this$0 -> this$0
    144:144:void <init>(okhttp3.internal.ws.RealWebSocket) -> <init>
    147:152:void run() -> run
okhttp3.internal.ws.RealWebSocket$2 -> okhttp3.internal.ws.RealWebSocket$2:
# {"fileName":"RealWebSocket.java","id":"sourceFile"}
    okhttp3.Request val$request -> val$request
    int val$pingIntervalMillis -> val$pingIntervalMillis
    okhttp3.internal.ws.RealWebSocket this$0 -> this$0
    180:180:void <init>(okhttp3.internal.ws.RealWebSocket,okhttp3.Request,int) -> <init>
    183:205:void onResponse(okhttp3.Call,okhttp3.Response) -> onResponse
    208:209:void onFailure(okhttp3.Call,java.io.IOException) -> onFailure
okhttp3.internal.ws.RealWebSocket$CancelRunnable -> okhttp3.internal.ws.RealWebSocket$CancelRunnable:
# {"fileName":"RealWebSocket.java","id":"sourceFile"}
    okhttp3.internal.ws.RealWebSocket this$0 -> this$0
    583:583:void <init>(okhttp3.internal.ws.RealWebSocket) -> <init>
    585:586:void run() -> run
okhttp3.internal.ws.RealWebSocket$Close -> okhttp3.internal.ws.RealWebSocket$Close:
# {"fileName":"RealWebSocket.java","id":"sourceFile"}
    int code -> code
    okio.ByteString reason -> reason
    long cancelAfterCloseMillis -> cancelAfterCloseMillis
    564:568:void <init>(int,okio.ByteString,long) -> <init>
okhttp3.internal.ws.RealWebSocket$Message -> okhttp3.internal.ws.RealWebSocket$Message:
# {"fileName":"RealWebSocket.java","id":"sourceFile"}
    int formatOpcode -> formatOpcode
    okio.ByteString data -> data
    553:556:void <init>(int,okio.ByteString) -> <init>
okhttp3.internal.ws.RealWebSocket$PingRunnable -> okhttp3.internal.ws.RealWebSocket$PingRunnable:
# {"fileName":"RealWebSocket.java","id":"sourceFile"}
    okhttp3.internal.ws.RealWebSocket this$0 -> this$0
    509:510:void <init>(okhttp3.internal.ws.RealWebSocket) -> <init>
    513:514:void run() -> run
okhttp3.internal.ws.RealWebSocket$Streams -> okhttp3.internal.ws.RealWebSocket$Streams:
# {"fileName":"RealWebSocket.java","id":"sourceFile"}
    boolean client -> client
    okio.BufferedSource source -> source
    okio.BufferedSink sink -> sink
    576:580:void <init>(boolean,okio.BufferedSource,okio.BufferedSink) -> <init>
okhttp3.internal.ws.WebSocketProtocol -> okhttp3.internal.ws.WebSocketProtocol:
# {"fileName":"WebSocketProtocol.java","id":"sourceFile"}
    java.lang.String ACCEPT_MAGIC -> ACCEPT_MAGIC
    int B0_FLAG_FIN -> B0_FLAG_FIN
    int B0_FLAG_RSV1 -> B0_FLAG_RSV1
    int B0_FLAG_RSV2 -> B0_FLAG_RSV2
    int B0_FLAG_RSV3 -> B0_FLAG_RSV3
    int B0_MASK_OPCODE -> B0_MASK_OPCODE
    int OPCODE_FLAG_CONTROL -> OPCODE_FLAG_CONTROL
    int B1_FLAG_MASK -> B1_FLAG_MASK
    int B1_MASK_LENGTH -> B1_MASK_LENGTH
    int OPCODE_CONTINUATION -> OPCODE_CONTINUATION
    int OPCODE_TEXT -> OPCODE_TEXT
    int OPCODE_BINARY -> OPCODE_BINARY
    int OPCODE_CONTROL_CLOSE -> OPCODE_CONTROL_CLOSE
    int OPCODE_CONTROL_PING -> OPCODE_CONTROL_PING
    int OPCODE_CONTROL_PONG -> OPCODE_CONTROL_PONG
    long PAYLOAD_BYTE_MAX -> PAYLOAD_BYTE_MAX
    long CLOSE_MESSAGE_MAX -> CLOSE_MESSAGE_MAX
    int PAYLOAD_SHORT -> PAYLOAD_SHORT
    long PAYLOAD_SHORT_MAX -> PAYLOAD_SHORT_MAX
    int PAYLOAD_LONG -> PAYLOAD_LONG
    int CLOSE_CLIENT_GOING_AWAY -> CLOSE_CLIENT_GOING_AWAY
    int CLOSE_PROTOCOL_EXCEPTION -> CLOSE_PROTOCOL_EXCEPTION
    int CLOSE_NO_STATUS_CODE -> CLOSE_NO_STATUS_CODE
    int CLOSE_ABNORMAL_TERMINATION -> CLOSE_ABNORMAL_TERMINATION
    101:106:void toggleMask(byte[],long,byte[],long) -> toggleMask
    109:114:java.lang.String closeCodeExceptionMessage(int) -> closeCodeExceptionMessage
    119:121:void validateCloseCode(int) -> validateCloseCode
    124:124:java.lang.String acceptHeader(java.lang.String) -> acceptHeader
    127:128:void <init>() -> <init>
okhttp3.internal.ws.WebSocketReader -> okhttp3.internal.ws.WebSocketReader:
# {"fileName":"WebSocketReader.java","id":"sourceFile"}
    boolean isClient -> isClient
    okio.BufferedSource source -> source
    okhttp3.internal.ws.WebSocketReader$FrameCallback frameCallback -> frameCallback
    boolean closed -> closed
    int opcode -> opcode
    long frameLength -> frameLength
    long frameBytesRead -> frameBytesRead
    boolean isFinalFrame -> isFinalFrame
    boolean isControlFrame -> isControlFrame
    boolean isMasked -> isMasked
    byte[] maskKey -> maskKey
    byte[] maskBuffer -> maskBuffer
    75:84:void <init>(boolean,okio.BufferedSource,okhttp3.internal.ws.WebSocketReader$FrameCallback) -> <init>
    97:103:void processNextFrame() -> processNextFrame
    106:166:void readHeader() -> readHeader
    169:210:void readControlFrame() -> readControlFrame
    213:226:void readMessageFrame() -> readMessageFrame
    230:237:void readUntilNonControlFrame() -> readUntilNonControlFrame
    246:275:void readMessage(okio.Buffer) -> readMessage
okhttp3.internal.ws.WebSocketReader$FrameCallback -> okhttp3.internal.ws.WebSocketReader$FrameCallback:
# {"fileName":"WebSocketReader.java","id":"sourceFile"}
    void onReadMessage(java.lang.String) -> onReadMessage
    void onReadMessage(okio.ByteString) -> onReadMessage
    void onReadPing(okio.ByteString) -> onReadPing
    void onReadPong(okio.ByteString) -> onReadPong
    void onReadClose(int,java.lang.String) -> onReadClose
okhttp3.internal.ws.WebSocketWriter -> okhttp3.internal.ws.WebSocketWriter:
# {"fileName":"WebSocketWriter.java","id":"sourceFile"}
    boolean isClient -> isClient
    java.util.Random random -> random
    okio.BufferedSink sink -> sink
    boolean writerClosed -> writerClosed
    okio.Buffer buffer -> buffer
    okhttp3.internal.ws.WebSocketWriter$FrameSink frameSink -> frameSink
    boolean activeWriter -> activeWriter
    byte[] maskKey -> maskKey
    byte[] maskBuffer -> maskBuffer
    boolean $assertionsDisabled -> $assertionsDisabled
    56:74:void <init>(boolean,okio.BufferedSink,java.util.Random) -> <init>
    78:81:void writePing(okio.ByteString) -> writePing
    85:88:void writePong(okio.ByteString) -> writePong
    98:118:void writeClose(int,okio.ByteString) -> writeClose
    121:151:void writeControlFrameSynchronized(int,okio.ByteString) -> writeControlFrameSynchronized
    158:169:okio.Sink newMessageSink(int,long) -> newMessageSink
    174:218:void writeMessageFrameSynchronized(int,long,boolean,boolean) -> writeMessageFrameSynchronized
    47:47:void <clinit>() -> <clinit>
okhttp3.internal.ws.WebSocketWriter$FrameSink -> okhttp3.internal.ws.WebSocketWriter$FrameSink:
# {"fileName":"WebSocketWriter.java","id":"sourceFile"}
    int formatOpcode -> formatOpcode
    long contentLength -> contentLength
    boolean isFirstFrame -> isFirstFrame
    boolean closed -> closed
    okhttp3.internal.ws.WebSocketWriter this$0 -> this$0
    220:220:void <init>(okhttp3.internal.ws.WebSocketWriter) -> <init>
    227:243:void write(okio.Buffer,long) -> write
    246:252:void flush() -> flush
    255:255:okio.Timeout timeout() -> timeout
    260:267:void close() -> close
okio.AsyncTimeout -> okio.AsyncTimeout:
# {"fileName":"AsyncTimeout.java","id":"sourceFile"}
    int TIMEOUT_WRITE_SIZE -> TIMEOUT_WRITE_SIZE
    long IDLE_TIMEOUT_MILLIS -> IDLE_TIMEOUT_MILLIS
    long IDLE_TIMEOUT_NANOS -> IDLE_TIMEOUT_NANOS
    okio.AsyncTimeout head -> head
    boolean inQueue -> inQueue
    okio.AsyncTimeout next -> next
    long timeoutAt -> timeoutAt
    40:40:void <init>() -> <init>
    72:80:void enter() -> enter
    85:115:void scheduleTimeout(okio.AsyncTimeout,long,boolean) -> scheduleTimeout
    119:121:boolean exit() -> exit
    127:136:boolean cancelScheduledTimeout(okio.AsyncTimeout) -> cancelScheduledTimeout
    144:144:long remainingNanos(long) -> remainingNanos
    152:152:void timedOut() -> timedOut
    159:159:okio.Sink sink(okio.Sink) -> sink
    231:231:okio.Source source(okio.Source) -> source
    273:275:void exit(boolean) -> exit
    283:284:java.io.IOException exit(java.io.IOException) -> exit
    293:297:java.io.IOException newTimeoutException(java.io.IOException) -> newTimeoutException
    341:367:okio.AsyncTimeout awaitTimeout() -> awaitTimeout
    40:40:okio.AsyncTimeout access$000() -> access$000
    40:40:okio.AsyncTimeout access$002(okio.AsyncTimeout) -> access$002
    49:50:void <clinit>() -> <clinit>
okio.AsyncTimeout$1 -> okio.AsyncTimeout$1:
# {"fileName":"AsyncTimeout.java","id":"sourceFile"}
    okio.Sink val$sink -> val$sink
    okio.AsyncTimeout this$0 -> this$0
    159:159:void <init>(okio.AsyncTimeout,okio.Sink) -> <init>
    161:188:void write(okio.Buffer,long) -> write
    191:201:void flush() -> flush
    204:214:void close() -> close
    217:217:okio.Timeout timeout() -> timeout
    221:221:java.lang.String toString() -> toString
okio.AsyncTimeout$2 -> okio.AsyncTimeout$2:
# {"fileName":"AsyncTimeout.java","id":"sourceFile"}
    okio.Source val$source -> val$source
    okio.AsyncTimeout this$0 -> this$0
    231:231:void <init>(okio.AsyncTimeout,okio.Source) -> <init>
    233:242:long read(okio.Buffer,long) -> read
    247:256:void close() -> close
    259:259:okio.Timeout timeout() -> timeout
    263:263:java.lang.String toString() -> toString
okio.AsyncTimeout$Watchdog -> okio.AsyncTimeout$Watchdog:
# {"fileName":"AsyncTimeout.java","id":"sourceFile"}
    302:304:void <init>() -> <init>
    310:327:void run() -> run
okio.Base64 -> okio.Base64:
# {"fileName":"Base64.java","id":"sourceFile"}
    byte[] MAP -> MAP
    byte[] URL_MAP -> URL_MAP
    26:27:void <init>() -> <init>
    31:107:byte[] decode(java.lang.String) -> decode
    125:125:java.lang.String encode(byte[]) -> encode
    129:129:java.lang.String encodeUrl(byte[]) -> encodeUrl
    133:159:java.lang.String encode(byte[],byte[]) -> encode
    110:117:void <clinit>() -> <clinit>
okio.Buffer -> okio.Buffer:
# {"fileName":"Buffer.java","id":"sourceFile"}
    byte[] DIGITS -> DIGITS
    int REPLACEMENT_CHARACTER -> REPLACEMENT_CHARACTER
    okio.Segment head -> head
    long size -> size
    58:59:void <init>() -> <init>
    63:63:long size() -> size
    67:67:okio.Buffer buffer() -> buffer
    71:71:java.io.OutputStream outputStream() -> outputStream
    93:93:okio.Buffer emitCompleteSegments() -> emitCompleteSegments
    97:97:okio.BufferedSink emit() -> emit
    101:101:boolean exhausted() -> exhausted
    105:106:void require(long) -> require
    109:109:boolean request(long) -> request
    113:113:java.io.InputStream inputStream() -> inputStream
    138:138:okio.Buffer copyTo(java.io.OutputStream) -> copyTo
    146:165:okio.Buffer copyTo(java.io.OutputStream,long,long) -> copyTo
    170:196:okio.Buffer copyTo(okio.Buffer,long,long) -> copyTo
    201:201:okio.Buffer writeTo(java.io.OutputStream) -> writeTo
    206:225:okio.Buffer writeTo(java.io.OutputStream,long) -> writeTo
    230:231:okio.Buffer readFrom(java.io.InputStream) -> readFrom
    236:238:okio.Buffer readFrom(java.io.InputStream,long) -> readFrom
    242:255:void readFrom(java.io.InputStream,long,boolean) -> readFrom
    263:272:long completeSegmentByteCount() -> completeSegmentByteCount
    276:293:byte readByte() -> readByte
    298:302:byte getByte(long) -> getByte
    307:332:short readShort() -> readShort
    336:364:int readInt() -> readInt
    368:398:long readLong() -> readLong
    402:402:short readShortLe() -> readShortLe
    406:406:int readIntLe() -> readIntLe
    410:410:long readLongLe() -> readLongLe
    414:468:long readDecimalLong() -> readDecimalLong
    472:524:long readHexadecimalUnsignedLong() -> readHexadecimalUnsignedLong
    528:528:okio.ByteString readByteString() -> readByteString
    532:532:okio.ByteString readByteString(long) -> readByteString
    536:551:int select(okio.Options) -> select
    560:569:int selectPrefix(okio.Options) -> selectPrefix
    573:578:void readFully(okio.Buffer,long) -> readFully
    581:585:long readAll(okio.Sink) -> readAll
    590:592:java.lang.String readUtf8() -> readUtf8
    597:597:java.lang.String readUtf8(long) -> readUtf8
    602:604:java.lang.String readString(java.nio.charset.Charset) -> readString
    609:631:java.lang.String readString(long,java.nio.charset.Charset) -> readString
    635:641:java.lang.String readUtf8Line() -> readUtf8Line
    645:652:java.lang.String readUtf8LineStrict() -> readUtf8LineStrict
    656:666:java.lang.String readUtf8Line(long) -> readUtf8Line
    671:742:int readUtf8CodePoint() -> readUtf8CodePoint
    747:749:byte[] readByteArray() -> readByteArray
    754:761:byte[] readByteArray(long) -> readByteArray
    765:765:int read(byte[]) -> read
    769:775:void readFully(byte[]) -> readFully
    778:793:int read(byte[],int,int) -> read
    802:806:void clear() -> clear
    810:824:void skip(long) -> skip
    827:829:okio.Buffer write(okio.ByteString) -> write
    833:833:okio.Buffer writeUtf8(java.lang.String) -> writeUtf8
    837:909:okio.Buffer writeUtf8(java.lang.String,int,int) -> writeUtf8
    913:945:okio.Buffer writeUtf8CodePoint(int) -> writeUtf8CodePoint
    949:949:okio.Buffer writeString(java.lang.String,java.nio.charset.Charset) -> writeString
    954:966:okio.Buffer writeString(java.lang.String,int,int,java.nio.charset.Charset) -> writeString
    970:971:okio.Buffer write(byte[]) -> write
    975:990:okio.Buffer write(byte[],int,int) -> write
    994:999:long writeAll(okio.Source) -> writeAll
    1003:1008:okio.BufferedSink write(okio.Source,long) -> write
    1012:1015:okio.Buffer writeByte(int) -> writeByte
    1019:1026:okio.Buffer writeShort(int) -> writeShort
    1030:1030:okio.Buffer writeShortLe(int) -> writeShortLe
    1034:1043:okio.Buffer writeInt(int) -> writeInt
    1047:1047:okio.Buffer writeIntLe(int) -> writeIntLe
    1051:1064:okio.Buffer writeLong(long) -> writeLong
    1068:1068:okio.Buffer writeLongLe(long) -> writeLongLe
    1072:1124:okio.Buffer writeDecimalLong(long) -> writeDecimalLong
    1128:1143:okio.Buffer writeHexadecimalUnsignedLong(long) -> writeHexadecimalUnsignedLong
    1151:1162:okio.Segment writableSegment(int) -> writableSegment
    1216:1254:void write(okio.Buffer,long) -> write
    1257:1262:long read(okio.Buffer,long) -> read
    1266:1266:long indexOf(byte) -> indexOf
    1274:1318:long indexOf(byte,long) -> indexOf
    1322:1322:long indexOf(okio.ByteString) -> indexOf
    1326:1377:long indexOf(okio.ByteString,long) -> indexOf
    1381:1381:long indexOfElement(okio.ByteString) -> indexOfElement
    1385:1454:long indexOfElement(okio.ByteString,long) -> indexOfElement
    1458:1458:boolean rangeEquals(long,okio.ByteString) -> rangeEquals
    1462:1474:boolean rangeEquals(long,okio.ByteString,int,int) -> rangeEquals
    1483:1502:boolean rangeEquals(okio.Segment,int,okio.ByteString,int,int) -> rangeEquals
    1506:1506:void flush() -> flush
    1509:1509:void close() -> close
    1512:1512:okio.Timeout timeout() -> timeout
    1517:1523:java.util.List segmentSizes() -> segmentSizes
    1528:1528:okio.ByteString md5() -> md5
    1533:1533:okio.ByteString sha1() -> sha1
    1538:1538:okio.ByteString sha256() -> sha256
    1543:1552:okio.ByteString digest(java.lang.String) -> digest
    1558:1558:okio.ByteString hmacSha1(okio.ByteString) -> hmacSha1
    1563:1563:okio.ByteString hmacSha256(okio.ByteString) -> hmacSha256
    1568:1580:okio.ByteString hmac(java.lang.String,okio.ByteString) -> hmac
    1585:1614:boolean equals(java.lang.Object) -> equals
    1618:1627:int hashCode() -> hashCode
    1635:1635:java.lang.String toString() -> toString
    1640:1649:okio.Buffer clone() -> clone
    1654:1657:okio.ByteString snapshot() -> snapshot
    1664:1665:okio.ByteString snapshot(int) -> snapshot
    50:50:java.lang.Object clone() -> clone
    50:50:okio.BufferedSink emitCompleteSegments() -> emitCompleteSegments
    50:50:okio.BufferedSink writeHexadecimalUnsignedLong(long) -> writeHexadecimalUnsignedLong
    50:50:okio.BufferedSink writeDecimalLong(long) -> writeDecimalLong
    50:50:okio.BufferedSink writeLongLe(long) -> writeLongLe
    50:50:okio.BufferedSink writeLong(long) -> writeLong
    50:50:okio.BufferedSink writeIntLe(int) -> writeIntLe
    50:50:okio.BufferedSink writeInt(int) -> writeInt
    50:50:okio.BufferedSink writeShortLe(int) -> writeShortLe
    50:50:okio.BufferedSink writeShort(int) -> writeShort
    50:50:okio.BufferedSink writeByte(int) -> writeByte
    50:50:okio.BufferedSink writeString(java.lang.String,int,int,java.nio.charset.Charset) -> writeString
    50:50:okio.BufferedSink writeString(java.lang.String,java.nio.charset.Charset) -> writeString
    50:50:okio.BufferedSink writeUtf8CodePoint(int) -> writeUtf8CodePoint
    50:50:okio.BufferedSink writeUtf8(java.lang.String,int,int) -> writeUtf8
    50:50:okio.BufferedSink writeUtf8(java.lang.String) -> writeUtf8
    50:50:okio.BufferedSink write(byte[],int,int) -> write
    50:50:okio.BufferedSink write(byte[]) -> write
    50:50:okio.BufferedSink write(okio.ByteString) -> write
    51:51:void <clinit>() -> <clinit>
okio.Buffer$1 -> okio.Buffer$1:
# {"fileName":"Buffer.java","id":"sourceFile"}
    okio.Buffer this$0 -> this$0
    71:71:void <init>(okio.Buffer) -> <init>
    73:74:void write(int) -> write
    77:78:void write(byte[],int,int) -> write
    81:81:void flush() -> flush
    84:84:void close() -> close
    87:87:java.lang.String toString() -> toString
okio.Buffer$2 -> okio.Buffer$2:
# {"fileName":"Buffer.java","id":"sourceFile"}
    okio.Buffer this$0 -> this$0
    113:113:void <init>(okio.Buffer) -> <init>
    115:116:int read() -> read
    120:120:int read(byte[],int,int) -> read
    124:124:int available() -> available
    128:128:void close() -> close
    131:131:java.lang.String toString() -> toString
okio.BufferedSink -> okio.BufferedSink:
# {"fileName":"BufferedSink.java","id":"sourceFile"}
    okio.Buffer buffer() -> buffer
    okio.BufferedSink write(okio.ByteString) -> write
    okio.BufferedSink write(byte[]) -> write
    okio.BufferedSink write(byte[],int,int) -> write
    long writeAll(okio.Source) -> writeAll
    okio.BufferedSink write(okio.Source,long) -> write
    okio.BufferedSink writeUtf8(java.lang.String) -> writeUtf8
    okio.BufferedSink writeUtf8(java.lang.String,int,int) -> writeUtf8
    okio.BufferedSink writeUtf8CodePoint(int) -> writeUtf8CodePoint
    okio.BufferedSink writeString(java.lang.String,java.nio.charset.Charset) -> writeString
    okio.BufferedSink writeString(java.lang.String,int,int,java.nio.charset.Charset) -> writeString
    okio.BufferedSink writeByte(int) -> writeByte
    okio.BufferedSink writeShort(int) -> writeShort
    okio.BufferedSink writeShortLe(int) -> writeShortLe
    okio.BufferedSink writeInt(int) -> writeInt
    okio.BufferedSink writeIntLe(int) -> writeIntLe
    okio.BufferedSink writeLong(long) -> writeLong
    okio.BufferedSink writeLongLe(long) -> writeLongLe
    okio.BufferedSink writeDecimalLong(long) -> writeDecimalLong
    okio.BufferedSink writeHexadecimalUnsignedLong(long) -> writeHexadecimalUnsignedLong
    void flush() -> flush
    okio.BufferedSink emit() -> emit
    okio.BufferedSink emitCompleteSegments() -> emitCompleteSegments
    java.io.OutputStream outputStream() -> outputStream
okio.BufferedSource -> okio.BufferedSource:
# {"fileName":"BufferedSource.java","id":"sourceFile"}
    okio.Buffer buffer() -> buffer
    boolean exhausted() -> exhausted
    void require(long) -> require
    boolean request(long) -> request
    byte readByte() -> readByte
    short readShort() -> readShort
    short readShortLe() -> readShortLe
    int readInt() -> readInt
    int readIntLe() -> readIntLe
    long readLong() -> readLong
    long readLongLe() -> readLongLe
    long readDecimalLong() -> readDecimalLong
    long readHexadecimalUnsignedLong() -> readHexadecimalUnsignedLong
    void skip(long) -> skip
    okio.ByteString readByteString() -> readByteString
    okio.ByteString readByteString(long) -> readByteString
    int select(okio.Options) -> select
    byte[] readByteArray() -> readByteArray
    byte[] readByteArray(long) -> readByteArray
    int read(byte[]) -> read
    void readFully(byte[]) -> readFully
    int read(byte[],int,int) -> read
    void readFully(okio.Buffer,long) -> readFully
    long readAll(okio.Sink) -> readAll
    java.lang.String readUtf8() -> readUtf8
    java.lang.String readUtf8(long) -> readUtf8
    java.lang.String readUtf8Line() -> readUtf8Line
    java.lang.String readUtf8LineStrict() -> readUtf8LineStrict
    int readUtf8CodePoint() -> readUtf8CodePoint
    java.lang.String readString(java.nio.charset.Charset) -> readString
    java.lang.String readString(long,java.nio.charset.Charset) -> readString
    long indexOf(byte) -> indexOf
    long indexOf(byte,long) -> indexOf
    long indexOf(okio.ByteString) -> indexOf
    long indexOf(okio.ByteString,long) -> indexOf
    long indexOfElement(okio.ByteString) -> indexOfElement
    long indexOfElement(okio.ByteString,long) -> indexOfElement
    boolean rangeEquals(long,okio.ByteString) -> rangeEquals
    boolean rangeEquals(long,okio.ByteString,int,int) -> rangeEquals
    java.io.InputStream inputStream() -> inputStream
okio.ByteString -> okio.ByteString:
# {"fileName":"ByteString.java","id":"sourceFile"}
    char[] HEX_DIGITS -> HEX_DIGITS
    long serialVersionUID -> serialVersionUID
    okio.ByteString EMPTY -> EMPTY
    byte[] data -> data
    int hashCode -> hashCode
    java.lang.String utf8 -> utf8
    63:65:void <init>(byte[]) -> <init>
    71:72:okio.ByteString of(byte[]) -> of
    80:85:okio.ByteString of(byte[],int,int) -> of
    89:93:okio.ByteString of(java.nio.ByteBuffer) -> of
    98:101:okio.ByteString encodeUtf8(java.lang.String) -> encodeUtf8
    106:108:okio.ByteString encodeString(java.lang.String,java.nio.charset.Charset) -> encodeString
    113:115:java.lang.String utf8() -> utf8
    120:121:java.lang.String string(java.nio.charset.Charset) -> string
    130:130:java.lang.String base64() -> base64
    135:135:okio.ByteString md5() -> md5
    140:140:okio.ByteString sha1() -> sha1
    145:145:okio.ByteString sha256() -> sha256
    150:152:okio.ByteString digest(java.lang.String) -> digest
    158:158:okio.ByteString hmacSha1(okio.ByteString) -> hmacSha1
    163:163:okio.ByteString hmacSha256(okio.ByteString) -> hmacSha256
    168:174:okio.ByteString hmac(java.lang.String,okio.ByteString) -> hmac
    183:183:java.lang.String base64Url() -> base64Url
    191:193:okio.ByteString decodeBase64(java.lang.String) -> decodeBase64
    198:204:java.lang.String hex() -> hex
    209:218:okio.ByteString decodeHex(java.lang.String) -> decodeHex
    222:225:int decodeHexDigit(char) -> decodeHexDigit
    235:243:okio.ByteString read(java.io.InputStream,int) -> read
    253:268:okio.ByteString toAsciiLowercase() -> toAsciiLowercase
    278:293:okio.ByteString toAsciiUppercase() -> toAsciiUppercase
    301:301:okio.ByteString substring(int) -> substring
    310:324:okio.ByteString substring(int,int) -> substring
    329:329:byte getByte(int) -> getByte
    336:336:int size() -> size
    343:343:byte[] toByteArray() -> toByteArray
    348:348:byte[] internalArray() -> internalArray
    355:355:java.nio.ByteBuffer asByteBuffer() -> asByteBuffer
    360:362:void write(java.io.OutputStream) -> write
    366:367:void write(okio.Buffer) -> write
    375:375:boolean rangeEquals(int,okio.ByteString,int,int) -> rangeEquals
    384:386:boolean rangeEquals(int,byte[],int,int) -> rangeEquals
    390:390:boolean startsWith(okio.ByteString) -> startsWith
    394:394:boolean startsWith(byte[]) -> startsWith
    398:398:boolean endsWith(okio.ByteString) -> endsWith
    402:402:boolean endsWith(byte[]) -> endsWith
    406:406:int indexOf(okio.ByteString) -> indexOf
    410:410:int indexOf(okio.ByteString,int) -> indexOf
    414:414:int indexOf(byte[]) -> indexOf
    418:424:int indexOf(byte[],int) -> indexOf
    428:428:int lastIndexOf(okio.ByteString) -> lastIndexOf
    432:432:int lastIndexOf(okio.ByteString,int) -> lastIndexOf
    436:436:int lastIndexOf(byte[]) -> lastIndexOf
    440:446:int lastIndexOf(byte[],int) -> lastIndexOf
    450:453:boolean equals(java.lang.Object) -> equals
    457:458:int hashCode() -> hashCode
    462:471:int compareTo(okio.ByteString) -> compareTo
    479:496:java.lang.String toString() -> toString
    502:513:int codePointIndexToCharIndex(java.lang.String,int) -> codePointIndexToCharIndex
    517:528:void readObject(java.io.ObjectInputStream) -> readObject
    531:533:void writeObject(java.io.ObjectOutputStream) -> writeObject
    51:51:int compareTo(java.lang.Object) -> compareTo
    52:57:void <clinit>() -> <clinit>
okio.DeflaterSink -> okio.DeflaterSink:
# {"fileName":"DeflaterSink.java","id":"sourceFile"}
    okio.BufferedSink sink -> sink
    java.util.zip.Deflater deflater -> deflater
    boolean closed -> closed
    44:45:void <init>(okio.Sink,java.util.zip.Deflater) -> <init>
    52:57:void <init>(okio.BufferedSink,java.util.zip.Deflater) -> <init>
    60:80:void write(okio.Buffer,long) -> write
    84:108:void deflate(boolean) -> deflate
    112:114:void flush() -> flush
    117:119:void finishDeflate() -> finishDeflate
    122:147:void close() -> close
    150:150:okio.Timeout timeout() -> timeout
    154:154:java.lang.String toString() -> toString
okio.ForwardingSink -> okio.ForwardingSink:
# {"fileName":"ForwardingSink.java","id":"sourceFile"}
    okio.Sink delegate -> delegate
    24:27:void <init>(okio.Sink) -> <init>
    31:31:okio.Sink delegate() -> delegate
    35:36:void write(okio.Buffer,long) -> write
    39:40:void flush() -> flush
    43:43:okio.Timeout timeout() -> timeout
    47:48:void close() -> close
    51:51:java.lang.String toString() -> toString
okio.ForwardingSource -> okio.ForwardingSource:
# {"fileName":"ForwardingSource.java","id":"sourceFile"}
    okio.Source delegate -> delegate
    24:27:void <init>(okio.Source) -> <init>
    31:31:okio.Source delegate() -> delegate
    35:35:long read(okio.Buffer,long) -> read
    39:39:okio.Timeout timeout() -> timeout
    43:44:void close() -> close
    47:47:java.lang.String toString() -> toString
okio.ForwardingTimeout -> okio.ForwardingTimeout:
# {"fileName":"ForwardingTimeout.java","id":"sourceFile"}
    okio.Timeout delegate -> delegate
    25:28:void <init>(okio.Timeout) -> <init>
    32:32:okio.Timeout delegate() -> delegate
    36:38:okio.ForwardingTimeout setDelegate(okio.Timeout) -> setDelegate
    42:42:okio.Timeout timeout(long,java.util.concurrent.TimeUnit) -> timeout
    46:46:long timeoutNanos() -> timeoutNanos
    50:50:boolean hasDeadline() -> hasDeadline
    54:54:long deadlineNanoTime() -> deadlineNanoTime
    58:58:okio.Timeout deadlineNanoTime(long) -> deadlineNanoTime
    62:62:okio.Timeout clearTimeout() -> clearTimeout
    66:66:okio.Timeout clearDeadline() -> clearDeadline
    70:71:void throwIfReached() -> throwIfReached
okio.GzipSink -> okio.GzipSink:
# {"fileName":"GzipSink.java","id":"sourceFile"}
    okio.BufferedSink sink -> sink
    java.util.zip.Deflater deflater -> deflater
    okio.DeflaterSink deflaterSink -> deflaterSink
    boolean closed -> closed
    java.util.zip.CRC32 crc -> crc
    54:63:void <init>(okio.Sink) -> <init>
    66:71:void write(okio.Buffer,long) -> write
    74:75:void flush() -> flush
    78:78:okio.Timeout timeout() -> timeout
    82:111:void close() -> close
    118:118:java.util.zip.Deflater deflater() -> deflater
    123:130:void writeHeader() -> writeHeader
    133:135:void writeFooter() -> writeFooter
    139:144:void updateCrc(okio.Buffer,long) -> updateCrc
okio.GzipSource -> okio.GzipSource:
# {"fileName":"GzipSource.java","id":"sourceFile"}
    byte FHCRC -> FHCRC
    byte FEXTRA -> FEXTRA
    byte FNAME -> FNAME
    byte FCOMMENT -> FCOMMENT
    byte SECTION_HEADER -> SECTION_HEADER
    byte SECTION_BODY -> SECTION_BODY
    byte SECTION_TRAILER -> SECTION_TRAILER
    byte SECTION_DONE -> SECTION_DONE
    int section -> section
    okio.BufferedSource source -> source
    java.util.zip.Inflater inflater -> inflater
    okio.InflaterSource inflaterSource -> inflaterSource
    java.util.zip.CRC32 crc -> crc
    39:65:void <init>(okio.Source) -> <init>
    68:104:long read(okio.Buffer,long) -> read
    114:166:void consumeHeader() -> consumeHeader
    173:175:void consumeTrailer() -> consumeTrailer
    178:178:okio.Timeout timeout() -> timeout
    182:183:void close() -> close
    188:201:void updateCrc(okio.Buffer,long,long) -> updateCrc
    204:208:void checkEqual(java.lang.String,int,int) -> checkEqual
okio.HashingSink -> okio.HashingSink:
# {"fileName":"HashingSink.java","id":"sourceFile"}
    java.security.MessageDigest messageDigest -> messageDigest
    javax.crypto.Mac mac -> mac
    49:49:okio.HashingSink md5(okio.Sink) -> md5
    54:54:okio.HashingSink sha1(okio.Sink) -> sha1
    59:59:okio.HashingSink sha256(okio.Sink) -> sha256
    64:64:okio.HashingSink hmacSha1(okio.Sink,okio.ByteString) -> hmacSha1
    69:69:okio.HashingSink hmacSha256(okio.Sink,okio.ByteString) -> hmacSha256
    73:80:void <init>(okio.Sink,java.lang.String) -> <init>
    83:93:void <init>(okio.Sink,okio.ByteString,java.lang.String) -> <init>
    96:112:void write(okio.Buffer,long) -> write
    121:122:okio.ByteString hash() -> hash
okio.HashingSource -> okio.HashingSource:
# {"fileName":"HashingSource.java","id":"sourceFile"}
    java.security.MessageDigest messageDigest -> messageDigest
    javax.crypto.Mac mac -> mac
    47:47:okio.HashingSource md5(okio.Source) -> md5
    52:52:okio.HashingSource sha1(okio.Source) -> sha1
    57:57:okio.HashingSource sha256(okio.Source) -> sha256
    62:62:okio.HashingSource hmacSha1(okio.Source,okio.ByteString) -> hmacSha1
    67:67:okio.HashingSource hmacSha256(okio.Source,okio.ByteString) -> hmacSha256
    71:78:void <init>(okio.Source,java.lang.String) -> <init>
    81:91:void <init>(okio.Source,okio.ByteString,java.lang.String) -> <init>
    94:121:long read(okio.Buffer,long) -> read
    131:132:okio.ByteString hash() -> hash
okio.InflaterSource -> okio.InflaterSource:
# {"fileName":"InflaterSource.java","id":"sourceFile"}
    okio.BufferedSource source -> source
    java.util.zip.Inflater inflater -> inflater
    int bufferBytesHeldByInflater -> bufferBytesHeldByInflater
    boolean closed -> closed
    40:41:void <init>(okio.Source,java.util.zip.Inflater) -> <init>
    48:53:void <init>(okio.BufferedSource,java.util.zip.Inflater) -> <init>
    57:86:long read(okio.Buffer,long) -> read
    95:107:boolean refill() -> refill
    112:116:void releaseInflatedBytes() -> releaseInflatedBytes
    119:119:okio.Timeout timeout() -> timeout
    123:127:void close() -> close
okio.Okio -> okio.Okio:
# {"fileName":"Okio.java","id":"sourceFile"}
    java.util.logging.Logger logger -> logger
    41:42:void <init>() -> <init>
    50:50:okio.BufferedSource buffer(okio.Source) -> buffer
    59:59:okio.BufferedSink buffer(okio.Sink) -> buffer
    64:64:okio.Sink sink(java.io.OutputStream) -> sink
    68:71:okio.Sink sink(java.io.OutputStream,okio.Timeout) -> sink
    115:118:okio.Sink sink(java.net.Socket) -> sink
    123:123:okio.Source source(java.io.InputStream) -> source
    127:130:okio.Source source(java.io.InputStream,okio.Timeout) -> source
    165:166:okio.Source source(java.io.File) -> source
    172:173:okio.Source source(java.nio.file.Path,java.nio.file.OpenOption[]) -> source
    178:179:okio.Sink sink(java.io.File) -> sink
    184:185:okio.Sink appendingSink(java.io.File) -> appendingSink
    191:192:okio.Sink sink(java.nio.file.Path,java.nio.file.OpenOption[]) -> sink
    197:197:okio.Sink blackhole() -> blackhole
    218:221:okio.Source source(java.net.Socket) -> source
    225:225:okio.AsyncTimeout timeout(java.net.Socket) -> timeout
    257:258:boolean isAndroidGetsocknameError(java.lang.AssertionError) -> isAndroidGetsocknameError
    39:39:void <clinit>() -> <clinit>
okio.Okio$1 -> okio.Okio$1:
# {"fileName":"Okio.java","id":"sourceFile"}
    okio.Timeout val$timeout -> val$timeout
    java.io.OutputStream val$out -> val$out
    71:71:void <init>(okio.Timeout,java.io.OutputStream) -> <init>
    73:89:void write(okio.Buffer,long) -> write
    92:93:void flush() -> flush
    96:97:void close() -> close
    100:100:okio.Timeout timeout() -> timeout
    104:104:java.lang.String toString() -> toString
okio.Okio$2 -> okio.Okio$2:
# {"fileName":"Okio.java","id":"sourceFile"}
    okio.Timeout val$timeout -> val$timeout
    java.io.InputStream val$in -> val$in
    130:130:void <init>(okio.Timeout,java.io.InputStream) -> <init>
    132:145:long read(okio.Buffer,long) -> read
    150:151:void close() -> close
    154:154:okio.Timeout timeout() -> timeout
    158:158:java.lang.String toString() -> toString
okio.Okio$3 -> okio.Okio$3:
# {"fileName":"Okio.java","id":"sourceFile"}
    197:197:void <init>() -> <init>
    199:200:void write(okio.Buffer,long) -> write
    202:202:void flush() -> flush
    205:205:okio.Timeout timeout() -> timeout
    208:208:void close() -> close
okio.Okio$4 -> okio.Okio$4:
# {"fileName":"Okio.java","id":"sourceFile"}
    java.net.Socket val$socket -> val$socket
    225:225:void <init>(java.net.Socket) -> <init>
    227:231:java.io.IOException newTimeoutException(java.io.IOException) -> newTimeoutException
    236:248:void timedOut() -> timedOut
okio.Options -> okio.Options:
# {"fileName":"Options.java","id":"sourceFile"}
    okio.ByteString[] byteStrings -> byteStrings
    25:27:void <init>(okio.ByteString[]) -> <init>
    30:30:okio.Options of(okio.ByteString[]) -> of
    34:34:okio.ByteString get(int) -> get
    38:38:int size() -> size
    22:22:java.lang.Object get(int) -> get
okio.Pipe -> okio.Pipe:
# {"fileName":"Pipe.java","id":"sourceFile"}
    long maxBufferSize -> maxBufferSize
    okio.Buffer buffer -> buffer
    boolean sinkClosed -> sinkClosed
    boolean sourceClosed -> sourceClosed
    okio.Sink sink -> sink
    okio.Source source -> source
    38:49:void <init>(long) -> <init>
    52:52:okio.Source source() -> source
    56:56:okio.Sink sink() -> sink
okio.Pipe$PipeSink -> okio.Pipe$PipeSink:
# {"fileName":"Pipe.java","id":"sourceFile"}
    okio.Timeout timeout -> timeout
    okio.Pipe this$0 -> this$0
    59:60:void <init>(okio.Pipe) -> <init>
    63:81:void write(okio.Buffer,long) -> write
    84:92:void flush() -> flush
    95:104:void close() -> close
    107:107:okio.Timeout timeout() -> timeout
okio.Pipe$PipeSource -> okio.Pipe$PipeSource:
# {"fileName":"Pipe.java","id":"sourceFile"}
    okio.Timeout timeout -> timeout
    okio.Pipe this$0 -> this$0
    111:112:void <init>(okio.Pipe) -> <init>
    115:126:long read(okio.Buffer,long) -> read
    130:134:void close() -> close
    137:137:okio.Timeout timeout() -> timeout
okio.RealBufferedSink -> okio.RealBufferedSink:
# {"fileName":"RealBufferedSink.java","id":"sourceFile"}
    okio.Buffer buffer -> buffer
    okio.Sink sink -> sink
    boolean closed -> closed
    24:31:void <init>(okio.Sink) -> <init>
    34:34:okio.Buffer buffer() -> buffer
    39:42:void write(okio.Buffer,long) -> write
    45:47:okio.BufferedSink write(okio.ByteString) -> write
    51:53:okio.BufferedSink writeUtf8(java.lang.String) -> writeUtf8
    58:60:okio.BufferedSink writeUtf8(java.lang.String,int,int) -> writeUtf8
    64:66:okio.BufferedSink writeUtf8CodePoint(int) -> writeUtf8CodePoint
    70:72:okio.BufferedSink writeString(java.lang.String,java.nio.charset.Charset) -> writeString
    77:79:okio.BufferedSink writeString(java.lang.String,int,int,java.nio.charset.Charset) -> writeString
    83:85:okio.BufferedSink write(byte[]) -> write
    89:91:okio.BufferedSink write(byte[],int,int) -> write
    95:101:long writeAll(okio.Source) -> writeAll
    105:111:okio.BufferedSink write(okio.Source,long) -> write
    115:117:okio.BufferedSink writeByte(int) -> writeByte
    121:123:okio.BufferedSink writeShort(int) -> writeShort
    127:129:okio.BufferedSink writeShortLe(int) -> writeShortLe
    133:135:okio.BufferedSink writeInt(int) -> writeInt
    139:141:okio.BufferedSink writeIntLe(int) -> writeIntLe
    145:147:okio.BufferedSink writeLong(long) -> writeLong
    151:153:okio.BufferedSink writeLongLe(long) -> writeLongLe
    157:159:okio.BufferedSink writeDecimalLong(long) -> writeDecimalLong
    163:165:okio.BufferedSink writeHexadecimalUnsignedLong(long) -> writeHexadecimalUnsignedLong
    169:172:okio.BufferedSink emitCompleteSegments() -> emitCompleteSegments
    176:179:okio.BufferedSink emit() -> emit
    183:183:java.io.OutputStream outputStream() -> outputStream
    214:219:void flush() -> flush
    222:243:void close() -> close
    246:246:okio.Timeout timeout() -> timeout
    250:250:java.lang.String toString() -> toString
okio.RealBufferedSink$1 -> okio.RealBufferedSink$1:
# {"fileName":"RealBufferedSink.java","id":"sourceFile"}
    okio.RealBufferedSink this$0 -> this$0
    183:183:void <init>(okio.RealBufferedSink) -> <init>
    185:188:void write(int) -> write
    191:194:void write(byte[],int,int) -> write
    198:201:void flush() -> flush
    204:205:void close() -> close
    208:208:java.lang.String toString() -> toString
okio.RealBufferedSource -> okio.RealBufferedSource:
# {"fileName":"RealBufferedSource.java","id":"sourceFile"}
    okio.Buffer buffer -> buffer
    okio.Source source -> source
    boolean closed -> closed
    26:33:void <init>(okio.Source) -> <init>
    36:36:okio.Buffer buffer() -> buffer
    40:50:long read(okio.Buffer,long) -> read
    54:55:boolean exhausted() -> exhausted
    59:60:void require(long) -> require
    63:68:boolean request(long) -> request
    72:73:byte readByte() -> readByte
    77:78:okio.ByteString readByteString() -> readByteString
    82:83:okio.ByteString readByteString(long) -> readByteString
    87:102:int select(okio.Options) -> select
    106:107:byte[] readByteArray() -> readByteArray
    111:112:byte[] readByteArray(long) -> readByteArray
    116:116:int read(byte[]) -> read
    121:133:void readFully(byte[]) -> readFully
    136:144:int read(byte[],int,int) -> read
    149:156:void readFully(okio.Buffer,long) -> readFully
    159:173:long readAll(okio.Sink) -> readAll
    177:178:java.lang.String readUtf8() -> readUtf8
    182:183:java.lang.String readUtf8(long) -> readUtf8
    187:190:java.lang.String readString(java.nio.charset.Charset) -> readString
    194:196:java.lang.String readString(long,java.nio.charset.Charset) -> readString
    200:206:java.lang.String readUtf8Line() -> readUtf8Line
    210:217:java.lang.String readUtf8LineStrict() -> readUtf8LineStrict
    221:232:int readUtf8CodePoint() -> readUtf8CodePoint
    236:237:short readShort() -> readShort
    241:242:short readShortLe() -> readShortLe
    246:247:int readInt() -> readInt
    251:252:int readIntLe() -> readIntLe
    256:257:long readLong() -> readLong
    261:262:long readLongLe() -> readLongLe
    266:280:long readDecimalLong() -> readDecimalLong
    284:298:long readHexadecimalUnsignedLong() -> readHexadecimalUnsignedLong
    302:311:void skip(long) -> skip
    314:314:long indexOf(byte) -> indexOf
    318:329:long indexOf(byte,long) -> indexOf
    333:333:long indexOf(okio.ByteString) -> indexOf
    337:348:long indexOf(okio.ByteString,long) -> indexOf
    352:352:long indexOfElement(okio.ByteString) -> indexOfElement
    356:367:long indexOfElement(okio.ByteString,long) -> indexOfElement
    371:371:boolean rangeEquals(long,okio.ByteString) -> rangeEquals
    377:390:boolean rangeEquals(long,okio.ByteString,int,int) -> rangeEquals
    394:394:java.io.InputStream inputStream() -> inputStream
    432:436:void close() -> close
    439:439:okio.Timeout timeout() -> timeout
    443:443:java.lang.String toString() -> toString
okio.RealBufferedSource$1 -> okio.RealBufferedSource$1:
# {"fileName":"RealBufferedSource.java","id":"sourceFile"}
    okio.RealBufferedSource this$0 -> this$0
    394:394:void <init>(okio.RealBufferedSource) -> <init>
    396:401:int read() -> read
    405:413:int read(byte[],int,int) -> read
    417:418:int available() -> available
    422:423:void close() -> close
    426:426:java.lang.String toString() -> toString
okio.Segment -> okio.Segment:
# {"fileName":"Segment.java","id":"sourceFile"}
    int SIZE -> SIZE
    int SHARE_MINIMUM -> SHARE_MINIMUM
    byte[] data -> data
    int pos -> pos
    int limit -> limit
    boolean shared -> shared
    boolean owner -> owner
    okio.Segment next -> next
    okio.Segment prev -> prev
    60:64:void <init>() -> <init>
    67:69:void <init>(okio.Segment) -> <init>
    71:77:void <init>(byte[],int,int) -> <init>
    84:89:okio.Segment pop() -> pop
    97:101:okio.Segment push(okio.Segment) -> push
    113:131:okio.Segment split(int) -> split
    139:147:void compact() -> compact
    151:164:void writeTo(okio.Segment,int) -> writeTo
okio.SegmentPool -> okio.SegmentPool:
# {"fileName":"SegmentPool.java","id":"sourceFile"}
    long MAX_SIZE -> MAX_SIZE
    okio.Segment next -> next
    long byteCount -> byteCount
    33:34:void <init>() -> <init>
    37:46:okio.Segment take() -> take
    50:59:void recycle(okio.Segment) -> recycle
okio.SegmentedByteString -> okio.SegmentedByteString:
# {"fileName":"SegmentedByteString.java","id":"sourceFile"}
    byte[][] segments -> segments
    int[] directory -> directory
    57:87:void <init>(okio.Buffer,int) -> <init>
    90:90:java.lang.String utf8() -> utf8
    94:94:java.lang.String string(java.nio.charset.Charset) -> string
    98:98:java.lang.String base64() -> base64
    102:102:java.lang.String hex() -> hex
    106:106:okio.ByteString toAsciiLowercase() -> toAsciiLowercase
    110:110:okio.ByteString toAsciiUppercase() -> toAsciiUppercase
    114:114:okio.ByteString md5() -> md5
    118:118:okio.ByteString sha1() -> sha1
    122:122:okio.ByteString sha256() -> sha256
    126:126:okio.ByteString hmacSha1(okio.ByteString) -> hmacSha1
    130:130:okio.ByteString hmacSha256(okio.ByteString) -> hmacSha256
    134:134:java.lang.String base64Url() -> base64Url
    138:138:okio.ByteString substring(int) -> substring
    142:142:okio.ByteString substring(int,int) -> substring
    146:150:byte getByte(int) -> getByte
    156:157:int segment(int) -> segment
    161:161:int size() -> size
    165:174:byte[] toByteArray() -> toByteArray
    178:178:java.nio.ByteBuffer asByteBuffer() -> asByteBuffer
    182:190:void write(java.io.OutputStream) -> write
    193:207:void write(okio.Buffer) -> write
    211:224:boolean rangeEquals(int,okio.ByteString,int,int) -> rangeEquals
    228:244:boolean rangeEquals(int,byte[],int,int) -> rangeEquals
    248:248:int indexOf(byte[],int) -> indexOf
    252:252:int lastIndexOf(byte[],int) -> lastIndexOf
    257:257:okio.ByteString toByteString() -> toByteString
    261:261:byte[] internalArray() -> internalArray
    265:268:boolean equals(java.lang.Object) -> equals
    272:288:int hashCode() -> hashCode
    292:292:java.lang.String toString() -> toString
    296:296:java.lang.Object writeReplace() -> writeReplace
okio.Sink -> okio.Sink:
# {"fileName":"Sink.java","id":"sourceFile"}
    void write(okio.Buffer,long) -> write
    void flush() -> flush
    okio.Timeout timeout() -> timeout
    void close() -> close
okio.Source -> okio.Source:
# {"fileName":"Source.java","id":"sourceFile"}
    long read(okio.Buffer,long) -> read
    okio.Timeout timeout() -> timeout
    void close() -> close
okio.Timeout -> okio.Timeout:
# {"fileName":"Timeout.java","id":"sourceFile"}
    okio.Timeout NONE -> NONE
    boolean hasDeadline -> hasDeadline
    long deadlineNanoTime -> deadlineNanoTime
    long timeoutNanos -> timeoutNanos
    70:71:void <init>() -> <init>
    82:85:okio.Timeout timeout(long,java.util.concurrent.TimeUnit) -> timeout
    90:90:long timeoutNanos() -> timeoutNanos
    95:95:boolean hasDeadline() -> hasDeadline
    105:106:long deadlineNanoTime() -> deadlineNanoTime
    115:117:okio.Timeout deadlineNanoTime(long) -> deadlineNanoTime
    122:124:okio.Timeout deadline(long,java.util.concurrent.TimeUnit) -> deadline
    129:130:okio.Timeout clearTimeout() -> clearTimeout
    135:136:okio.Timeout clearDeadline() -> clearDeadline
    145:152:void throwIfReached() -> throwIfReached
    192:227:void waitUntilNotified(java.lang.Object) -> waitUntilNotified
    49:49:void <clinit>() -> <clinit>
okio.Timeout$1 -> okio.Timeout$1:
# {"fileName":"Timeout.java","id":"sourceFile"}
    49:49:void <init>() -> <init>
    51:51:okio.Timeout timeout(long,java.util.concurrent.TimeUnit) -> timeout
    55:55:okio.Timeout deadlineNanoTime(long) -> deadlineNanoTime
    59:59:void throwIfReached() -> throwIfReached
okio.Util -> okio.Util:
# {"fileName":"Util.java","id":"sourceFile"}
    java.nio.charset.Charset UTF_8 -> UTF_8
    24:25:void <init>() -> <init>
    28:32:void checkOffsetAndCount(long,long,long) -> checkOffsetAndCount
    35:38:short reverseBytesShort(short) -> reverseBytesShort
    42:42:int reverseBytesInt(int) -> reverseBytesInt
    49:49:long reverseBytesLong(long) -> reverseBytesLong
    65:66:void sneakyRethrow(java.lang.Throwable) -> sneakyRethrow
    70:70:void sneakyThrow2(java.lang.Throwable) -> sneakyThrow2
    75:78:boolean arrayRangeEquals(byte[],int,byte[],int,int) -> arrayRangeEquals
    22:22:void <clinit>() -> <clinit>
repeackage.com.android.creator.IdsSupplier -> a.a.a.a.a:
# {"fileName":"IdsSupplier.java","id":"sourceFile"}
    boolean isSupported() -> a
    java.lang.String getUDID(java.lang.String) -> a
    java.lang.String getOAID() -> b
    java.lang.String getVAID() -> c
    java.lang.String getAAID(java.lang.String) -> b
repeackage.com.android.creator.IdsSupplier$Default -> a.a.a.a.a$a:
# {"fileName":"IdsSupplier.java","id":"sourceFile"}
    45:45:void <init>() -> <init>
    48:48:boolean isSupported() -> a
    53:53:java.lang.String getUDID(java.lang.String) -> a
    58:58:java.lang.String getOAID() -> b
    63:63:java.lang.String getVAID() -> c
    68:68:java.lang.String getAAID(java.lang.String) -> b
    73:73:android.os.IBinder asBinder() -> d
repeackage.com.android.creator.IdsSupplier$Stub -> a.a.a.a.a$b:
# {"fileName":"IdsSupplier.java","id":"sourceFile"}
    java.lang.String DESCRIPTOR -> f
    int TRANSACTION_isSupported -> a
    int TRANSACTION_getUDID -> b
    int TRANSACTION_getOAID -> c
    int TRANSACTION_getVAID -> d
    int TRANSACTION_getAAID -> e
    86:88:void <init>() -> <init>
    95:102:repeackage.com.android.creator.IdsSupplier asInterface(android.os.IBinder) -> a
    107:107:android.os.IBinder asBinder() -> d
    112:158:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> a
    294:301:boolean setDefaultImpl(repeackage.com.android.creator.IdsSupplier) -> a
    305:305:repeackage.com.android.creator.IdsSupplier getDefaultImpl() -> e
repeackage.com.android.creator.IdsSupplier$Stub$Proxy -> a.a.a.a.a$b$a:
# {"fileName":"IdsSupplier.java","id":"sourceFile"}
    android.os.IBinder mRemote -> b
    repeackage.com.android.creator.IdsSupplier sDefaultImpl -> a
    166:168:void <init>(android.os.IBinder) -> <init>
    172:172:android.os.IBinder asBinder() -> d
    176:176:java.lang.String getInterfaceDescriptor() -> e
    181:196:boolean isSupported() -> a
    201:217:java.lang.String getUDID(java.lang.String) -> a
    222:237:java.lang.String getOAID() -> b
    242:257:java.lang.String getVAID() -> c
    262:278:java.lang.String getAAID(java.lang.String) -> b
repeackage.com.asus.msa.SupplementaryDID.IDidAidlInterface -> a.a.b.a.a.a:
# {"fileName":"IDidAidlInterface.java","id":"sourceFile"}
    boolean isSupport() -> a
    java.lang.String getUDID() -> b
    java.lang.String getOAID() -> c
    java.lang.String getVAID() -> d
    java.lang.String getAAID() -> e
repeackage.com.asus.msa.SupplementaryDID.IDidAidlInterface$Default -> a.a.b.a.a.a$a:
# {"fileName":"IDidAidlInterface.java","id":"sourceFile"}
    46:46:void <init>() -> <init>
    49:49:boolean isSupport() -> a
    54:54:java.lang.String getUDID() -> b
    59:59:java.lang.String getOAID() -> c
    64:64:java.lang.String getVAID() -> d
    69:69:java.lang.String getAAID() -> e
    74:74:android.os.IBinder asBinder() -> f
repeackage.com.asus.msa.SupplementaryDID.IDidAidlInterface$Stub -> a.a.b.a.a.a$b:
# {"fileName":"IDidAidlInterface.java","id":"sourceFile"}
    java.lang.String DESCRIPTOR -> f
    int TRANSACTION_isSupport -> a
    int TRANSACTION_getUDID -> b
    int TRANSACTION_getOAID -> c
    int TRANSACTION_getVAID -> d
    int TRANSACTION_getAAID -> e
    87:89:void <init>() -> <init>
    96:103:repeackage.com.asus.msa.SupplementaryDID.IDidAidlInterface asInterface(android.os.IBinder) -> a
    108:108:android.os.IBinder asBinder() -> f
    113:155:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> a
    289:296:boolean setDefaultImpl(repeackage.com.asus.msa.SupplementaryDID.IDidAidlInterface) -> a
    300:300:repeackage.com.asus.msa.SupplementaryDID.IDidAidlInterface getDefaultImpl() -> g
repeackage.com.asus.msa.SupplementaryDID.IDidAidlInterface$Stub$Proxy -> a.a.b.a.a.a$b$a:
# {"fileName":"IDidAidlInterface.java","id":"sourceFile"}
    android.os.IBinder mRemote -> b
    repeackage.com.asus.msa.SupplementaryDID.IDidAidlInterface sDefaultImpl -> a
    163:165:void <init>(android.os.IBinder) -> <init>
    169:169:android.os.IBinder asBinder() -> f
    173:173:java.lang.String getInterfaceDescriptor() -> g
    178:193:boolean isSupport() -> a
    198:213:java.lang.String getUDID() -> b
    218:233:java.lang.String getOAID() -> c
    238:253:java.lang.String getVAID() -> d
    258:273:java.lang.String getAAID() -> e
repeackage.com.bun.lib.MsaIdInterface -> a.a.c.a.a:
# {"fileName":"MsaIdInterface.java","id":"sourceFile"}
    boolean isSupported() -> a
    boolean isDataArrived() -> b
    java.lang.String getOAID() -> c
    java.lang.String getVAID() -> d
    java.lang.String getAAID() -> e
    void shutDown() -> f
repeackage.com.bun.lib.MsaIdInterface$Default -> a.a.c.a.a$a:
# {"fileName":"MsaIdInterface.java","id":"sourceFile"}
    47:47:void <init>() -> <init>
    50:50:boolean isSupported() -> a
    55:55:boolean isDataArrived() -> b
    60:60:java.lang.String getOAID() -> c
    65:65:java.lang.String getVAID() -> d
    70:70:java.lang.String getAAID() -> e
    75:75:void shutDown() -> f
    79:79:android.os.IBinder asBinder() -> g
repeackage.com.bun.lib.MsaIdInterface$Stub -> a.a.c.a.a$b:
# {"fileName":"MsaIdInterface.java","id":"sourceFile"}
    java.lang.String DESCRIPTOR -> g
    int TRANSACTION_isSupported -> a
    int TRANSACTION_isDataArrived -> b
    int TRANSACTION_getOAID -> c
    int TRANSACTION_getVAID -> d
    int TRANSACTION_getAAID -> e
    int TRANSACTION_shutDown -> f
    92:94:void <init>() -> <init>
    101:108:repeackage.com.bun.lib.MsaIdInterface asInterface(android.os.IBinder) -> a
    113:113:android.os.IBinder asBinder() -> g
    118:166:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> a
    319:326:boolean setDefaultImpl(repeackage.com.bun.lib.MsaIdInterface) -> a
    330:330:repeackage.com.bun.lib.MsaIdInterface getDefaultImpl() -> h
repeackage.com.bun.lib.MsaIdInterface$Stub$Proxy -> a.a.c.a.a$b$a:
# {"fileName":"MsaIdInterface.java","id":"sourceFile"}
    android.os.IBinder mRemote -> b
    repeackage.com.bun.lib.MsaIdInterface sDefaultImpl -> a
    174:176:void <init>(android.os.IBinder) -> <init>
    180:180:android.os.IBinder asBinder() -> g
    184:184:java.lang.String getInterfaceDescriptor() -> h
    189:204:boolean isSupported() -> a
    209:224:boolean isDataArrived() -> b
    229:244:java.lang.String getOAID() -> c
    249:264:java.lang.String getVAID() -> d
    269:284:java.lang.String getAAID() -> e
    289:303:void shutDown() -> f
repeackage.com.coolpad.deviceidsupport.IDeviceIdManager -> a.a.d.a.a:
# {"fileName":"IDeviceIdManager.java","id":"sourceFile"}
    java.lang.String getUDID(java.lang.String) -> a
    java.lang.String getOAID(java.lang.String) -> b
    java.lang.String getVAID(java.lang.String) -> c
    java.lang.String getAAID(java.lang.String) -> d
    java.lang.String getIMEI(java.lang.String) -> e
    boolean isCoolOs() -> a
    java.lang.String getCoolOsVersion() -> b
repeackage.com.coolpad.deviceidsupport.IDeviceIdManager$Default -> a.a.d.a.a$a:
# {"fileName":"IDeviceIdManager.java","id":"sourceFile"}
    46:46:void <init>() -> <init>
    49:49:java.lang.String getUDID(java.lang.String) -> a
    54:54:java.lang.String getOAID(java.lang.String) -> b
    59:59:java.lang.String getVAID(java.lang.String) -> c
    64:64:java.lang.String getAAID(java.lang.String) -> d
    69:69:java.lang.String getIMEI(java.lang.String) -> e
    74:74:boolean isCoolOs() -> a
    79:79:java.lang.String getCoolOsVersion() -> b
    84:84:android.os.IBinder asBinder() -> c
repeackage.com.coolpad.deviceidsupport.IDeviceIdManager$Stub -> a.a.d.a.a$b:
# {"fileName":"IDeviceIdManager.java","id":"sourceFile"}
    java.lang.String DESCRIPTOR -> h
    int TRANSACTION_getUDID -> a
    int TRANSACTION_getOAID -> b
    int TRANSACTION_getVAID -> c
    int TRANSACTION_getAAID -> d
    int TRANSACTION_getIMEI -> e
    int TRANSACTION_isCoolOs -> f
    int TRANSACTION_getCoolOsVersion -> g
    97:99:void <init>() -> <init>
    106:113:repeackage.com.coolpad.deviceidsupport.IDeviceIdManager asInterface(android.os.IBinder) -> a
    118:118:android.os.IBinder asBinder() -> c
    123:189:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> a
    370:377:boolean setDefaultImpl(repeackage.com.coolpad.deviceidsupport.IDeviceIdManager) -> a
    381:381:repeackage.com.coolpad.deviceidsupport.IDeviceIdManager getDefaultImpl() -> d
repeackage.com.coolpad.deviceidsupport.IDeviceIdManager$Stub$Proxy -> a.a.d.a.a$b$a:
# {"fileName":"IDeviceIdManager.java","id":"sourceFile"}
    android.os.IBinder mRemote -> b
    repeackage.com.coolpad.deviceidsupport.IDeviceIdManager sDefaultImpl -> a
    197:199:void <init>(android.os.IBinder) -> <init>
    203:203:android.os.IBinder asBinder() -> c
    207:207:java.lang.String getInterfaceDescriptor() -> d
    212:228:java.lang.String getUDID(java.lang.String) -> a
    233:249:java.lang.String getOAID(java.lang.String) -> b
    254:270:java.lang.String getVAID(java.lang.String) -> c
    275:291:java.lang.String getAAID(java.lang.String) -> d
    296:312:java.lang.String getIMEI(java.lang.String) -> e
    317:332:boolean isCoolOs() -> a
    337:352:java.lang.String getCoolOsVersion() -> b
repeackage.com.google.android.gms.ads.identifier.internal.IAdvertisingIdService -> a.a.e.a.a.a.a.a.a:
# {"fileName":"IAdvertisingIdService.java","id":"sourceFile"}
    java.lang.String getId() -> a
    boolean isLimitAdTrackingEnabled(boolean) -> a
repeackage.com.google.android.gms.ads.identifier.internal.IAdvertisingIdService$Default -> a.a.e.a.a.a.a.a.a$a:
# {"fileName":"IAdvertisingIdService.java","id":"sourceFile"}
    40:40:void <init>() -> <init>
    43:43:java.lang.String getId() -> a
    48:48:boolean isLimitAdTrackingEnabled(boolean) -> a
    53:53:android.os.IBinder asBinder() -> b
repeackage.com.google.android.gms.ads.identifier.internal.IAdvertisingIdService$Stub -> a.a.e.a.a.a.a.a.a$b:
# {"fileName":"IAdvertisingIdService.java","id":"sourceFile"}
    java.lang.String DESCRIPTOR -> c
    int TRANSACTION_getId -> a
    int TRANSACTION_isLimitAdTrackingEnabled -> b
    66:68:void <init>() -> <init>
    75:82:repeackage.com.google.android.gms.ads.identifier.internal.IAdvertisingIdService asInterface(android.os.IBinder) -> a
    87:87:android.os.IBinder asBinder() -> b
    92:115:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> a
    187:194:boolean setDefaultImpl(repeackage.com.google.android.gms.ads.identifier.internal.IAdvertisingIdService) -> a
    198:198:repeackage.com.google.android.gms.ads.identifier.internal.IAdvertisingIdService getDefaultImpl() -> c
repeackage.com.google.android.gms.ads.identifier.internal.IAdvertisingIdService$Stub$Proxy -> a.a.e.a.a.a.a.a.a$b$a:
# {"fileName":"IAdvertisingIdService.java","id":"sourceFile"}
    android.os.IBinder mRemote -> b
    repeackage.com.google.android.gms.ads.identifier.internal.IAdvertisingIdService sDefaultImpl -> a
    123:125:void <init>(android.os.IBinder) -> <init>
    129:129:android.os.IBinder asBinder() -> b
    133:133:java.lang.String getInterfaceDescriptor() -> c
    138:153:java.lang.String getId() -> a
    158:174:boolean isLimitAdTrackingEnabled(boolean) -> a
repeackage.com.heytap.openid.IOpenID -> a.a.f.a.a:
# {"fileName":"IOpenID.java","id":"sourceFile"}
    java.lang.String getSerID(java.lang.String,java.lang.String,java.lang.String) -> a
repeackage.com.heytap.openid.IOpenID$Default -> a.a.f.a.a$a:
# {"fileName":"IOpenID.java","id":"sourceFile"}
    38:38:void <init>() -> <init>
    41:41:java.lang.String getSerID(java.lang.String,java.lang.String,java.lang.String) -> a
    46:46:android.os.IBinder asBinder() -> a
repeackage.com.heytap.openid.IOpenID$Stub -> a.a.f.a.a$b:
# {"fileName":"IOpenID.java","id":"sourceFile"}
    java.lang.String DESCRIPTOR -> b
    int TRANSACTION_getSerID -> a
    59:61:void <init>() -> <init>
    68:75:repeackage.com.heytap.openid.IOpenID asInterface(android.os.IBinder) -> a
    80:80:android.os.IBinder asBinder() -> a
    85:105:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> a
    155:159:boolean setDefaultImpl(repeackage.com.heytap.openid.IOpenID) -> a
    163:163:repeackage.com.heytap.openid.IOpenID getDefaultImpl() -> b
repeackage.com.heytap.openid.IOpenID$Stub$Proxy -> a.a.f.a.a$b$a:
# {"fileName":"IOpenID.java","id":"sourceFile"}
    android.os.IBinder mRemote -> b
    repeackage.com.heytap.openid.IOpenID sDefaultImpl -> a
    113:115:void <init>(android.os.IBinder) -> <init>
    119:119:android.os.IBinder asBinder() -> a
    123:123:java.lang.String getInterfaceDescriptor() -> b
    128:146:java.lang.String getSerID(java.lang.String,java.lang.String,java.lang.String) -> a
repeackage.com.samsung.android.deviceidservice.IDeviceIdService -> a.a.g.a.a.a:
# {"fileName":"IDeviceIdService.java","id":"sourceFile"}
    java.lang.String getOAID() -> a
    java.lang.String getVAID(java.lang.String) -> a
    java.lang.String getAAID(java.lang.String) -> b
repeackage.com.samsung.android.deviceidservice.IDeviceIdService$Default -> a.a.g.a.a.a$a:
# {"fileName":"IDeviceIdService.java","id":"sourceFile"}
    42:42:void <init>() -> <init>
    45:45:java.lang.String getOAID() -> a
    50:50:java.lang.String getVAID(java.lang.String) -> a
    55:55:java.lang.String getAAID(java.lang.String) -> b
    60:60:android.os.IBinder asBinder() -> b
repeackage.com.samsung.android.deviceidservice.IDeviceIdService$Stub -> a.a.g.a.a.a$b:
# {"fileName":"IDeviceIdService.java","id":"sourceFile"}
    java.lang.String DESCRIPTOR -> d
    int TRANSACTION_getOAID -> a
    int TRANSACTION_getVAID -> b
    int TRANSACTION_getAAID -> c
    73:75:void <init>() -> <init>
    82:89:repeackage.com.samsung.android.deviceidservice.IDeviceIdService asInterface(android.os.IBinder) -> a
    94:94:android.os.IBinder asBinder() -> b
    99:131:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> a
    225:232:boolean setDefaultImpl(repeackage.com.samsung.android.deviceidservice.IDeviceIdService) -> a
    236:236:repeackage.com.samsung.android.deviceidservice.IDeviceIdService getDefaultImpl() -> c
repeackage.com.samsung.android.deviceidservice.IDeviceIdService$Stub$Proxy -> a.a.g.a.a.a$b$a:
# {"fileName":"IDeviceIdService.java","id":"sourceFile"}
    android.os.IBinder mRemote -> b
    repeackage.com.samsung.android.deviceidservice.IDeviceIdService sDefaultImpl -> a
    139:141:void <init>(android.os.IBinder) -> <init>
    145:145:android.os.IBinder asBinder() -> b
    149:149:java.lang.String getInterfaceDescriptor() -> c
    154:169:java.lang.String getOAID() -> a
    174:190:java.lang.String getVAID(java.lang.String) -> a
    195:211:java.lang.String getAAID(java.lang.String) -> b
repeackage.com.uodis.opendevice.aidl.OpenDeviceIdentifierService -> a.a.h.a.a.a:
# {"fileName":"OpenDeviceIdentifierService.java","id":"sourceFile"}
    java.lang.String getOaid() -> a
    boolean isOaidTrackLimited() -> b
repeackage.com.uodis.opendevice.aidl.OpenDeviceIdentifierService$Default -> a.a.h.a.a.a$a:
# {"fileName":"OpenDeviceIdentifierService.java","id":"sourceFile"}
    40:40:void <init>() -> <init>
    43:43:java.lang.String getOaid() -> a
    48:48:boolean isOaidTrackLimited() -> b
    53:53:android.os.IBinder asBinder() -> c
repeackage.com.uodis.opendevice.aidl.OpenDeviceIdentifierService$Stub -> a.a.h.a.a.a$b:
# {"fileName":"OpenDeviceIdentifierService.java","id":"sourceFile"}
    java.lang.String DESCRIPTOR -> c
    int TRANSACTION_getOaid -> a
    int TRANSACTION_isOaidTrackLimited -> b
    66:68:void <init>() -> <init>
    75:82:repeackage.com.uodis.opendevice.aidl.OpenDeviceIdentifierService asInterface(android.os.IBinder) -> a
    87:87:android.os.IBinder asBinder() -> c
    92:113:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> a
    184:191:boolean setDefaultImpl(repeackage.com.uodis.opendevice.aidl.OpenDeviceIdentifierService) -> a
    195:195:repeackage.com.uodis.opendevice.aidl.OpenDeviceIdentifierService getDefaultImpl() -> d
repeackage.com.uodis.opendevice.aidl.OpenDeviceIdentifierService$Stub$Proxy -> a.a.h.a.a.a$b$a:
# {"fileName":"OpenDeviceIdentifierService.java","id":"sourceFile"}
    android.os.IBinder mRemote -> b
    repeackage.com.uodis.opendevice.aidl.OpenDeviceIdentifierService sDefaultImpl -> a
    121:123:void <init>(android.os.IBinder) -> <init>
    127:127:android.os.IBinder asBinder() -> c
    131:131:java.lang.String getInterfaceDescriptor() -> d
    136:151:java.lang.String getOaid() -> a
    156:171:boolean isOaidTrackLimited() -> b
repeackage.com.zui.deviceidservice.IDeviceidInterface -> a.a.i.a.a:
# {"fileName":"IDeviceidInterface.java","id":"sourceFile"}
    java.lang.String getOAID() -> a
    java.lang.String getUDID() -> b
    boolean isSupport() -> c
    java.lang.String getVAID(java.lang.String) -> a
    java.lang.String getAAID(java.lang.String) -> b
    java.lang.String createAAIDForPackageName(java.lang.String) -> c
repeackage.com.zui.deviceidservice.IDeviceidInterface$Default -> a.a.i.a.a$a:
# {"fileName":"IDeviceidInterface.java","id":"sourceFile"}
    48:48:void <init>() -> <init>
    51:51:java.lang.String getOAID() -> a
    56:56:java.lang.String getUDID() -> b
    61:61:boolean isSupport() -> c
    66:66:java.lang.String getVAID(java.lang.String) -> a
    71:71:java.lang.String getAAID(java.lang.String) -> b
    76:76:java.lang.String createAAIDForPackageName(java.lang.String) -> c
    81:81:android.os.IBinder asBinder() -> d
repeackage.com.zui.deviceidservice.IDeviceidInterface$Stub -> a.a.i.a.a$b:
# {"fileName":"IDeviceidInterface.java","id":"sourceFile"}
    java.lang.String DESCRIPTOR -> g
    int TRANSACTION_getOAID -> a
    int TRANSACTION_getUDID -> b
    int TRANSACTION_isSupport -> c
    int TRANSACTION_getVAID -> d
    int TRANSACTION_getAAID -> e
    int TRANSACTION_createAAIDForPackageName -> f
    94:96:void <init>() -> <init>
    103:110:repeackage.com.zui.deviceidservice.IDeviceidInterface asInterface(android.os.IBinder) -> a
    115:115:android.os.IBinder asBinder() -> d
    120:175:boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> a
    333:340:boolean setDefaultImpl(repeackage.com.zui.deviceidservice.IDeviceidInterface) -> a
    344:344:repeackage.com.zui.deviceidservice.IDeviceidInterface getDefaultImpl() -> e
repeackage.com.zui.deviceidservice.IDeviceidInterface$Stub$Proxy -> a.a.i.a.a$b$a:
# {"fileName":"IDeviceidInterface.java","id":"sourceFile"}
    android.os.IBinder mRemote -> b
    repeackage.com.zui.deviceidservice.IDeviceidInterface sDefaultImpl -> a
    183:185:void <init>(android.os.IBinder) -> <init>
    189:189:android.os.IBinder asBinder() -> d
    193:193:java.lang.String getInterfaceDescriptor() -> e
    198:213:java.lang.String getOAID() -> a
    218:233:java.lang.String getUDID() -> b
    238:253:boolean isSupport() -> c
    258:274:java.lang.String getVAID(java.lang.String) -> a
    279:295:java.lang.String getAAID(java.lang.String) -> b
    300:316:java.lang.String createAAIDForPackageName(java.lang.String) -> c
